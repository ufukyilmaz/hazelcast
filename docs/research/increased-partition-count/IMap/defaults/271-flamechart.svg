<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1237"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1237"> </text>
<g id="frames">
<g>
<title>all (41,993 samples, 100.00%)</title><rect x="10.0" y="1203.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1214.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (38 samples, 0.09%)</title><rect x="10.5" y="1187.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.5" y="1198.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (36 samples, 0.09%)</title><rect x="10.6" y="1171.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.6" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (25 samples, 0.06%)</title><rect x="10.8" y="1155.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.8" y="1166.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (11 samples, 0.03%)</title><rect x="10.9" y="1139.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.9" y="1150.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (147 samples, 0.35%)</title><rect x="11.8" y="1187.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.8" y="1198.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (9 samples, 0.02%)</title><rect x="12.4" y="1171.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.4" y="1182.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (82 samples, 0.20%)</title><rect x="12.7" y="1171.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.7" y="1182.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin_VaryDuration(Thread*) (17 samples, 0.04%)</title><rect x="13.8" y="1155.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.8" y="1166.0"></text>
</g>
<g>
<title>SpinPause (16 samples, 0.04%)</title><rect x="14.4" y="1155.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="17.4" y="1166.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (20 samples, 0.05%)</title><rect x="15.0" y="1171.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="18.0" y="1182.0"></text>
</g>
<g>
<title>[not_walkable_Java] (48 samples, 0.11%)</title><rect x="16.2" y="1187.0" width="1.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="19.2" y="1198.0"></text>
</g>
<g>
<title>[unknown] (40 samples, 0.10%)</title><rect x="16.4" y="1171.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="19.4" y="1182.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.05%)</title><rect x="16.5" y="1155.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="19.5" y="1166.0"></text>
</g>
<g>
<title>__GI___clock_gettime (14 samples, 0.03%)</title><rect x="16.5" y="1139.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="19.5" y="1150.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (9 samples, 0.02%)</title><rect x="16.6" y="1123.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="19.6" y="1134.0"></text>
</g>
<g>
<title>__GI___clock_gettime (16 samples, 0.04%)</title><rect x="17.1" y="1155.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="20.1" y="1166.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (10 samples, 0.02%)</title><rect x="17.2" y="1139.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="20.2" y="1150.0"></text>
</g>
<g>
<title>[unknown_Java] (2,722 samples, 6.48%)</title><rect x="17.6" y="1187.0" width="76.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="20.6" y="1198.0">[unknown..</text>
</g>
<g>
<title>[unknown] (85 samples, 0.20%)</title><rect x="87.0" y="1171.0" width="2.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="90.0" y="1182.0"></text>
</g>
<g>
<title>__GI___clock_gettime (85 samples, 0.20%)</title><rect x="87.0" y="1155.0" width="2.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="90.0" y="1166.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (85 samples, 0.20%)</title><rect x="87.0" y="1139.0" width="2.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="90.0" y="1150.0"></text>
</g>
<g>
<title>[vdso] (85 samples, 0.20%)</title><rect x="87.0" y="1123.0" width="2.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="90.0" y="1134.0"></text>
</g>
<g>
<title>__pthread_cond_signal (10 samples, 0.02%)</title><rect x="89.6" y="1171.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="92.6" y="1182.0"></text>
</g>
<g>
<title>ret_from_intr (148 samples, 0.35%)</title><rect x="89.9" y="1171.0" width="4.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="92.9" y="1182.0"></text>
</g>
<g>
<title>do_IRQ (148 samples, 0.35%)</title><rect x="89.9" y="1155.0" width="4.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="92.9" y="1166.0"></text>
</g>
<g>
<title>irq_exit (148 samples, 0.35%)</title><rect x="89.9" y="1139.0" width="4.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="92.9" y="1150.0"></text>
</g>
<g>
<title>__softirqentry_text_start (148 samples, 0.35%)</title><rect x="89.9" y="1123.0" width="4.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="92.9" y="1134.0"></text>
</g>
<g>
<title>net_rx_action (88 samples, 0.21%)</title><rect x="91.3" y="1107.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="94.3" y="1118.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (87 samples, 0.21%)</title><rect x="91.3" y="1091.0" width="2.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="94.3" y="1102.0"></text>
</g>
<g>
<title>consume_skb (11 samples, 0.03%)</title><rect x="91.6" y="1075.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="94.6" y="1086.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (57 samples, 0.14%)</title><rect x="91.9" y="1075.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="94.9" y="1086.0"></text>
</g>
<g>
<title>napi_gro_frags (13 samples, 0.03%)</title><rect x="92.4" y="1059.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="95.4" y="1070.0"></text>
</g>
<g>
<title>dev_gro_receive (12 samples, 0.03%)</title><rect x="92.4" y="1043.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="95.4" y="1054.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (9 samples, 0.02%)</title><rect x="92.5" y="1027.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="95.5" y="1038.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (9 samples, 0.02%)</title><rect x="92.5" y="1011.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="95.5" y="1022.0"></text>
</g>
<g>
<title>ip_rcv (9 samples, 0.02%)</title><rect x="92.5" y="995.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="95.5" y="1006.0"></text>
</g>
<g>
<title>napi_gro_receive (21 samples, 0.05%)</title><rect x="92.8" y="1059.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="95.8" y="1070.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (19 samples, 0.05%)</title><rect x="92.8" y="1043.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="95.8" y="1054.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (17 samples, 0.04%)</title><rect x="92.8" y="1027.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="95.8" y="1038.0"></text>
</g>
<g>
<title>ip_rcv (17 samples, 0.04%)</title><rect x="92.8" y="1011.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="95.8" y="1022.0"></text>
</g>
<g>
<title>ip_local_deliver (17 samples, 0.04%)</title><rect x="92.8" y="995.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="95.8" y="1006.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (17 samples, 0.04%)</title><rect x="92.8" y="979.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="95.8" y="990.0"></text>
</g>
<g>
<title>tcp_v4_rcv (17 samples, 0.04%)</title><rect x="92.8" y="963.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="95.8" y="974.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (16 samples, 0.04%)</title><rect x="92.8" y="947.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="95.8" y="958.0"></text>
</g>
<g>
<title>tcp_rcv_established (16 samples, 0.04%)</title><rect x="92.8" y="931.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="95.8" y="942.0"></text>
</g>
<g>
<title>tasklet_action (12 samples, 0.03%)</title><rect x="93.7" y="1107.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="96.7" y="1118.0"></text>
</g>
<g>
<title>tcp_tasklet_func (11 samples, 0.03%)</title><rect x="93.8" y="1091.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="96.8" y="1102.0"></text>
</g>
<g>
<title>tcp_write_xmit (9 samples, 0.02%)</title><rect x="93.8" y="1075.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="96.8" y="1086.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (9 samples, 0.02%)</title><rect x="93.8" y="1059.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="96.8" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioThread.run (20,006 samples, 47.64%)</title><rect x="94.3" y="1187.0" width="562.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="97.3" y="1198.0">com/hazelcast/internal/networking/nio/NioThread.run</text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioThread.selectLoop (20,006 samples, 47.64%)</title><rect x="94.3" y="1171.0" width="562.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="97.3" y="1182.0">com/hazelcast/internal/networking/nio/NioThread.selectLoop</text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioThread.processSelectionKeys (12,983 samples, 30.92%)</title><rect x="94.6" y="1155.0" width="364.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="97.6" y="1166.0">com/hazelcast/internal/networking/nio/NioThread.pr..</text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioThread.processSelectionKey (12,880 samples, 30.67%)</title><rect x="95.3" y="1139.0" width="361.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.3" y="1150.0">com/hazelcast/internal/networking/nio/NioThread.p..</text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioInboundPipeline.process (7,706 samples, 18.35%)</title><rect x="95.8" y="1123.0" width="216.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.8" y="1134.0">com/hazelcast/internal/netwo..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/util/ClientMessageDecoder.onRead (2,668 samples, 6.35%)</title><rect x="97.5" y="1107.0" width="74.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="100.5" y="1118.0">com/haze..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessageReader.readFrom (984 samples, 2.34%)</title><rect x="98.1" y="1091.0" width="27.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="101.1" y="1102.0">c..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessageReader.readFrame (974 samples, 2.32%)</title><rect x="98.3" y="1075.0" width="27.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="101.3" y="1086.0">c..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessageReader.accumulate (44 samples, 0.10%)</title><rect x="100.5" y="1059.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.5" y="1070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (41 samples, 0.10%)</title><rect x="100.5" y="1043.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="103.5" y="1054.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (30 samples, 0.07%)</title><rect x="100.8" y="1027.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="103.8" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readIntL (801 samples, 1.91%)</title><rect x="101.7" y="1059.0" width="22.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="104.7" y="1070.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readIntL (792 samples, 1.89%)</title><rect x="101.9" y="1043.0" width="22.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.9" y="1054.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteBufferAccessStrategy.getByte (784 samples, 1.87%)</title><rect x="102.1" y="1027.0" width="22.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="105.1" y="1038.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteBufferAccessStrategy.getByte (762 samples, 1.81%)</title><rect x="102.6" y="1011.0" width="21.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="105.6" y="1022.0">c..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (735 samples, 1.75%)</title><rect x="103.1" y="995.0" width="20.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="106.1" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (19 samples, 0.05%)</title><rect x="104.1" y="979.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="107.1" y="990.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (19 samples, 0.05%)</title><rect x="104.1" y="963.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="107.1" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (17 samples, 0.04%)</title><rect x="104.2" y="947.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="107.2" y="958.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (17 samples, 0.04%)</title><rect x="104.2" y="931.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="107.2" y="942.0"></text>
</g>
<g>
<title>JfrTraceEvent&lt;EventAllocObjectInNewTLAB&gt;::writeEvent() (17 samples, 0.04%)</title><rect x="104.2" y="915.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="107.2" y="926.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::record(int) (16 samples, 0.04%)</title><rect x="104.2" y="899.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="107.2" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (378 samples, 0.90%)</title><rect x="104.9" y="979.0" width="10.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="107.9" y="990.0"></text>
</g>
<g>
<title>ret_from_intr (69 samples, 0.16%)</title><rect x="113.6" y="963.0" width="1.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="116.6" y="974.0"></text>
</g>
<g>
<title>do_IRQ (69 samples, 0.16%)</title><rect x="113.6" y="947.0" width="1.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="116.6" y="958.0"></text>
</g>
<g>
<title>irq_exit (69 samples, 0.16%)</title><rect x="113.6" y="931.0" width="1.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="116.6" y="942.0"></text>
</g>
<g>
<title>__softirqentry_text_start (69 samples, 0.16%)</title><rect x="113.6" y="915.0" width="1.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="116.6" y="926.0"></text>
</g>
<g>
<title>net_rx_action (53 samples, 0.13%)</title><rect x="114.0" y="899.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="117.0" y="910.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (52 samples, 0.12%)</title><rect x="114.0" y="883.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="117.0" y="894.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (42 samples, 0.10%)</title><rect x="114.3" y="867.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="117.3" y="878.0"></text>
</g>
<g>
<title>napi_gro_frags (12 samples, 0.03%)</title><rect x="114.5" y="851.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="117.5" y="862.0"></text>
</g>
<g>
<title>dev_gro_receive (10 samples, 0.02%)</title><rect x="114.5" y="835.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="117.5" y="846.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (10 samples, 0.02%)</title><rect x="114.5" y="819.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="117.5" y="830.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (10 samples, 0.02%)</title><rect x="114.5" y="803.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="117.5" y="814.0"></text>
</g>
<g>
<title>ip_rcv (10 samples, 0.02%)</title><rect x="114.5" y="787.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="117.5" y="798.0"></text>
</g>
<g>
<title>ip_local_deliver (10 samples, 0.02%)</title><rect x="114.5" y="771.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="117.5" y="782.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (10 samples, 0.02%)</title><rect x="114.5" y="755.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="117.5" y="766.0"></text>
</g>
<g>
<title>tcp_v4_rcv (10 samples, 0.02%)</title><rect x="114.5" y="739.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="117.5" y="750.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (10 samples, 0.02%)</title><rect x="114.5" y="723.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="117.5" y="734.0"></text>
</g>
<g>
<title>tcp_rcv_established (10 samples, 0.02%)</title><rect x="114.5" y="707.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="117.5" y="718.0"></text>
</g>
<g>
<title>napi_gro_receive (20 samples, 0.05%)</title><rect x="114.8" y="851.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="117.8" y="862.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (18 samples, 0.04%)</title><rect x="114.9" y="835.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="117.9" y="846.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (18 samples, 0.04%)</title><rect x="114.9" y="819.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="117.9" y="830.0"></text>
</g>
<g>
<title>ip_rcv (17 samples, 0.04%)</title><rect x="114.9" y="803.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="117.9" y="814.0"></text>
</g>
<g>
<title>ip_local_deliver (14 samples, 0.03%)</title><rect x="114.9" y="787.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="117.9" y="798.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (14 samples, 0.03%)</title><rect x="114.9" y="771.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="117.9" y="782.0"></text>
</g>
<g>
<title>tcp_v4_rcv (13 samples, 0.03%)</title><rect x="115.0" y="755.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="118.0" y="766.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (11 samples, 0.03%)</title><rect x="115.0" y="739.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="118.0" y="750.0"></text>
</g>
<g>
<title>tcp_rcv_established (11 samples, 0.03%)</title><rect x="115.0" y="723.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="118.0" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (275 samples, 0.65%)</title><rect x="115.8" y="979.0" width="7.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="118.8" y="990.0"></text>
</g>
<g>
<title>ret_from_intr (39 samples, 0.09%)</title><rect x="122.5" y="963.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="125.5" y="974.0"></text>
</g>
<g>
<title>do_IRQ (39 samples, 0.09%)</title><rect x="122.5" y="947.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="125.5" y="958.0"></text>
</g>
<g>
<title>irq_exit (39 samples, 0.09%)</title><rect x="122.5" y="931.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="125.5" y="942.0"></text>
</g>
<g>
<title>__softirqentry_text_start (39 samples, 0.09%)</title><rect x="122.5" y="915.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="125.5" y="926.0"></text>
</g>
<g>
<title>net_rx_action (25 samples, 0.06%)</title><rect x="122.8" y="899.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="125.8" y="910.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (25 samples, 0.06%)</title><rect x="122.8" y="883.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="125.8" y="894.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (22 samples, 0.05%)</title><rect x="122.9" y="867.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="125.9" y="878.0"></text>
</g>
<g>
<title>napi_gro_receive (10 samples, 0.02%)</title><rect x="123.2" y="851.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="126.2" y="862.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (9 samples, 0.02%)</title><rect x="123.3" y="835.0" width="0.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="126.3" y="846.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (9 samples, 0.02%)</title><rect x="123.3" y="819.0" width="0.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="126.3" y="830.0"></text>
</g>
<g>
<title>ip_rcv (9 samples, 0.02%)</title><rect x="123.3" y="803.0" width="0.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="126.3" y="814.0"></text>
</g>
<g>
<title>ret_from_intr (9 samples, 0.02%)</title><rect x="123.7" y="995.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="126.7" y="1006.0"></text>
</g>
<g>
<title>do_IRQ (9 samples, 0.02%)</title><rect x="123.7" y="979.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="126.7" y="990.0"></text>
</g>
<g>
<title>irq_exit (9 samples, 0.02%)</title><rect x="123.7" y="963.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="126.7" y="974.0"></text>
</g>
<g>
<title>__softirqentry_text_start (9 samples, 0.02%)</title><rect x="123.7" y="947.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="126.7" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readShortL (10 samples, 0.02%)</title><rect x="124.2" y="1059.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="127.2" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readShortL (10 samples, 0.02%)</title><rect x="124.2" y="1043.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="127.2" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteBufferAccessStrategy.getByte (10 samples, 0.02%)</title><rect x="124.2" y="1027.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="127.2" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteBufferAccessStrategy.getByte (10 samples, 0.02%)</title><rect x="124.2" y="1011.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="127.2" y="1022.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (9 samples, 0.02%)</title><rect x="124.2" y="995.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="127.2" y="1006.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (21 samples, 0.05%)</title><rect x="124.6" y="1059.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="127.6" y="1070.0"></text>
</g>
<g>
<title>ret_from_intr (17 samples, 0.04%)</title><rect x="125.2" y="1059.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="128.2" y="1070.0"></text>
</g>
<g>
<title>do_IRQ (17 samples, 0.04%)</title><rect x="125.2" y="1043.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="128.2" y="1054.0"></text>
</g>
<g>
<title>irq_exit (17 samples, 0.04%)</title><rect x="125.2" y="1027.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="128.2" y="1038.0"></text>
</g>
<g>
<title>__softirqentry_text_start (17 samples, 0.04%)</title><rect x="125.2" y="1011.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="128.2" y="1022.0"></text>
</g>
<g>
<title>net_rx_action (11 samples, 0.03%)</title><rect x="125.4" y="995.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="128.4" y="1006.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (11 samples, 0.03%)</title><rect x="125.4" y="979.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="128.4" y="990.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (11 samples, 0.03%)</title><rect x="125.4" y="963.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="128.4" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/util/ClientMessageDecoder.handleMessage (1,637 samples, 3.90%)</title><rect x="125.8" y="1091.0" width="46.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.8" y="1102.0">com/..</text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEngineImpl.accept (1,637 samples, 3.90%)</title><rect x="125.8" y="1075.0" width="46.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="128.8" y="1086.0">com/..</text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEngineImpl.accept (1,637 samples, 3.90%)</title><rect x="125.8" y="1059.0" width="46.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="128.8" y="1070.0">com/..</text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEngineImpl.isUrgent (25 samples, 0.06%)</title><rect x="126.0" y="1043.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.0" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/CompositeMessageTaskFactory.create (140 samples, 0.33%)</title><rect x="126.7" y="1043.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="129.7" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/DefaultMessageTaskFactoryProvider$$Lambda$709/252738640.create (22 samples, 0.05%)</title><rect x="127.1" y="1027.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="130.1" y="1038.0"></text>
</g>
<g>
<title>itable stub (13 samples, 0.03%)</title><rect x="127.4" y="1011.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="130.4" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/DefaultMessageTaskFactoryProvider$$Lambda$722/182670350.create (51 samples, 0.12%)</title><rect x="127.8" y="1027.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="130.8" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/DefaultMessageTaskFactoryProvider.lambda$initializeMapTaskFactories$212 (51 samples, 0.12%)</title><rect x="127.8" y="1011.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="130.8" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapPutMessageTask.&lt;init&gt; (48 samples, 0.11%)</title><rect x="127.9" y="995.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="130.9" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/AbstractMapPutMessageTask.&lt;init&gt; (48 samples, 0.11%)</title><rect x="127.9" y="979.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="130.9" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/AbstractMapPartitionMessageTask.&lt;init&gt; (48 samples, 0.11%)</title><rect x="127.9" y="963.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="130.9" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractPartitionMessageTask.&lt;init&gt; (48 samples, 0.11%)</title><rect x="127.9" y="947.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="130.9" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask.&lt;init&gt; (48 samples, 0.11%)</title><rect x="127.9" y="931.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="130.9" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.&lt;init&gt; (48 samples, 0.11%)</title><rect x="127.9" y="915.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="130.9" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.initEndpoint (15 samples, 0.04%)</title><rect x="128.0" y="899.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="131.0" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEndpointManagerImpl.getEndpoint (15 samples, 0.04%)</title><rect x="128.0" y="883.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (15 samples, 0.04%)</title><rect x="128.0" y="867.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="131.0" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/Node.getLogger (28 samples, 0.07%)</title><rect x="128.4" y="899.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="131.4" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/logging/impl/LoggingServiceImpl.getLogger (28 samples, 0.07%)</title><rect x="128.4" y="883.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="131.4" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutIfAbsent (23 samples, 0.05%)</title><rect x="128.5" y="867.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="131.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (22 samples, 0.05%)</title><rect x="128.6" y="851.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="131.6" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/DefaultMessageTaskFactoryProvider$$Lambda$750/917768476.create (30 samples, 0.07%)</title><rect x="129.2" y="1027.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="132.2" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/DefaultMessageTaskFactoryProvider.lambda$initializeMapTaskFactories$240 (30 samples, 0.07%)</title><rect x="129.2" y="1011.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="132.2" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapGetMessageTask.&lt;init&gt; (22 samples, 0.05%)</title><rect x="129.4" y="995.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.4" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/AbstractMapPartitionMessageTask.&lt;init&gt; (22 samples, 0.05%)</title><rect x="129.4" y="979.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.4" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractPartitionMessageTask.&lt;init&gt; (22 samples, 0.05%)</title><rect x="129.4" y="963.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="132.4" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask.&lt;init&gt; (22 samples, 0.05%)</title><rect x="129.4" y="947.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.4" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.&lt;init&gt; (21 samples, 0.05%)</title><rect x="129.5" y="931.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.5" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.initEndpoint (9 samples, 0.02%)</title><rect x="129.5" y="915.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="132.5" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEndpointManagerImpl.getEndpoint (9 samples, 0.02%)</title><rect x="129.5" y="899.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.02%)</title><rect x="129.5" y="883.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="132.5" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/Node.getLogger (12 samples, 0.03%)</title><rect x="129.7" y="915.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="132.7" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/logging/impl/LoggingServiceImpl.getLogger (12 samples, 0.03%)</title><rect x="129.7" y="899.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="132.7" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutIfAbsent (10 samples, 0.02%)</title><rect x="129.8" y="883.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="132.8" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/Int2ObjectHashMap.get (15 samples, 0.04%)</title><rect x="130.1" y="1027.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="133.1" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/Int2ObjectHashMap.get (15 samples, 0.04%)</title><rect x="130.1" y="1011.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="133.1" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl.execute (1,464 samples, 3.49%)</title><rect x="130.6" y="1043.0" width="41.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="133.6" y="1054.0">com..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.execute (1,460 samples, 3.48%)</title><rect x="130.7" y="1027.0" width="41.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="133.7" y="1038.0">com..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.execute (1,453 samples, 3.46%)</title><rect x="130.9" y="1011.0" width="40.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="133.9" y="1022.0">com..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationQueueImpl.add (1,349 samples, 3.21%)</title><rect x="133.6" y="995.0" width="37.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="136.6" y="1006.0">com..</text>
</g>
<g>
<title>java/util/AbstractQueue.add (1,331 samples, 3.17%)</title><rect x="134.1" y="979.0" width="37.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="137.1" y="990.0">jav..</text>
</g>
<g>
<title>com/hazelcast/internal/util/concurrent/MPSCQueue.offer (1,321 samples, 3.15%)</title><rect x="134.1" y="963.0" width="37.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="137.1" y="974.0">com..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.compareAndSet (38 samples, 0.09%)</title><rect x="134.7" y="947.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="137.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1,257 samples, 2.99%)</title><rect x="135.8" y="947.0" width="35.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="138.8" y="958.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1,257 samples, 2.99%)</title><rect x="135.8" y="931.0" width="35.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="138.8" y="942.0">sun..</text>
</g>
<g>
<title>Unsafe_Unpark (117 samples, 0.28%)</title><rect x="135.9" y="915.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="138.9" y="926.0"></text>
</g>
<g>
<title>pthread_mutex_lock (78 samples, 0.19%)</title><rect x="137.0" y="899.0" width="2.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="140.0" y="910.0"></text>
</g>
<g>
<title>ret_from_intr (16 samples, 0.04%)</title><rect x="138.7" y="883.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="141.7" y="894.0"></text>
</g>
<g>
<title>do_IRQ (16 samples, 0.04%)</title><rect x="138.7" y="867.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="141.7" y="878.0"></text>
</g>
<g>
<title>irq_exit (16 samples, 0.04%)</title><rect x="138.7" y="851.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="141.7" y="862.0"></text>
</g>
<g>
<title>__softirqentry_text_start (16 samples, 0.04%)</title><rect x="138.7" y="835.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="141.7" y="846.0"></text>
</g>
<g>
<title>net_rx_action (11 samples, 0.03%)</title><rect x="138.9" y="819.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="141.9" y="830.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (11 samples, 0.03%)</title><rect x="138.9" y="803.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="141.9" y="814.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (11 samples, 0.03%)</title><rect x="138.9" y="787.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="141.9" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (12 samples, 0.03%)</title><rect x="139.2" y="915.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="142.2" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (12 samples, 0.03%)</title><rect x="139.2" y="899.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="142.2" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (12 samples, 0.03%)</title><rect x="139.2" y="883.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="142.2" y="894.0"></text>
</g>
<g>
<title>sys_futex (12 samples, 0.03%)</title><rect x="139.2" y="867.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="142.2" y="878.0"></text>
</g>
<g>
<title>do_futex (12 samples, 0.03%)</title><rect x="139.2" y="851.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="142.2" y="862.0"></text>
</g>
<g>
<title>futex_wake (12 samples, 0.03%)</title><rect x="139.2" y="835.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="142.2" y="846.0"></text>
</g>
<g>
<title>wake_up_q (9 samples, 0.02%)</title><rect x="139.3" y="819.0" width="0.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="142.3" y="830.0"></text>
</g>
<g>
<title>try_to_wake_up (9 samples, 0.02%)</title><rect x="139.3" y="803.0" width="0.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="142.3" y="814.0"></text>
</g>
<g>
<title>__lock_text_start (9 samples, 0.02%)</title><rect x="139.3" y="787.0" width="0.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="142.3" y="798.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1,101 samples, 2.62%)</title><rect x="139.5" y="915.0" width="31.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="142.5" y="926.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (944 samples, 2.25%)</title><rect x="143.4" y="899.0" width="26.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="146.4" y="910.0">e..</text>
</g>
<g>
<title>do_syscall_64 (944 samples, 2.25%)</title><rect x="143.4" y="883.0" width="26.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="146.4" y="894.0">d..</text>
</g>
<g>
<title>ret_from_intr (19 samples, 0.05%)</title><rect x="145.8" y="867.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="148.8" y="878.0"></text>
</g>
<g>
<title>do_IRQ (19 samples, 0.05%)</title><rect x="145.8" y="851.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="148.8" y="862.0"></text>
</g>
<g>
<title>irq_exit (19 samples, 0.05%)</title><rect x="145.8" y="835.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="148.8" y="846.0"></text>
</g>
<g>
<title>__softirqentry_text_start (19 samples, 0.05%)</title><rect x="145.8" y="819.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="148.8" y="830.0"></text>
</g>
<g>
<title>net_rx_action (14 samples, 0.03%)</title><rect x="145.9" y="803.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="148.9" y="814.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (14 samples, 0.03%)</title><rect x="145.9" y="787.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="148.9" y="798.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (10 samples, 0.02%)</title><rect x="146.0" y="771.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="149.0" y="782.0"></text>
</g>
<g>
<title>sys_futex (817 samples, 1.95%)</title><rect x="146.4" y="867.0" width="22.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="149.4" y="878.0">s..</text>
</g>
<g>
<title>do_futex (809 samples, 1.93%)</title><rect x="146.6" y="851.0" width="22.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="149.6" y="862.0">d..</text>
</g>
<g>
<title>futex_wake (796 samples, 1.90%)</title><rect x="146.9" y="835.0" width="22.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="149.9" y="846.0">f..</text>
</g>
<g>
<title>_raw_spin_lock (36 samples, 0.09%)</title><rect x="149.1" y="819.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="152.1" y="830.0"></text>
</g>
<g>
<title>get_futex_key (21 samples, 0.05%)</title><rect x="150.1" y="819.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="153.1" y="830.0"></text>
</g>
<g>
<title>hash_futex (13 samples, 0.03%)</title><rect x="150.7" y="819.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="153.7" y="830.0"></text>
</g>
<g>
<title>mark_wake_futex (97 samples, 0.23%)</title><rect x="151.0" y="819.0" width="2.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="154.0" y="830.0"></text>
</g>
<g>
<title>__unqueue_futex (37 samples, 0.09%)</title><rect x="151.0" y="803.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="154.0" y="814.0"></text>
</g>
<g>
<title>wake_q_add (60 samples, 0.14%)</title><rect x="152.1" y="803.0" width="1.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="155.1" y="814.0"></text>
</g>
<g>
<title>ret_from_intr (15 samples, 0.04%)</title><rect x="153.8" y="819.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="156.8" y="830.0"></text>
</g>
<g>
<title>do_IRQ (15 samples, 0.04%)</title><rect x="153.8" y="803.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="156.8" y="814.0"></text>
</g>
<g>
<title>irq_exit (15 samples, 0.04%)</title><rect x="153.8" y="787.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="156.8" y="798.0"></text>
</g>
<g>
<title>__softirqentry_text_start (15 samples, 0.04%)</title><rect x="153.8" y="771.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="156.8" y="782.0"></text>
</g>
<g>
<title>net_rx_action (9 samples, 0.02%)</title><rect x="153.9" y="755.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="156.9" y="766.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (9 samples, 0.02%)</title><rect x="153.9" y="739.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="156.9" y="750.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (9 samples, 0.02%)</title><rect x="153.9" y="723.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="156.9" y="734.0"></text>
</g>
<g>
<title>wake_up_q (537 samples, 1.28%)</title><rect x="154.2" y="819.0" width="15.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="157.2" y="830.0"></text>
</g>
<g>
<title>try_to_wake_up (533 samples, 1.27%)</title><rect x="154.3" y="803.0" width="15.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="157.3" y="814.0"></text>
</g>
<g>
<title>__lock_text_start (530 samples, 1.26%)</title><rect x="154.3" y="787.0" width="14.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="157.3" y="798.0"></text>
</g>
<g>
<title>ret_from_intr (80 samples, 0.19%)</title><rect x="167.0" y="771.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="170.0" y="782.0"></text>
</g>
<g>
<title>do_IRQ (80 samples, 0.19%)</title><rect x="167.0" y="755.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="170.0" y="766.0"></text>
</g>
<g>
<title>irq_exit (80 samples, 0.19%)</title><rect x="167.0" y="739.0" width="2.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="170.0" y="750.0"></text>
</g>
<g>
<title>__softirqentry_text_start (80 samples, 0.19%)</title><rect x="167.0" y="723.0" width="2.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="170.0" y="734.0"></text>
</g>
<g>
<title>net_rx_action (69 samples, 0.16%)</title><rect x="167.3" y="707.0" width="1.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="170.3" y="718.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (69 samples, 0.16%)</title><rect x="167.3" y="691.0" width="1.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="170.3" y="702.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (57 samples, 0.14%)</title><rect x="167.5" y="675.0" width="1.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="170.5" y="686.0"></text>
</g>
<g>
<title>ena_refill_rx_bufs	[ena] (11 samples, 0.03%)</title><rect x="167.6" y="659.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="170.6" y="670.0"></text>
</g>
<g>
<title>napi_gro_frags (16 samples, 0.04%)</title><rect x="167.9" y="659.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="170.9" y="670.0"></text>
</g>
<g>
<title>dev_gro_receive (15 samples, 0.04%)</title><rect x="167.9" y="643.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="170.9" y="654.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (15 samples, 0.04%)</title><rect x="167.9" y="627.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="170.9" y="638.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (15 samples, 0.04%)</title><rect x="167.9" y="611.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="170.9" y="622.0"></text>
</g>
<g>
<title>ip_rcv (15 samples, 0.04%)</title><rect x="167.9" y="595.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="170.9" y="606.0"></text>
</g>
<g>
<title>ip_local_deliver (13 samples, 0.03%)</title><rect x="167.9" y="579.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="170.9" y="590.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (13 samples, 0.03%)</title><rect x="167.9" y="563.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="170.9" y="574.0"></text>
</g>
<g>
<title>tcp_v4_rcv (13 samples, 0.03%)</title><rect x="167.9" y="547.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="170.9" y="558.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (12 samples, 0.03%)</title><rect x="168.0" y="531.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="171.0" y="542.0"></text>
</g>
<g>
<title>tcp_rcv_established (12 samples, 0.03%)</title><rect x="168.0" y="515.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="171.0" y="526.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (9 samples, 0.02%)</title><rect x="168.0" y="499.0" width="0.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="171.0" y="510.0"></text>
</g>
<g>
<title>napi_gro_receive (25 samples, 0.06%)</title><rect x="168.4" y="659.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="171.4" y="670.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (25 samples, 0.06%)</title><rect x="168.4" y="643.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="171.4" y="654.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (25 samples, 0.06%)</title><rect x="168.4" y="627.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="171.4" y="638.0"></text>
</g>
<g>
<title>ip_rcv (24 samples, 0.06%)</title><rect x="168.4" y="611.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="171.4" y="622.0"></text>
</g>
<g>
<title>ip_local_deliver (21 samples, 0.05%)</title><rect x="168.4" y="595.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="171.4" y="606.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (21 samples, 0.05%)</title><rect x="168.4" y="579.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="171.4" y="590.0"></text>
</g>
<g>
<title>tcp_v4_rcv (20 samples, 0.05%)</title><rect x="168.4" y="563.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="171.4" y="574.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (17 samples, 0.04%)</title><rect x="168.5" y="547.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="171.5" y="558.0"></text>
</g>
<g>
<title>tcp_rcv_established (17 samples, 0.04%)</title><rect x="168.5" y="531.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="171.5" y="542.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (15 samples, 0.04%)</title><rect x="169.3" y="867.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="172.3" y="878.0"></text>
</g>
<g>
<title>__audit_syscall_exit (13 samples, 0.03%)</title><rect x="169.4" y="851.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="172.4" y="862.0"></text>
</g>
<g>
<title>ret_from_intr (17 samples, 0.04%)</title><rect x="170.0" y="899.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="173.0" y="910.0"></text>
</g>
<g>
<title>do_IRQ (17 samples, 0.04%)</title><rect x="170.0" y="883.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="173.0" y="894.0"></text>
</g>
<g>
<title>irq_exit (17 samples, 0.04%)</title><rect x="170.0" y="867.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="173.0" y="878.0"></text>
</g>
<g>
<title>__softirqentry_text_start (17 samples, 0.04%)</title><rect x="170.0" y="851.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="173.0" y="862.0"></text>
</g>
<g>
<title>net_rx_action (10 samples, 0.02%)</title><rect x="170.1" y="835.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="173.1" y="846.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (10 samples, 0.02%)</title><rect x="170.1" y="819.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="173.1" y="830.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (9 samples, 0.02%)</title><rect x="170.1" y="803.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="173.1" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (11 samples, 0.03%)</title><rect x="170.6" y="915.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="173.6" y="926.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (13 samples, 0.03%)</title><rect x="172.0" y="1091.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="175.0" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/PacketDecoder.onRead (1,318 samples, 3.14%)</title><rect x="172.4" y="1107.0" width="37.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.4" y="1118.0">com..</text>
</g>
<g>
<title>com/hazelcast/internal/nio/PacketIOHelper.readFrom (534 samples, 1.27%)</title><rect x="172.7" y="1091.0" width="15.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="175.7" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (13 samples, 0.03%)</title><rect x="173.0" y="1075.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="176.0" y="1086.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (13 samples, 0.03%)</title><rect x="173.0" y="1059.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="176.0" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (10 samples, 0.02%)</title><rect x="173.0" y="1043.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="176.0" y="1054.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (10 samples, 0.02%)</title><rect x="173.0" y="1027.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="176.0" y="1038.0"></text>
</g>
<g>
<title>JfrTraceEvent&lt;EventAllocObjectInNewTLAB&gt;::writeEvent() (10 samples, 0.02%)</title><rect x="173.0" y="1011.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="176.0" y="1022.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::record(int) (9 samples, 0.02%)</title><rect x="173.0" y="995.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="176.0" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Packet.&lt;init&gt; (38 samples, 0.09%)</title><rect x="173.3" y="1075.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.3" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/PacketIOHelper.readValue (467 samples, 1.11%)</title><rect x="174.4" y="1075.0" width="13.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.4" y="1086.0"></text>
</g>
<g>
<title>async_page_fault (12 samples, 0.03%)</title><rect x="183.7" y="1059.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="186.7" y="1070.0"></text>
</g>
<g>
<title>__do_page_fault (12 samples, 0.03%)</title><rect x="183.7" y="1043.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="186.7" y="1054.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (28 samples, 0.07%)</title><rect x="184.1" y="1059.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="187.1" y="1070.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (16 samples, 0.04%)</title><rect x="184.4" y="1043.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="187.4" y="1054.0"></text>
</g>
<g>
<title>ret_from_intr (92 samples, 0.22%)</title><rect x="184.9" y="1059.0" width="2.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="187.9" y="1070.0"></text>
</g>
<g>
<title>do_IRQ (92 samples, 0.22%)</title><rect x="184.9" y="1043.0" width="2.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="187.9" y="1054.0"></text>
</g>
<g>
<title>irq_exit (92 samples, 0.22%)</title><rect x="184.9" y="1027.0" width="2.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="187.9" y="1038.0"></text>
</g>
<g>
<title>__softirqentry_text_start (92 samples, 0.22%)</title><rect x="184.9" y="1011.0" width="2.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="187.9" y="1022.0"></text>
</g>
<g>
<title>net_rx_action (66 samples, 0.16%)</title><rect x="185.6" y="995.0" width="1.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="188.6" y="1006.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (66 samples, 0.16%)</title><rect x="185.6" y="979.0" width="1.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="188.6" y="990.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (53 samples, 0.13%)</title><rect x="185.8" y="963.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="188.8" y="974.0"></text>
</g>
<g>
<title>napi_gro_frags (23 samples, 0.05%)</title><rect x="186.2" y="947.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="189.2" y="958.0"></text>
</g>
<g>
<title>dev_gro_receive (23 samples, 0.05%)</title><rect x="186.2" y="931.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="189.2" y="942.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (17 samples, 0.04%)</title><rect x="186.4" y="915.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="189.4" y="926.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (17 samples, 0.04%)</title><rect x="186.4" y="899.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="189.4" y="910.0"></text>
</g>
<g>
<title>ip_rcv (15 samples, 0.04%)</title><rect x="186.4" y="883.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="189.4" y="894.0"></text>
</g>
<g>
<title>ip_local_deliver (15 samples, 0.04%)</title><rect x="186.4" y="867.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="189.4" y="878.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (15 samples, 0.04%)</title><rect x="186.4" y="851.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="189.4" y="862.0"></text>
</g>
<g>
<title>tcp_v4_rcv (14 samples, 0.03%)</title><rect x="186.4" y="835.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="189.4" y="846.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (14 samples, 0.03%)</title><rect x="186.4" y="819.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="189.4" y="830.0"></text>
</g>
<g>
<title>tcp_rcv_established (14 samples, 0.03%)</title><rect x="186.4" y="803.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="189.4" y="814.0"></text>
</g>
<g>
<title>napi_gro_receive (11 samples, 0.03%)</title><rect x="186.9" y="947.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="189.9" y="958.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (11 samples, 0.03%)</title><rect x="186.9" y="931.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="189.9" y="942.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (11 samples, 0.03%)</title><rect x="186.9" y="915.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="189.9" y="926.0"></text>
</g>
<g>
<title>ip_rcv (11 samples, 0.03%)</title><rect x="186.9" y="899.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="189.9" y="910.0"></text>
</g>
<g>
<title>ip_local_deliver (11 samples, 0.03%)</title><rect x="186.9" y="883.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="189.9" y="894.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (11 samples, 0.03%)</title><rect x="186.9" y="867.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="189.9" y="878.0"></text>
</g>
<g>
<title>tcp_v4_rcv (11 samples, 0.03%)</title><rect x="186.9" y="851.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="189.9" y="862.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (10 samples, 0.02%)</title><rect x="186.9" y="835.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="189.9" y="846.0"></text>
</g>
<g>
<title>tcp_rcv_established (10 samples, 0.02%)</title><rect x="186.9" y="819.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="189.9" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/PacketDecoder.onPacketComplete (768 samples, 1.83%)</title><rect x="187.7" y="1091.0" width="21.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="190.7" y="1102.0">c..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/PacketDispatcher.accept (755 samples, 1.80%)</title><rect x="188.0" y="1075.0" width="21.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.0" y="1086.0">c..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/PacketDispatcher.accept (755 samples, 1.80%)</title><rect x="188.0" y="1059.0" width="21.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.0" y="1070.0">c..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.accept (745 samples, 1.77%)</title><rect x="188.2" y="1043.0" width="20.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.2" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.accept (745 samples, 1.77%)</title><rect x="188.2" y="1027.0" width="20.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="191.2" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.execute (745 samples, 1.77%)</title><rect x="188.2" y="1011.0" width="20.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="191.2" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationQueueImpl.add (704 samples, 1.68%)</title><rect x="189.1" y="995.0" width="19.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="192.1" y="1006.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.add (701 samples, 1.67%)</title><rect x="189.2" y="979.0" width="19.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="192.2" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/concurrent/MPSCQueue.offer (701 samples, 1.67%)</title><rect x="189.2" y="963.0" width="19.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="192.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.compareAndSet (21 samples, 0.05%)</title><rect x="189.6" y="947.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="192.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (662 samples, 1.58%)</title><rect x="190.2" y="947.0" width="18.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="193.2" y="958.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (662 samples, 1.58%)</title><rect x="190.2" y="931.0" width="18.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="193.2" y="942.0"></text>
</g>
<g>
<title>Unsafe_Unpark (65 samples, 0.15%)</title><rect x="190.3" y="915.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="193.3" y="926.0"></text>
</g>
<g>
<title>pthread_mutex_lock (41 samples, 0.10%)</title><rect x="191.0" y="899.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="194.0" y="910.0"></text>
</g>
<g>
<title>__lll_unlock_wake (10 samples, 0.02%)</title><rect x="192.1" y="915.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="195.1" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 0.02%)</title><rect x="192.1" y="899.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="195.1" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (10 samples, 0.02%)</title><rect x="192.1" y="883.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="195.1" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_signal (574 samples, 1.37%)</title><rect x="192.4" y="915.0" width="16.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="195.4" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (483 samples, 1.15%)</title><rect x="194.4" y="899.0" width="13.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="197.4" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (483 samples, 1.15%)</title><rect x="194.4" y="883.0" width="13.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="197.4" y="894.0"></text>
</g>
<g>
<title>sys_futex (423 samples, 1.01%)</title><rect x="195.7" y="867.0" width="11.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="198.7" y="878.0"></text>
</g>
<g>
<title>do_futex (419 samples, 1.00%)</title><rect x="195.8" y="851.0" width="11.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="198.8" y="862.0"></text>
</g>
<g>
<title>futex_wake (412 samples, 0.98%)</title><rect x="196.0" y="835.0" width="11.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="199.0" y="846.0"></text>
</g>
<g>
<title>_raw_spin_lock (19 samples, 0.05%)</title><rect x="197.0" y="819.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="200.0" y="830.0"></text>
</g>
<g>
<title>get_futex_key (12 samples, 0.03%)</title><rect x="197.5" y="819.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="200.5" y="830.0"></text>
</g>
<g>
<title>mark_wake_futex (62 samples, 0.15%)</title><rect x="197.9" y="819.0" width="1.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="200.9" y="830.0"></text>
</g>
<g>
<title>__unqueue_futex (23 samples, 0.05%)</title><rect x="197.9" y="803.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="200.9" y="814.0"></text>
</g>
<g>
<title>ret_from_intr (9 samples, 0.02%)</title><rect x="198.3" y="787.0" width="0.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="201.3" y="798.0"></text>
</g>
<g>
<title>do_IRQ (9 samples, 0.02%)</title><rect x="198.3" y="771.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="201.3" y="782.0"></text>
</g>
<g>
<title>irq_exit (9 samples, 0.02%)</title><rect x="198.3" y="755.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="201.3" y="766.0"></text>
</g>
<g>
<title>__softirqentry_text_start (9 samples, 0.02%)</title><rect x="198.3" y="739.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="201.3" y="750.0"></text>
</g>
<g>
<title>wake_q_add (39 samples, 0.09%)</title><rect x="198.5" y="803.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="201.5" y="814.0"></text>
</g>
<g>
<title>wake_up_q (275 samples, 0.65%)</title><rect x="199.8" y="819.0" width="7.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="202.8" y="830.0"></text>
</g>
<g>
<title>try_to_wake_up (270 samples, 0.64%)</title><rect x="200.0" y="803.0" width="7.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="203.0" y="814.0"></text>
</g>
<g>
<title>__lock_text_start (270 samples, 0.64%)</title><rect x="200.0" y="787.0" width="7.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="203.0" y="798.0"></text>
</g>
<g>
<title>ret_from_intr (44 samples, 0.10%)</title><rect x="206.3" y="771.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="209.3" y="782.0"></text>
</g>
<g>
<title>do_IRQ (44 samples, 0.10%)</title><rect x="206.3" y="755.0" width="1.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="209.3" y="766.0"></text>
</g>
<g>
<title>irq_exit (44 samples, 0.10%)</title><rect x="206.3" y="739.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="209.3" y="750.0"></text>
</g>
<g>
<title>__softirqentry_text_start (44 samples, 0.10%)</title><rect x="206.3" y="723.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="209.3" y="734.0"></text>
</g>
<g>
<title>net_rx_action (42 samples, 0.10%)</title><rect x="206.4" y="707.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="209.4" y="718.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (42 samples, 0.10%)</title><rect x="206.4" y="691.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="209.4" y="702.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (30 samples, 0.07%)</title><rect x="206.4" y="675.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="209.4" y="686.0"></text>
</g>
<g>
<title>napi_gro_frags (9 samples, 0.02%)</title><rect x="206.6" y="659.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="209.6" y="670.0"></text>
</g>
<g>
<title>dev_gro_receive (9 samples, 0.02%)</title><rect x="206.6" y="643.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="209.6" y="654.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (9 samples, 0.02%)</title><rect x="206.6" y="627.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="209.6" y="638.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (9 samples, 0.02%)</title><rect x="206.6" y="611.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="209.6" y="622.0"></text>
</g>
<g>
<title>ip_rcv (9 samples, 0.02%)</title><rect x="206.6" y="595.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="209.6" y="606.0"></text>
</g>
<g>
<title>ip_local_deliver (9 samples, 0.02%)</title><rect x="206.6" y="579.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="209.6" y="590.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (9 samples, 0.02%)</title><rect x="206.6" y="563.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="209.6" y="574.0"></text>
</g>
<g>
<title>tcp_v4_rcv (9 samples, 0.02%)</title><rect x="206.6" y="547.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="209.6" y="558.0"></text>
</g>
<g>
<title>napi_gro_receive (12 samples, 0.03%)</title><rect x="206.9" y="659.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="209.9" y="670.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (12 samples, 0.03%)</title><rect x="206.9" y="643.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="209.9" y="654.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (12 samples, 0.03%)</title><rect x="206.9" y="627.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="209.9" y="638.0"></text>
</g>
<g>
<title>ip_rcv (12 samples, 0.03%)</title><rect x="206.9" y="611.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="209.9" y="622.0"></text>
</g>
<g>
<title>ip_local_deliver (10 samples, 0.02%)</title><rect x="206.9" y="595.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="209.9" y="606.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (10 samples, 0.02%)</title><rect x="206.9" y="579.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="209.9" y="590.0"></text>
</g>
<g>
<title>tcp_v4_rcv (10 samples, 0.02%)</title><rect x="206.9" y="563.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="209.9" y="574.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (10 samples, 0.02%)</title><rect x="206.9" y="547.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="209.9" y="558.0"></text>
</g>
<g>
<title>tcp_rcv_established (10 samples, 0.02%)</title><rect x="206.9" y="531.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="209.9" y="542.0"></text>
</g>
<g>
<title>napi_complete_done (9 samples, 0.02%)</title><rect x="207.3" y="675.0" width="0.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="210.3" y="686.0"></text>
</g>
<g>
<title>ret_from_intr (19 samples, 0.05%)</title><rect x="208.0" y="899.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="211.0" y="910.0"></text>
</g>
<g>
<title>do_IRQ (19 samples, 0.05%)</title><rect x="208.0" y="883.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="211.0" y="894.0"></text>
</g>
<g>
<title>irq_exit (19 samples, 0.05%)</title><rect x="208.0" y="867.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="211.0" y="878.0"></text>
</g>
<g>
<title>__softirqentry_text_start (19 samples, 0.05%)</title><rect x="208.0" y="851.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="211.0" y="862.0"></text>
</g>
<g>
<title>net_rx_action (9 samples, 0.02%)</title><rect x="208.2" y="835.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="211.2" y="846.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (9 samples, 0.02%)</title><rect x="208.2" y="819.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="211.2" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (10 samples, 0.02%)</title><rect x="209.6" y="1107.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="212.6" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (26 samples, 0.06%)</title><rect x="209.9" y="1107.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="212.9" y="1118.0"></text>
</g>
<g>
<title>gettimeofday (26 samples, 0.06%)</title><rect x="209.9" y="1091.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="212.9" y="1102.0"></text>
</g>
<g>
<title>[vdso] (18 samples, 0.04%)</title><rect x="210.1" y="1075.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="213.1" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3,615 samples, 8.61%)</title><rect x="210.8" y="1107.0" width="101.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.8" y="1118.0">sun/nio/ch/S..</text>
</g>
<g>
<title>com/oracle/jrockit/jfr/DurationEvent.end (23 samples, 0.05%)</title><rect x="211.9" y="1091.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.9" y="1102.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/events/EventHandlerImpl.counterTime (23 samples, 0.05%)</title><rect x="211.9" y="1075.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="214.9" y="1086.0"></text>
</g>
<g>
<title>os::ft_or_os_elapsed_counter() (22 samples, 0.05%)</title><rect x="212.0" y="1059.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="215.0" y="1070.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (32 samples, 0.08%)</title><rect x="212.6" y="1091.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="215.6" y="1102.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (25 samples, 0.06%)</title><rect x="212.8" y="1075.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="215.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (14 samples, 0.03%)</title><rect x="213.0" y="1059.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (13 samples, 0.03%)</title><rect x="213.1" y="1043.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="216.1" y="1054.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (254 samples, 0.60%)</title><rect x="213.6" y="1091.0" width="7.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="216.6" y="1102.0"></text>
</g>
<g>
<title>ret_from_intr (34 samples, 0.08%)</title><rect x="219.8" y="1075.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="222.8" y="1086.0"></text>
</g>
<g>
<title>do_IRQ (34 samples, 0.08%)</title><rect x="219.8" y="1059.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="222.8" y="1070.0"></text>
</g>
<g>
<title>irq_exit (34 samples, 0.08%)</title><rect x="219.8" y="1043.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="222.8" y="1054.0"></text>
</g>
<g>
<title>__softirqentry_text_start (34 samples, 0.08%)</title><rect x="219.8" y="1027.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="222.8" y="1038.0"></text>
</g>
<g>
<title>net_rx_action (23 samples, 0.05%)</title><rect x="220.1" y="1011.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="223.1" y="1022.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (23 samples, 0.05%)</title><rect x="220.1" y="995.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="223.1" y="1006.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (22 samples, 0.05%)</title><rect x="220.1" y="979.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="223.1" y="990.0"></text>
</g>
<g>
<title>napi_gro_frags (9 samples, 0.02%)</title><rect x="220.2" y="963.0" width="0.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="223.2" y="974.0"></text>
</g>
<g>
<title>napi_gro_receive (9 samples, 0.02%)</title><rect x="220.4" y="963.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="223.4" y="974.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (9 samples, 0.02%)</title><rect x="220.4" y="947.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="223.4" y="958.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (9 samples, 0.02%)</title><rect x="220.4" y="931.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="223.4" y="942.0"></text>
</g>
<g>
<title>ip_rcv (9 samples, 0.02%)</title><rect x="220.4" y="915.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="223.4" y="926.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (74 samples, 0.18%)</title><rect x="220.8" y="1091.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="223.8" y="1102.0"></text>
</g>
<g>
<title>ret_from_intr (12 samples, 0.03%)</title><rect x="222.5" y="1075.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="225.5" y="1086.0"></text>
</g>
<g>
<title>do_IRQ (12 samples, 0.03%)</title><rect x="222.5" y="1059.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="225.5" y="1070.0"></text>
</g>
<g>
<title>irq_exit (12 samples, 0.03%)</title><rect x="222.5" y="1043.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="225.5" y="1054.0"></text>
</g>
<g>
<title>__softirqentry_text_start (12 samples, 0.03%)</title><rect x="222.5" y="1027.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="225.5" y="1038.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (22 samples, 0.05%)</title><rect x="222.9" y="1091.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="225.9" y="1102.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (141 samples, 0.34%)</title><rect x="223.5" y="1091.0" width="4.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="226.5" y="1102.0"></text>
</g>
<g>
<title>ret_from_intr (21 samples, 0.05%)</title><rect x="226.9" y="1075.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="229.9" y="1086.0"></text>
</g>
<g>
<title>do_IRQ (21 samples, 0.05%)</title><rect x="226.9" y="1059.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="229.9" y="1070.0"></text>
</g>
<g>
<title>irq_exit (21 samples, 0.05%)</title><rect x="226.9" y="1043.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="229.9" y="1054.0"></text>
</g>
<g>
<title>__softirqentry_text_start (21 samples, 0.05%)</title><rect x="226.9" y="1027.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="229.9" y="1038.0"></text>
</g>
<g>
<title>net_rx_action (10 samples, 0.02%)</title><rect x="227.1" y="1011.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="230.1" y="1022.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (10 samples, 0.02%)</title><rect x="227.1" y="995.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="230.1" y="1006.0"></text>
</g>
<g>
<title>ret_from_intr (9 samples, 0.02%)</title><rect x="227.5" y="1091.0" width="0.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="230.5" y="1102.0"></text>
</g>
<g>
<title>do_IRQ (9 samples, 0.02%)</title><rect x="227.5" y="1075.0" width="0.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="230.5" y="1086.0"></text>
</g>
<g>
<title>irq_exit (9 samples, 0.02%)</title><rect x="227.5" y="1059.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="230.5" y="1070.0"></text>
</g>
<g>
<title>__softirqentry_text_start (9 samples, 0.02%)</title><rect x="227.5" y="1043.0" width="0.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="230.5" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2,968 samples, 7.07%)</title><rect x="227.8" y="1091.0" width="83.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.8" y="1102.0">sun/nio/c..</text>
</g>
<g>
<title>java/nio/Buffer.remaining (46 samples, 0.11%)</title><rect x="228.2" y="1075.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (121 samples, 0.29%)</title><rect x="229.5" y="1075.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="232.5" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (99 samples, 0.24%)</title><rect x="230.1" y="1059.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="233.1" y="1070.0"></text>
</g>
<g>
<title>java/nio/Bits.copyToArray (13 samples, 0.03%)</title><rect x="231.3" y="1043.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="234.3" y="1054.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (24 samples, 0.06%)</title><rect x="231.8" y="1043.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.8" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2,595 samples, 6.18%)</title><rect x="232.9" y="1075.0" width="72.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="235.9" y="1086.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (2,588 samples, 6.16%)</title><rect x="233.1" y="1059.0" width="72.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.1" y="1070.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (2,586 samples, 6.16%)</title><rect x="233.2" y="1043.0" width="72.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="236.2" y="1054.0">sun/nio/..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (10 samples, 0.02%)</title><rect x="233.6" y="1027.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="236.6" y="1038.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (12 samples, 0.03%)</title><rect x="233.9" y="1027.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="236.9" y="1038.0"></text>
</g>
<g>
<title>read (2,537 samples, 6.04%)</title><rect x="234.5" y="1027.0" width="71.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="237.5" y="1038.0">read</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2,445 samples, 5.82%)</title><rect x="236.8" y="1011.0" width="68.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="239.8" y="1022.0">entry_S..</text>
</g>
<g>
<title>do_syscall_64 (2,445 samples, 5.82%)</title><rect x="236.8" y="995.0" width="68.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="239.8" y="1006.0">do_sysc..</text>
</g>
<g>
<title>sys_read (2,329 samples, 5.55%)</title><rect x="239.2" y="979.0" width="65.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="242.2" y="990.0">sys_read</text>
</g>
<g>
<title>__fdget_pos (49 samples, 0.12%)</title><rect x="239.3" y="963.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="242.3" y="974.0"></text>
</g>
<g>
<title>__fget_light (47 samples, 0.11%)</title><rect x="239.4" y="947.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="242.4" y="958.0"></text>
</g>
<g>
<title>__fget (37 samples, 0.09%)</title><rect x="239.7" y="931.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="242.7" y="942.0"></text>
</g>
<g>
<title>fput (32 samples, 0.08%)</title><rect x="240.7" y="963.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="243.7" y="974.0"></text>
</g>
<g>
<title>vfs_read (2,243 samples, 5.34%)</title><rect x="241.6" y="963.0" width="63.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="244.6" y="974.0">vfs_read</text>
</g>
<g>
<title>__vfs_read (2,201 samples, 5.24%)</title><rect x="242.2" y="947.0" width="61.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="245.2" y="958.0">__vfs_..</text>
</g>
<g>
<title>sock_read_iter (2,182 samples, 5.20%)</title><rect x="242.8" y="931.0" width="61.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="245.8" y="942.0">sock_r..</text>
</g>
<g>
<title>inet_recvmsg (2,168 samples, 5.16%)</title><rect x="243.0" y="915.0" width="60.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="246.0" y="926.0">inet_r..</text>
</g>
<g>
<title>tcp_recvmsg (2,155 samples, 5.13%)</title><rect x="243.3" y="899.0" width="60.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="246.3" y="910.0">tcp_re..</text>
</g>
<g>
<title>__kfree_skb (390 samples, 0.93%)</title><rect x="245.0" y="883.0" width="10.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="248.0" y="894.0"></text>
</g>
<g>
<title>page_frag_free (48 samples, 0.11%)</title><rect x="245.1" y="867.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="248.1" y="878.0"></text>
</g>
<g>
<title>skb_release_all (49 samples, 0.12%)</title><rect x="246.5" y="867.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="249.5" y="878.0"></text>
</g>
<g>
<title>skb_release_head_state (48 samples, 0.11%)</title><rect x="246.5" y="851.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="249.5" y="862.0"></text>
</g>
<g>
<title>sock_rfree (40 samples, 0.10%)</title><rect x="246.7" y="835.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="249.7" y="846.0"></text>
</g>
<g>
<title>skb_release_data (287 samples, 0.68%)</title><rect x="247.9" y="867.0" width="8.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="250.9" y="878.0"></text>
</g>
<g>
<title>__put_page (17 samples, 0.04%)</title><rect x="250.4" y="851.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="253.4" y="862.0"></text>
</g>
<g>
<title>free_hot_cold_page (168 samples, 0.40%)</title><rect x="250.9" y="851.0" width="4.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="253.9" y="862.0"></text>
</g>
<g>
<title>ret_from_intr (14 samples, 0.03%)</title><rect x="255.2" y="835.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="258.2" y="846.0"></text>
</g>
<g>
<title>do_IRQ (14 samples, 0.03%)</title><rect x="255.2" y="819.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="258.2" y="830.0"></text>
</g>
<g>
<title>irq_exit (14 samples, 0.03%)</title><rect x="255.2" y="803.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="258.2" y="814.0"></text>
</g>
<g>
<title>__softirqentry_text_start (14 samples, 0.03%)</title><rect x="255.2" y="787.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="258.2" y="798.0"></text>
</g>
<g>
<title>net_rx_action (11 samples, 0.03%)</title><rect x="255.2" y="771.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="258.2" y="782.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (9 samples, 0.02%)</title><rect x="255.3" y="755.0" width="0.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="258.3" y="766.0"></text>
</g>
<g>
<title>ret_from_intr (12 samples, 0.03%)</title><rect x="255.6" y="851.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="258.6" y="862.0"></text>
</g>
<g>
<title>do_IRQ (12 samples, 0.03%)</title><rect x="255.6" y="835.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="258.6" y="846.0"></text>
</g>
<g>
<title>irq_exit (12 samples, 0.03%)</title><rect x="255.6" y="819.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="258.6" y="830.0"></text>
</g>
<g>
<title>__softirqentry_text_start (12 samples, 0.03%)</title><rect x="255.6" y="803.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="258.6" y="814.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (21 samples, 0.05%)</title><rect x="255.9" y="883.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="258.9" y="894.0"></text>
</g>
<g>
<title>do_softirq.part.17 (17 samples, 0.04%)</title><rect x="256.0" y="867.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="259.0" y="878.0"></text>
</g>
<g>
<title>do_softirq_own_stack (17 samples, 0.04%)</title><rect x="256.0" y="851.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="259.0" y="862.0"></text>
</g>
<g>
<title>__softirqentry_text_start (17 samples, 0.04%)</title><rect x="256.0" y="835.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="259.0" y="846.0"></text>
</g>
<g>
<title>net_rx_action (15 samples, 0.04%)</title><rect x="256.0" y="819.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="259.0" y="830.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (15 samples, 0.04%)</title><rect x="256.0" y="803.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="259.0" y="814.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (12 samples, 0.03%)</title><rect x="256.1" y="787.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="259.1" y="798.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (51 samples, 0.12%)</title><rect x="256.7" y="883.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="259.7" y="894.0"></text>
</g>
<g>
<title>ip_output (37 samples, 0.09%)</title><rect x="256.8" y="867.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="259.8" y="878.0"></text>
</g>
<g>
<title>ip_finish_output2 (36 samples, 0.09%)</title><rect x="256.8" y="851.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="259.8" y="862.0"></text>
</g>
<g>
<title>__dev_queue_xmit (30 samples, 0.07%)</title><rect x="256.9" y="835.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="259.9" y="846.0"></text>
</g>
<g>
<title>sch_direct_xmit (24 samples, 0.06%)</title><rect x="257.1" y="819.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="260.1" y="830.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (20 samples, 0.05%)</title><rect x="257.2" y="803.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="260.2" y="814.0"></text>
</g>
<g>
<title>ena_start_xmit	[ena] (17 samples, 0.04%)</title><rect x="257.3" y="787.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="260.3" y="798.0"></text>
</g>
<g>
<title>kmem_cache_free (35 samples, 0.08%)</title><rect x="258.2" y="883.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="261.2" y="894.0"></text>
</g>
<g>
<title>__slab_free (26 samples, 0.06%)</title><rect x="258.3" y="867.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="261.3" y="878.0"></text>
</g>
<g>
<title>cmpxchg_double_slab.isra.61 (14 samples, 0.03%)</title><rect x="258.6" y="851.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="261.6" y="862.0"></text>
</g>
<g>
<title>lock_sock_nested (146 samples, 0.35%)</title><rect x="259.1" y="883.0" width="4.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="262.1" y="894.0"></text>
</g>
<g>
<title>__lock_sock (86 samples, 0.20%)</title><rect x="259.2" y="867.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="262.2" y="878.0"></text>
</g>
<g>
<title>schedule (75 samples, 0.18%)</title><rect x="259.5" y="851.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="262.5" y="862.0"></text>
</g>
<g>
<title>__sched_text_start (75 samples, 0.18%)</title><rect x="259.5" y="835.0" width="2.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="262.5" y="846.0"></text>
</g>
<g>
<title>finish_task_switch (75 samples, 0.18%)</title><rect x="259.5" y="819.0" width="2.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="262.5" y="830.0"></text>
</g>
<g>
<title>ret_from_intr (21 samples, 0.05%)</title><rect x="261.0" y="803.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="264.0" y="814.0"></text>
</g>
<g>
<title>do_IRQ (21 samples, 0.05%)</title><rect x="261.0" y="787.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="264.0" y="798.0"></text>
</g>
<g>
<title>irq_exit (21 samples, 0.05%)</title><rect x="261.0" y="771.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="264.0" y="782.0"></text>
</g>
<g>
<title>__softirqentry_text_start (21 samples, 0.05%)</title><rect x="261.0" y="755.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="264.0" y="766.0"></text>
</g>
<g>
<title>net_rx_action (15 samples, 0.04%)</title><rect x="261.1" y="739.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="264.1" y="750.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (15 samples, 0.04%)</title><rect x="261.1" y="723.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="264.1" y="734.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (13 samples, 0.03%)</title><rect x="261.2" y="707.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="264.2" y="718.0"></text>
</g>
<g>
<title>napi_gro_frags (9 samples, 0.02%)</title><rect x="261.2" y="691.0" width="0.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="264.2" y="702.0"></text>
</g>
<g>
<title>dev_gro_receive (9 samples, 0.02%)</title><rect x="261.2" y="675.0" width="0.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="264.2" y="686.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (59 samples, 0.14%)</title><rect x="261.6" y="867.0" width="1.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="264.6" y="878.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (28 samples, 0.07%)</title><rect x="262.4" y="851.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="265.4" y="862.0"></text>
</g>
<g>
<title>release_sock (209 samples, 0.50%)</title><rect x="263.2" y="883.0" width="5.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="266.2" y="894.0"></text>
</g>
<g>
<title>__release_sock (100 samples, 0.24%)</title><rect x="263.3" y="867.0" width="2.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="266.3" y="878.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (100 samples, 0.24%)</title><rect x="263.3" y="851.0" width="2.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="266.3" y="862.0"></text>
</g>
<g>
<title>tcp_rcv_established (100 samples, 0.24%)</title><rect x="263.3" y="835.0" width="2.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="266.3" y="846.0"></text>
</g>
<g>
<title>__kfree_skb (9 samples, 0.02%)</title><rect x="263.4" y="819.0" width="0.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="266.4" y="830.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (14 samples, 0.03%)</title><rect x="263.7" y="819.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="266.7" y="830.0"></text>
</g>
<g>
<title>tcp_write_xmit (14 samples, 0.03%)</title><rect x="263.7" y="803.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="266.7" y="814.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (13 samples, 0.03%)</title><rect x="263.7" y="787.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="266.7" y="798.0"></text>
</g>
<g>
<title>ip_output (11 samples, 0.03%)</title><rect x="263.7" y="771.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="266.7" y="782.0"></text>
</g>
<g>
<title>ip_finish_output2 (11 samples, 0.03%)</title><rect x="263.7" y="755.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="266.7" y="766.0"></text>
</g>
<g>
<title>__dev_queue_xmit (10 samples, 0.02%)</title><rect x="263.7" y="739.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="266.7" y="750.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (27 samples, 0.06%)</title><rect x="264.2" y="819.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="267.2" y="830.0"></text>
</g>
<g>
<title>ip_output (20 samples, 0.05%)</title><rect x="264.3" y="803.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="267.3" y="814.0"></text>
</g>
<g>
<title>ip_finish_output2 (19 samples, 0.05%)</title><rect x="264.3" y="787.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="267.3" y="798.0"></text>
</g>
<g>
<title>__dev_queue_xmit (18 samples, 0.04%)</title><rect x="264.3" y="771.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="267.3" y="782.0"></text>
</g>
<g>
<title>sch_direct_xmit (15 samples, 0.04%)</title><rect x="264.4" y="755.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="267.4" y="766.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (9 samples, 0.02%)</title><rect x="264.5" y="739.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="267.5" y="750.0"></text>
</g>
<g>
<title>tcp_ack (25 samples, 0.06%)</title><rect x="265.2" y="819.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="268.2" y="830.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (19 samples, 0.05%)</title><rect x="265.3" y="803.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="268.3" y="814.0"></text>
</g>
<g>
<title>__kfree_skb (11 samples, 0.03%)</title><rect x="265.5" y="787.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="268.5" y="798.0"></text>
</g>
<g>
<title>__wake_up_common_lock (43 samples, 0.10%)</title><rect x="266.1" y="867.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="269.1" y="878.0"></text>
</g>
<g>
<title>__lock_text_start (43 samples, 0.10%)</title><rect x="266.1" y="851.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="269.1" y="862.0"></text>
</g>
<g>
<title>tcp_release_cb (56 samples, 0.13%)</title><rect x="267.5" y="867.0" width="1.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="270.5" y="878.0"></text>
</g>
<g>
<title>tcp_write_xmit (45 samples, 0.11%)</title><rect x="267.8" y="851.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="270.8" y="862.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (39 samples, 0.09%)</title><rect x="267.8" y="835.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="270.8" y="846.0"></text>
</g>
<g>
<title>ip_output (33 samples, 0.08%)</title><rect x="267.9" y="819.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="270.9" y="830.0"></text>
</g>
<g>
<title>ip_finish_output2 (33 samples, 0.08%)</title><rect x="267.9" y="803.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="270.9" y="814.0"></text>
</g>
<g>
<title>__dev_queue_xmit (31 samples, 0.07%)</title><rect x="268.0" y="787.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="271.0" y="798.0"></text>
</g>
<g>
<title>sch_direct_xmit (22 samples, 0.05%)</title><rect x="268.2" y="771.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="271.2" y="782.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (11 samples, 0.03%)</title><rect x="268.3" y="755.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="271.3" y="766.0"></text>
</g>
<g>
<title>validate_xmit_skb_list (10 samples, 0.02%)</title><rect x="268.6" y="755.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="271.6" y="766.0"></text>
</g>
<g>
<title>validate_xmit_skb (10 samples, 0.02%)</title><rect x="268.6" y="739.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="271.6" y="750.0"></text>
</g>
<g>
<title>__skb_gso_segment (10 samples, 0.02%)</title><rect x="268.6" y="723.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="271.6" y="734.0"></text>
</g>
<g>
<title>skb_mac_gso_segment (10 samples, 0.02%)</title><rect x="268.6" y="707.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="271.6" y="718.0"></text>
</g>
<g>
<title>inet_gso_segment (10 samples, 0.02%)</title><rect x="268.6" y="691.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="271.6" y="702.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (1,160 samples, 2.76%)</title><rect x="269.3" y="883.0" width="32.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="272.3" y="894.0">sk..</text>
</g>
<g>
<title>_copy_to_iter (21 samples, 0.05%)</title><rect x="271.0" y="867.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="274.0" y="878.0"></text>
</g>
<g>
<title>copyout (17 samples, 0.04%)</title><rect x="271.0" y="851.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="274.0" y="862.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (11 samples, 0.03%)</title><rect x="271.2" y="835.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="274.2" y="846.0"></text>
</g>
<g>
<title>copy_page_to_iter (1,073 samples, 2.56%)</title><rect x="271.6" y="867.0" width="30.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="274.6" y="878.0">co..</text>
</g>
<g>
<title>copyout (948 samples, 2.26%)</title><rect x="274.5" y="851.0" width="26.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="277.5" y="862.0">c..</text>
</g>
<g>
<title>copy_user_enhanced_fast_string (938 samples, 2.23%)</title><rect x="274.7" y="835.0" width="26.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="277.7" y="846.0">c..</text>
</g>
<g>
<title>ret_from_intr (127 samples, 0.30%)</title><rect x="297.5" y="819.0" width="3.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="300.5" y="830.0"></text>
</g>
<g>
<title>do_IRQ (127 samples, 0.30%)</title><rect x="297.5" y="803.0" width="3.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="300.5" y="814.0"></text>
</g>
<g>
<title>irq_exit (127 samples, 0.30%)</title><rect x="297.5" y="787.0" width="3.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="300.5" y="798.0"></text>
</g>
<g>
<title>__softirqentry_text_start (127 samples, 0.30%)</title><rect x="297.5" y="771.0" width="3.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="300.5" y="782.0"></text>
</g>
<g>
<title>net_rx_action (85 samples, 0.20%)</title><rect x="298.6" y="755.0" width="2.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="301.6" y="766.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (84 samples, 0.20%)</title><rect x="298.6" y="739.0" width="2.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="301.6" y="750.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (66 samples, 0.16%)</title><rect x="299.0" y="723.0" width="1.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="302.0" y="734.0"></text>
</g>
<g>
<title>napi_gro_frags (23 samples, 0.05%)</title><rect x="299.3" y="707.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="302.3" y="718.0"></text>
</g>
<g>
<title>dev_gro_receive (20 samples, 0.05%)</title><rect x="299.3" y="691.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="302.3" y="702.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (19 samples, 0.05%)</title><rect x="299.4" y="675.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="302.4" y="686.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (19 samples, 0.05%)</title><rect x="299.4" y="659.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="302.4" y="670.0"></text>
</g>
<g>
<title>ip_rcv (17 samples, 0.04%)</title><rect x="299.4" y="643.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="302.4" y="654.0"></text>
</g>
<g>
<title>ip_local_deliver (16 samples, 0.04%)</title><rect x="299.4" y="627.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="302.4" y="638.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (16 samples, 0.04%)</title><rect x="299.4" y="611.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="302.4" y="622.0"></text>
</g>
<g>
<title>tcp_v4_rcv (16 samples, 0.04%)</title><rect x="299.4" y="595.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="302.4" y="606.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (14 samples, 0.03%)</title><rect x="299.4" y="579.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="302.4" y="590.0"></text>
</g>
<g>
<title>tcp_rcv_established (14 samples, 0.03%)</title><rect x="299.4" y="563.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="302.4" y="574.0"></text>
</g>
<g>
<title>napi_gro_receive (25 samples, 0.06%)</title><rect x="300.0" y="707.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="303.0" y="718.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (24 samples, 0.06%)</title><rect x="300.0" y="691.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="303.0" y="702.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (24 samples, 0.06%)</title><rect x="300.0" y="675.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="303.0" y="686.0"></text>
</g>
<g>
<title>ip_rcv (21 samples, 0.05%)</title><rect x="300.0" y="659.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="303.0" y="670.0"></text>
</g>
<g>
<title>ip_local_deliver (18 samples, 0.04%)</title><rect x="300.1" y="643.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="303.1" y="654.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (17 samples, 0.04%)</title><rect x="300.1" y="627.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="303.1" y="638.0"></text>
</g>
<g>
<title>tcp_v4_rcv (16 samples, 0.04%)</title><rect x="300.1" y="611.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="303.1" y="622.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (14 samples, 0.03%)</title><rect x="300.2" y="595.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="303.2" y="606.0"></text>
</g>
<g>
<title>tcp_rcv_established (14 samples, 0.03%)</title><rect x="300.2" y="579.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="303.2" y="590.0"></text>
</g>
<g>
<title>ret_from_intr (20 samples, 0.05%)</title><rect x="301.1" y="851.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="304.1" y="862.0"></text>
</g>
<g>
<title>do_IRQ (20 samples, 0.05%)</title><rect x="301.1" y="835.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="304.1" y="846.0"></text>
</g>
<g>
<title>irq_exit (20 samples, 0.05%)</title><rect x="301.1" y="819.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="304.1" y="830.0"></text>
</g>
<g>
<title>__softirqentry_text_start (20 samples, 0.05%)</title><rect x="301.1" y="803.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="304.1" y="814.0"></text>
</g>
<g>
<title>net_rx_action (17 samples, 0.04%)</title><rect x="301.2" y="787.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="304.2" y="798.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (17 samples, 0.04%)</title><rect x="301.2" y="771.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="304.2" y="782.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (13 samples, 0.03%)</title><rect x="301.3" y="755.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="304.3" y="766.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (17 samples, 0.04%)</title><rect x="301.9" y="883.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="304.9" y="894.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (55 samples, 0.13%)</title><rect x="302.4" y="883.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="305.4" y="894.0"></text>
</g>
<g>
<title>sched_clock_cpu (46 samples, 0.11%)</title><rect x="302.6" y="867.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="305.6" y="878.0"></text>
</g>
<g>
<title>sched_clock (45 samples, 0.11%)</title><rect x="302.6" y="851.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="305.6" y="862.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (45 samples, 0.11%)</title><rect x="302.6" y="835.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="305.6" y="846.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (43 samples, 0.10%)</title><rect x="302.7" y="819.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="305.7" y="830.0"></text>
</g>
<g>
<title>fsnotify (11 samples, 0.03%)</title><rect x="304.1" y="947.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="307.1" y="958.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (18 samples, 0.04%)</title><rect x="304.7" y="979.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="307.7" y="990.0"></text>
</g>
<g>
<title>__audit_syscall_exit (14 samples, 0.03%)</title><rect x="304.7" y="963.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="307.7" y="974.0"></text>
</g>
<g>
<title>syscall_trace_enter (12 samples, 0.03%)</title><rect x="305.2" y="979.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="308.2" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (58 samples, 0.14%)</title><rect x="305.8" y="1075.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (32 samples, 0.08%)</title><rect x="306.1" y="1059.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="309.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (30 samples, 0.07%)</title><rect x="306.2" y="1043.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="309.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (30 samples, 0.07%)</title><rect x="306.2" y="1027.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.2" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (13 samples, 0.03%)</title><rect x="307.1" y="1059.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.1" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (134 samples, 0.32%)</title><rect x="307.5" y="1075.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="310.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (92 samples, 0.22%)</title><rect x="307.5" y="1059.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (49 samples, 0.12%)</title><rect x="308.0" y="1043.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (49 samples, 0.12%)</title><rect x="308.0" y="1027.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.0" y="1038.0"></text>
</g>
<g>
<title>ret_from_intr (9 samples, 0.02%)</title><rect x="309.2" y="1011.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="312.2" y="1022.0"></text>
</g>
<g>
<title>do_IRQ (9 samples, 0.02%)</title><rect x="309.2" y="995.0" width="0.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="312.2" y="1006.0"></text>
</g>
<g>
<title>irq_exit (9 samples, 0.02%)</title><rect x="309.2" y="979.0" width="0.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="312.2" y="990.0"></text>
</g>
<g>
<title>__softirqentry_text_start (9 samples, 0.02%)</title><rect x="309.2" y="963.0" width="0.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="312.2" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (25 samples, 0.06%)</title><rect x="309.4" y="1043.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="312.4" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.isBufferTooLarge (39 samples, 0.09%)</title><rect x="310.1" y="1059.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="313.1" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.isBufferTooLarge (36 samples, 0.09%)</title><rect x="310.2" y="1043.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="313.2" y="1054.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*) (15 samples, 0.04%)</title><rect x="310.5" y="1027.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="313.5" y="1038.0"></text>
</g>
<g>
<title>__GI___pthread_getspecific (9 samples, 0.02%)</title><rect x="311.0" y="1027.0" width="0.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="314.0" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (21 samples, 0.05%)</title><rect x="311.2" y="1091.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="314.2" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureReadOpen (19 samples, 0.05%)</title><rect x="311.8" y="1091.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="314.8" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.isConnected (11 samples, 0.03%)</title><rect x="312.0" y="1075.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.0" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.process (5,153 samples, 12.27%)</title><rect x="312.4" y="1123.0" width="144.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="315.4" y="1134.0">com/hazelcast/inte..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/util/ClientMessageEncoder.onWrite (274 samples, 0.65%)</title><rect x="313.1" y="1107.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="316.1" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessageWriter.writeTo (67 samples, 0.16%)</title><rect x="313.6" y="1091.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="316.6" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessageWriter.writeFrame (64 samples, 0.15%)</title><rect x="313.7" y="1075.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="316.7" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.writeIntL (9 samples, 0.02%)</title><rect x="314.8" y="1059.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="317.8" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.get (182 samples, 0.43%)</title><rect x="315.5" y="1091.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="318.5" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.get (182 samples, 0.43%)</title><rect x="315.5" y="1075.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="318.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (162 samples, 0.39%)</title><rect x="316.0" y="1059.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="319.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.casItem (141 samples, 0.34%)</title><rect x="316.5" y="1043.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.5" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.flushToSocket (4,572 samples, 10.89%)</title><rect x="320.8" y="1107.0" width="128.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="323.8" y="1118.0">com/hazelcast/in..</text>
</g>
<g>
<title>os::javaTimeMillis() (12 samples, 0.03%)</title><rect x="321.8" y="1091.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="324.8" y="1102.0"></text>
</g>
<g>
<title>gettimeofday (11 samples, 0.03%)</title><rect x="321.8" y="1075.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="324.8" y="1086.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.02%)</title><rect x="321.8" y="1059.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="324.8" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (4,526 samples, 10.78%)</title><rect x="322.1" y="1091.0" width="127.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.1" y="1102.0">sun/nio/ch/Socke..</text>
</g>
<g>
<title>com/oracle/jrockit/jfr/DurationEvent.begin (42 samples, 0.10%)</title><rect x="324.0" y="1075.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="327.0" y="1086.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*) (12 samples, 0.03%)</title><rect x="324.6" y="1059.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="327.6" y="1070.0"></text>
</g>
<g>
<title>com/oracle/jrockit/jfr/DurationEvent.end (22 samples, 0.05%)</title><rect x="325.1" y="1075.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="328.1" y="1086.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/events/EventHandlerImpl.counterTime (20 samples, 0.05%)</title><rect x="325.2" y="1059.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.2" y="1070.0"></text>
</g>
<g>
<title>os::ft_or_os_elapsed_counter() (19 samples, 0.05%)</title><rect x="325.2" y="1043.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="328.2" y="1054.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (41 samples, 0.10%)</title><rect x="325.8" y="1075.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="328.8" y="1086.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (26 samples, 0.06%)</title><rect x="326.2" y="1059.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="329.2" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (11 samples, 0.03%)</title><rect x="326.3" y="1043.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="329.3" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (11 samples, 0.03%)</title><rect x="326.3" y="1027.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="329.3" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (11 samples, 0.03%)</title><rect x="326.3" y="1011.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="329.3" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (11 samples, 0.03%)</title><rect x="326.3" y="995.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="329.3" y="1006.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (11 samples, 0.03%)</title><rect x="326.3" y="979.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="329.3" y="990.0"></text>
</g>
<g>
<title>JfrTraceEvent&lt;EventAllocObjectInNewTLAB&gt;::writeEvent() (11 samples, 0.03%)</title><rect x="326.3" y="963.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="329.3" y="974.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::record(int) (11 samples, 0.03%)</title><rect x="326.3" y="947.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="329.3" y="958.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (12 samples, 0.03%)</title><rect x="326.6" y="1043.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="329.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (12 samples, 0.03%)</title><rect x="326.6" y="1027.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="329.6" y="1038.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (9 samples, 0.02%)</title><rect x="327.0" y="1075.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.0" y="1086.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (90 samples, 0.21%)</title><rect x="327.2" y="1075.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="330.2" y="1086.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (11 samples, 0.03%)</title><rect x="329.8" y="1075.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="332.8" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (38 samples, 0.09%)</title><rect x="330.3" y="1075.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="333.3" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (4,115 samples, 9.80%)</title><rect x="331.4" y="1075.0" width="115.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="334.4" y="1086.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>java/nio/Buffer.position (13 samples, 0.03%)</title><rect x="332.2" y="1059.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="335.2" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (143 samples, 0.34%)</title><rect x="332.6" y="1059.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="335.6" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (133 samples, 0.32%)</title><rect x="332.9" y="1043.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="335.9" y="1054.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (130 samples, 0.31%)</title><rect x="333.0" y="1027.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="336.0" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (71 samples, 0.17%)</title><rect x="333.0" y="1011.0" width="1.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="336.0" y="1022.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (10 samples, 0.02%)</title><rect x="335.1" y="1011.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="338.1" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (35 samples, 0.08%)</title><rect x="335.5" y="1011.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="338.5" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (3,833 samples, 9.13%)</title><rect x="336.6" y="1059.0" width="107.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="339.6" y="1070.0">sun/nio/ch/IO..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.address (16 samples, 0.04%)</title><rect x="337.8" y="1043.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="340.8" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (3,775 samples, 8.99%)</title><rect x="338.3" y="1043.0" width="106.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="341.3" y="1054.0">sun/nio/ch/So..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (3,775 samples, 8.99%)</title><rect x="338.3" y="1027.0" width="106.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="341.3" y="1038.0">sun/nio/ch/Fi..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (15 samples, 0.04%)</title><rect x="339.0" y="1011.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="342.0" y="1022.0"></text>
</g>
<g>
<title>write (3,723 samples, 8.87%)</title><rect x="339.7" y="1011.0" width="104.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="342.7" y="1022.0">write</text>
</g>
<g>
<title>__indirect_thunk_start (13 samples, 0.03%)</title><rect x="341.9" y="995.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="344.9" y="1006.0"></text>
</g>
<g>
<title>cleanup_module	[dm_mirror] (23 samples, 0.05%)</title><rect x="342.6" y="995.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="345.6" y="1006.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3,592 samples, 8.55%)</title><rect x="343.3" y="995.0" width="100.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="346.3" y="1006.0">entry_SYSCAL..</text>
</g>
<g>
<title>do_syscall_64 (3,592 samples, 8.55%)</title><rect x="343.3" y="979.0" width="100.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="346.3" y="990.0">do_syscall_64</text>
</g>
<g>
<title>sys_write (3,446 samples, 8.21%)</title><rect x="346.5" y="963.0" width="96.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="349.5" y="974.0">sys_write</text>
</g>
<g>
<title>__fdget_pos (45 samples, 0.11%)</title><rect x="346.7" y="947.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="349.7" y="958.0"></text>
</g>
<g>
<title>__fget_light (42 samples, 0.10%)</title><rect x="346.7" y="931.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="349.7" y="942.0"></text>
</g>
<g>
<title>__fget (32 samples, 0.08%)</title><rect x="347.0" y="915.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="350.0" y="926.0"></text>
</g>
<g>
<title>fput (25 samples, 0.06%)</title><rect x="347.9" y="947.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="350.9" y="958.0"></text>
</g>
<g>
<title>vfs_write (3,370 samples, 8.03%)</title><rect x="348.6" y="947.0" width="94.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="351.6" y="958.0">vfs_write</text>
</g>
<g>
<title>__vfs_write (3,333 samples, 7.94%)</title><rect x="349.3" y="931.0" width="93.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="352.3" y="942.0">__vfs_write</text>
</g>
<g>
<title>sock_write_iter (3,322 samples, 7.91%)</title><rect x="349.6" y="915.0" width="93.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="352.6" y="926.0">sock_write_..</text>
</g>
<g>
<title>sock_sendmsg (3,313 samples, 7.89%)</title><rect x="349.8" y="899.0" width="93.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="352.8" y="910.0">sock_sendmsg</text>
</g>
<g>
<title>inet_sendmsg (18 samples, 0.04%)</title><rect x="350.0" y="883.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="353.0" y="894.0"></text>
</g>
<g>
<title>tcp_sendmsg (3,280 samples, 7.81%)</title><rect x="350.8" y="883.0" width="92.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="353.8" y="894.0">tcp_sendmsg</text>
</g>
<g>
<title>__local_bh_enable_ip (13 samples, 0.03%)</title><rect x="351.0" y="867.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="354.0" y="878.0"></text>
</g>
<g>
<title>lock_sock_nested (141 samples, 0.34%)</title><rect x="351.4" y="867.0" width="4.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="354.4" y="878.0"></text>
</g>
<g>
<title>__lock_sock (32 samples, 0.08%)</title><rect x="351.4" y="851.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="354.4" y="862.0"></text>
</g>
<g>
<title>schedule (29 samples, 0.07%)</title><rect x="351.5" y="835.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="354.5" y="846.0"></text>
</g>
<g>
<title>__sched_text_start (29 samples, 0.07%)</title><rect x="351.5" y="819.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="354.5" y="830.0"></text>
</g>
<g>
<title>finish_task_switch (29 samples, 0.07%)</title><rect x="351.5" y="803.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="354.5" y="814.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (108 samples, 0.26%)</title><rect x="352.3" y="851.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="355.3" y="862.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (68 samples, 0.16%)</title><rect x="353.5" y="835.0" width="1.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="356.5" y="846.0"></text>
</g>
<g>
<title>release_sock (307 samples, 0.73%)</title><rect x="355.4" y="867.0" width="8.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="358.4" y="878.0"></text>
</g>
<g>
<title>__release_sock (206 samples, 0.49%)</title><rect x="355.5" y="851.0" width="5.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="358.5" y="862.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (197 samples, 0.47%)</title><rect x="355.7" y="835.0" width="5.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="358.7" y="846.0"></text>
</g>
<g>
<title>tcp_rcv_established (192 samples, 0.46%)</title><rect x="355.9" y="819.0" width="5.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="358.9" y="830.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (32 samples, 0.08%)</title><rect x="356.5" y="803.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="359.5" y="814.0"></text>
</g>
<g>
<title>tcp_write_xmit (32 samples, 0.08%)</title><rect x="356.5" y="787.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="359.5" y="798.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (29 samples, 0.07%)</title><rect x="356.6" y="771.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="359.6" y="782.0"></text>
</g>
<g>
<title>ip_output (24 samples, 0.06%)</title><rect x="356.7" y="755.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="359.7" y="766.0"></text>
</g>
<g>
<title>ip_finish_output2 (24 samples, 0.06%)</title><rect x="356.7" y="739.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="359.7" y="750.0"></text>
</g>
<g>
<title>__dev_queue_xmit (24 samples, 0.06%)</title><rect x="356.7" y="723.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="359.7" y="734.0"></text>
</g>
<g>
<title>sch_direct_xmit (24 samples, 0.06%)</title><rect x="356.7" y="707.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="359.7" y="718.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (12 samples, 0.03%)</title><rect x="356.8" y="691.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="359.8" y="702.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (24 samples, 0.06%)</title><rect x="357.5" y="803.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="360.5" y="814.0"></text>
</g>
<g>
<title>ip_output (17 samples, 0.04%)</title><rect x="357.6" y="787.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="360.6" y="798.0"></text>
</g>
<g>
<title>ip_finish_output2 (16 samples, 0.04%)</title><rect x="357.6" y="771.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="360.6" y="782.0"></text>
</g>
<g>
<title>__dev_queue_xmit (16 samples, 0.04%)</title><rect x="357.6" y="755.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="360.6" y="766.0"></text>
</g>
<g>
<title>sch_direct_xmit (13 samples, 0.03%)</title><rect x="357.7" y="739.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="360.7" y="750.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (9 samples, 0.02%)</title><rect x="357.8" y="723.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="360.8" y="734.0"></text>
</g>
<g>
<title>sock_def_readable (43 samples, 0.10%)</title><rect x="358.6" y="803.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="361.6" y="814.0"></text>
</g>
<g>
<title>__wake_up_common_lock (35 samples, 0.08%)</title><rect x="358.8" y="787.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="361.8" y="798.0"></text>
</g>
<g>
<title>__lock_text_start (35 samples, 0.08%)</title><rect x="358.8" y="771.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="361.8" y="782.0"></text>
</g>
<g>
<title>tcp_ack (44 samples, 0.10%)</title><rect x="359.8" y="803.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="362.8" y="814.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (32 samples, 0.08%)</title><rect x="359.9" y="787.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="362.9" y="798.0"></text>
</g>
<g>
<title>__kfree_skb (20 samples, 0.05%)</title><rect x="360.1" y="771.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="363.1" y="782.0"></text>
</g>
<g>
<title>skb_release_data (19 samples, 0.05%)</title><rect x="360.1" y="755.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="363.1" y="766.0"></text>
</g>
<g>
<title>__wake_up_common_lock (60 samples, 0.14%)</title><rect x="361.3" y="851.0" width="1.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="364.3" y="862.0"></text>
</g>
<g>
<title>__lock_text_start (59 samples, 0.14%)</title><rect x="361.3" y="835.0" width="1.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="364.3" y="846.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (17 samples, 0.04%)</title><rect x="363.0" y="851.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="366.0" y="862.0"></text>
</g>
<g>
<title>tcp_release_cb (20 samples, 0.05%)</title><rect x="363.4" y="851.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="366.4" y="862.0"></text>
</g>
<g>
<title>tcp_write_xmit (16 samples, 0.04%)</title><rect x="363.6" y="835.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="366.6" y="846.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (16 samples, 0.04%)</title><rect x="363.6" y="819.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="366.6" y="830.0"></text>
</g>
<g>
<title>ip_output (16 samples, 0.04%)</title><rect x="363.6" y="803.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="366.6" y="814.0"></text>
</g>
<g>
<title>ip_finish_output2 (14 samples, 0.03%)</title><rect x="363.6" y="787.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="366.6" y="798.0"></text>
</g>
<g>
<title>__dev_queue_xmit (14 samples, 0.03%)</title><rect x="363.6" y="771.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="366.6" y="782.0"></text>
</g>
<g>
<title>sch_direct_xmit (12 samples, 0.03%)</title><rect x="363.6" y="755.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="366.6" y="766.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (2,809 samples, 6.69%)</title><rect x="364.0" y="867.0" width="78.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="367.0" y="878.0">tcp_sendm..</text>
</g>
<g>
<title>__tcp_push_pending_frames (1,447 samples, 3.45%)</title><rect x="370.0" y="851.0" width="40.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="373.0" y="862.0">__t..</text>
</g>
<g>
<title>tcp_write_xmit (1,446 samples, 3.44%)</title><rect x="370.0" y="835.0" width="40.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="373.0" y="846.0">tcp..</text>
</g>
<g>
<title>__tcp_transmit_skb (1,254 samples, 2.99%)</title><rect x="371.2" y="819.0" width="35.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="374.2" y="830.0">__t..</text>
</g>
<g>
<title>__skb_clone (35 samples, 0.08%)</title><rect x="372.3" y="803.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="375.3" y="814.0"></text>
</g>
<g>
<title>ip_local_out (11 samples, 0.03%)</title><rect x="373.5" y="803.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="376.5" y="814.0"></text>
</g>
<g>
<title>__ip_local_out (11 samples, 0.03%)</title><rect x="373.5" y="787.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="376.5" y="798.0"></text>
</g>
<g>
<title>ip_output (1,128 samples, 2.69%)</title><rect x="373.8" y="803.0" width="31.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="376.8" y="814.0">ip..</text>
</g>
<g>
<title>ip_finish_output2 (1,106 samples, 2.63%)</title><rect x="373.9" y="787.0" width="31.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="376.9" y="798.0">ip..</text>
</g>
<g>
<title>__dev_queue_xmit (1,062 samples, 2.53%)</title><rect x="374.4" y="771.0" width="29.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="377.4" y="782.0">__..</text>
</g>
<g>
<title>__qdisc_run (52 samples, 0.12%)</title><rect x="375.6" y="755.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="378.6" y="766.0"></text>
</g>
<g>
<title>sch_direct_xmit (45 samples, 0.11%)</title><rect x="375.8" y="739.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="378.8" y="750.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (23 samples, 0.05%)</title><rect x="376.0" y="723.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="379.0" y="734.0"></text>
</g>
<g>
<title>ena_start_xmit	[ena] (13 samples, 0.03%)</title><rect x="376.2" y="707.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="379.2" y="718.0"></text>
</g>
<g>
<title>validate_xmit_skb_list (16 samples, 0.04%)</title><rect x="376.6" y="723.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="379.6" y="734.0"></text>
</g>
<g>
<title>validate_xmit_skb (16 samples, 0.04%)</title><rect x="376.6" y="707.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="379.6" y="718.0"></text>
</g>
<g>
<title>__skb_gso_segment (14 samples, 0.03%)</title><rect x="376.6" y="691.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="379.6" y="702.0"></text>
</g>
<g>
<title>skb_mac_gso_segment (14 samples, 0.03%)</title><rect x="376.6" y="675.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="379.6" y="686.0"></text>
</g>
<g>
<title>inet_gso_segment (14 samples, 0.03%)</title><rect x="376.6" y="659.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="379.6" y="670.0"></text>
</g>
<g>
<title>tcp_gso_segment (13 samples, 0.03%)</title><rect x="376.6" y="643.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="379.6" y="654.0"></text>
</g>
<g>
<title>skb_segment (11 samples, 0.03%)</title><rect x="376.7" y="627.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="379.7" y="638.0"></text>
</g>
<g>
<title>_raw_spin_lock (17 samples, 0.04%)</title><rect x="377.1" y="755.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="380.1" y="766.0"></text>
</g>
<g>
<title>netdev_pick_tx (36 samples, 0.09%)</title><rect x="377.5" y="755.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="380.5" y="766.0"></text>
</g>
<g>
<title>__netdev_pick_tx (23 samples, 0.05%)</title><rect x="377.7" y="739.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="380.7" y="750.0"></text>
</g>
<g>
<title>sch_direct_xmit (914 samples, 2.18%)</title><rect x="378.6" y="755.0" width="25.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="381.6" y="766.0">s..</text>
</g>
<g>
<title>_raw_spin_lock (84 samples, 0.20%)</title><rect x="378.6" y="739.0" width="2.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="381.6" y="750.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (519 samples, 1.24%)</title><rect x="381.0" y="739.0" width="14.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="384.0" y="750.0"></text>
</g>
<g>
<title>dev_queue_xmit_nit (86 samples, 0.20%)</title><rect x="381.2" y="723.0" width="2.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="384.2" y="734.0"></text>
</g>
<g>
<title>__skb_clone (56 samples, 0.13%)</title><rect x="381.4" y="707.0" width="1.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="384.4" y="718.0"></text>
</g>
<g>
<title>skb_clone (23 samples, 0.05%)</title><rect x="383.0" y="707.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="386.0" y="718.0"></text>
</g>
<g>
<title>kmem_cache_alloc (16 samples, 0.04%)</title><rect x="383.2" y="691.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="386.2" y="702.0"></text>
</g>
<g>
<title>ena_start_xmit	[ena] (380 samples, 0.90%)</title><rect x="383.6" y="723.0" width="10.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="386.6" y="734.0"></text>
</g>
<g>
<title>ena_com_prepare_tx	[ena] (106 samples, 0.25%)</title><rect x="390.1" y="707.0" width="3.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="393.1" y="718.0"></text>
</g>
<g>
<title>__iowrite64_copy (34 samples, 0.08%)</title><rect x="391.7" y="691.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="394.7" y="702.0"></text>
</g>
<g>
<title>memset_erms (10 samples, 0.02%)</title><rect x="392.8" y="691.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="395.8" y="702.0"></text>
</g>
<g>
<title>skb_copy_bits (21 samples, 0.05%)</title><rect x="393.1" y="707.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="396.1" y="718.0"></text>
</g>
<g>
<title>memcpy_erms (16 samples, 0.04%)</title><rect x="393.2" y="691.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="396.2" y="702.0"></text>
</g>
<g>
<title>swiotlb_dma_mapping_error (12 samples, 0.03%)</title><rect x="393.7" y="707.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="396.7" y="718.0"></text>
</g>
<g>
<title>swiotlb_map_page (10 samples, 0.02%)</title><rect x="394.0" y="707.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="397.0" y="718.0"></text>
</g>
<g>
<title>packet_rcv (45 samples, 0.11%)</title><rect x="394.3" y="723.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="397.3" y="734.0"></text>
</g>
<g>
<title>consume_skb (15 samples, 0.04%)</title><rect x="394.7" y="707.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="397.7" y="718.0"></text>
</g>
<g>
<title>skb_release_data (9 samples, 0.02%)</title><rect x="394.8" y="691.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="397.8" y="702.0"></text>
</g>
<g>
<title>kmem_cache_free (16 samples, 0.04%)</title><rect x="395.1" y="707.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="398.1" y="718.0"></text>
</g>
<g>
<title>validate_xmit_skb_list (309 samples, 0.74%)</title><rect x="395.6" y="739.0" width="8.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="398.6" y="750.0"></text>
</g>
<g>
<title>validate_xmit_skb (307 samples, 0.73%)</title><rect x="395.6" y="723.0" width="8.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="398.6" y="734.0"></text>
</g>
<g>
<title>__skb_gso_segment (281 samples, 0.67%)</title><rect x="395.6" y="707.0" width="7.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="398.6" y="718.0"></text>
</g>
<g>
<title>skb_mac_gso_segment (278 samples, 0.66%)</title><rect x="395.7" y="691.0" width="7.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="398.7" y="702.0"></text>
</g>
<g>
<title>inet_gso_segment (268 samples, 0.64%)</title><rect x="396.0" y="675.0" width="7.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="399.0" y="686.0"></text>
</g>
<g>
<title>tcp_gso_segment (234 samples, 0.56%)</title><rect x="396.9" y="659.0" width="6.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="399.9" y="670.0"></text>
</g>
<g>
<title>skb_segment (220 samples, 0.52%)</title><rect x="397.3" y="643.0" width="6.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="400.3" y="654.0"></text>
</g>
<g>
<title>__alloc_skb (70 samples, 0.17%)</title><rect x="399.5" y="627.0" width="2.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="402.5" y="638.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.42 (25 samples, 0.06%)</title><rect x="400.0" y="611.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="403.0" y="622.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (22 samples, 0.05%)</title><rect x="400.1" y="595.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="403.1" y="606.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (22 samples, 0.05%)</title><rect x="400.7" y="611.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="403.7" y="622.0"></text>
</g>
<g>
<title>__copy_skb_header (14 samples, 0.03%)</title><rect x="401.5" y="627.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="404.5" y="638.0"></text>
</g>
<g>
<title>memcpy_erms (42 samples, 0.10%)</title><rect x="401.9" y="627.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="404.9" y="638.0"></text>
</g>
<g>
<title>consume_skb (10 samples, 0.02%)</title><rect x="403.5" y="707.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="406.5" y="718.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (26 samples, 0.06%)</title><rect x="404.2" y="771.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="407.2" y="782.0"></text>
</g>
<g>
<title>do_softirq.part.17 (24 samples, 0.06%)</title><rect x="404.3" y="755.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="407.3" y="766.0"></text>
</g>
<g>
<title>do_softirq_own_stack (24 samples, 0.06%)</title><rect x="404.3" y="739.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="407.3" y="750.0"></text>
</g>
<g>
<title>__softirqentry_text_start (24 samples, 0.06%)</title><rect x="404.3" y="723.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="407.3" y="734.0"></text>
</g>
<g>
<title>net_rx_action (19 samples, 0.05%)</title><rect x="404.3" y="707.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="407.3" y="718.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (19 samples, 0.05%)</title><rect x="404.3" y="691.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="407.3" y="702.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (13 samples, 0.03%)</title><rect x="404.5" y="675.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="407.5" y="686.0"></text>
</g>
<g>
<title>ip_finish_output (19 samples, 0.05%)</title><rect x="405.0" y="787.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="408.0" y="798.0"></text>
</g>
<g>
<title>skb_gso_validate_mtu (11 samples, 0.03%)</title><rect x="405.2" y="771.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="408.2" y="782.0"></text>
</g>
<g>
<title>ip_queue_xmit (21 samples, 0.05%)</title><rect x="405.5" y="803.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="408.5" y="814.0"></text>
</g>
<g>
<title>__sk_dst_check (12 samples, 0.03%)</title><rect x="405.7" y="787.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="408.7" y="798.0"></text>
</g>
<g>
<title>sched_clock_cpu (21 samples, 0.05%)</title><rect x="406.5" y="819.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="409.5" y="830.0"></text>
</g>
<g>
<title>sched_clock (20 samples, 0.05%)</title><rect x="406.5" y="803.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="409.5" y="814.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (20 samples, 0.05%)</title><rect x="406.5" y="787.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="409.5" y="798.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (20 samples, 0.05%)</title><rect x="406.5" y="771.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="409.5" y="782.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (80 samples, 0.19%)</title><rect x="407.1" y="819.0" width="2.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="410.1" y="830.0"></text>
</g>
<g>
<title>sk_reset_timer (60 samples, 0.14%)</title><rect x="407.2" y="803.0" width="1.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="410.2" y="814.0"></text>
</g>
<g>
<title>mod_timer (60 samples, 0.14%)</title><rect x="407.2" y="787.0" width="1.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="410.2" y="798.0"></text>
</g>
<g>
<title>__lock_text_start (42 samples, 0.10%)</title><rect x="407.6" y="771.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="410.6" y="782.0"></text>
</g>
<g>
<title>tcp_rearm_rto.part.60 (16 samples, 0.04%)</title><rect x="408.9" y="803.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="411.9" y="814.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (41 samples, 0.10%)</title><rect x="409.4" y="819.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="412.4" y="830.0"></text>
</g>
<g>
<title>sk_reset_timer (38 samples, 0.09%)</title><rect x="409.5" y="803.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="412.5" y="814.0"></text>
</g>
<g>
<title>mod_timer (36 samples, 0.09%)</title><rect x="409.6" y="787.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="412.6" y="798.0"></text>
</g>
<g>
<title>__lock_text_start (29 samples, 0.07%)</title><rect x="409.7" y="771.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="412.7" y="782.0"></text>
</g>
<g>
<title>_copy_from_iter_full (720 samples, 1.71%)</title><rect x="410.6" y="851.0" width="20.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="413.6" y="862.0"></text>
</g>
<g>
<title>copyin (688 samples, 1.64%)</title><rect x="411.1" y="835.0" width="19.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="414.1" y="846.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (681 samples, 1.62%)</title><rect x="411.2" y="819.0" width="19.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="414.2" y="830.0"></text>
</g>
<g>
<title>ret_from_intr (29 samples, 0.07%)</title><rect x="429.5" y="803.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="432.5" y="814.0"></text>
</g>
<g>
<title>do_IRQ (29 samples, 0.07%)</title><rect x="429.5" y="787.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="432.5" y="798.0"></text>
</g>
<g>
<title>irq_exit (29 samples, 0.07%)</title><rect x="429.5" y="771.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="432.5" y="782.0"></text>
</g>
<g>
<title>__softirqentry_text_start (29 samples, 0.07%)</title><rect x="429.5" y="755.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="432.5" y="766.0"></text>
</g>
<g>
<title>net_rx_action (19 samples, 0.05%)</title><rect x="429.8" y="739.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="432.8" y="750.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (19 samples, 0.05%)</title><rect x="429.8" y="723.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="432.8" y="734.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (13 samples, 0.03%)</title><rect x="430.0" y="707.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="433.0" y="718.0"></text>
</g>
<g>
<title>iov_iter_advance (16 samples, 0.04%)</title><rect x="430.4" y="835.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="433.4" y="846.0"></text>
</g>
<g>
<title>sk_page_frag_refill (114 samples, 0.27%)</title><rect x="431.0" y="851.0" width="3.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="434.0" y="862.0"></text>
</g>
<g>
<title>skb_page_frag_refill (110 samples, 0.26%)</title><rect x="431.2" y="835.0" width="3.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="434.2" y="846.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (87 samples, 0.21%)</title><rect x="431.7" y="819.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="434.7" y="830.0"></text>
</g>
<g>
<title>get_page_from_freelist (82 samples, 0.20%)</title><rect x="431.8" y="803.0" width="2.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="434.8" y="814.0"></text>
</g>
<g>
<title>__zone_watermark_ok (11 samples, 0.03%)</title><rect x="433.8" y="787.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="436.8" y="798.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (130 samples, 0.31%)</title><rect x="434.3" y="851.0" width="3.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="437.3" y="862.0"></text>
</g>
<g>
<title>__alloc_skb (122 samples, 0.29%)</title><rect x="434.4" y="835.0" width="3.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="437.4" y="846.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.42 (28 samples, 0.07%)</title><rect x="435.6" y="819.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="438.6" y="830.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (27 samples, 0.06%)</title><rect x="435.6" y="803.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="438.6" y="814.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (36 samples, 0.09%)</title><rect x="436.4" y="819.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="439.4" y="830.0"></text>
</g>
<g>
<title>prefetch_freepointer (10 samples, 0.02%)</title><rect x="437.1" y="803.0" width="0.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="440.1" y="814.0"></text>
</g>
<g>
<title>ksize (17 samples, 0.04%)</title><rect x="437.4" y="819.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="440.4" y="830.0"></text>
</g>
<g>
<title>skb_entail (20 samples, 0.05%)</title><rect x="437.9" y="851.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="440.9" y="862.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (25 samples, 0.06%)</title><rect x="438.8" y="851.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="441.8" y="862.0"></text>
</g>
<g>
<title>tcp_send_mss (73 samples, 0.17%)</title><rect x="439.5" y="851.0" width="2.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="442.5" y="862.0"></text>
</g>
<g>
<title>tcp_current_mss (54 samples, 0.13%)</title><rect x="440.0" y="835.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="443.0" y="846.0"></text>
</g>
<g>
<title>ipv4_mtu (12 samples, 0.03%)</title><rect x="440.7" y="819.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="443.7" y="830.0"></text>
</g>
<g>
<title>tcp_established_options (16 samples, 0.04%)</title><rect x="441.1" y="819.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="444.1" y="830.0"></text>
</g>
<g>
<title>tcp_write_xmit (42 samples, 0.10%)</title><rect x="441.8" y="851.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="444.8" y="862.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (38 samples, 0.09%)</title><rect x="441.8" y="835.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="444.8" y="846.0"></text>
</g>
<g>
<title>ip_output (36 samples, 0.09%)</title><rect x="441.8" y="819.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="444.8" y="830.0"></text>
</g>
<g>
<title>ip_finish_output2 (36 samples, 0.09%)</title><rect x="441.8" y="803.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="444.8" y="814.0"></text>
</g>
<g>
<title>__dev_queue_xmit (34 samples, 0.08%)</title><rect x="441.8" y="787.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="444.8" y="798.0"></text>
</g>
<g>
<title>sch_direct_xmit (27 samples, 0.06%)</title><rect x="442.0" y="771.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="445.0" y="782.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (14 samples, 0.03%)</title><rect x="442.1" y="755.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="445.1" y="766.0"></text>
</g>
<g>
<title>validate_xmit_skb_list (10 samples, 0.02%)</title><rect x="442.5" y="755.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="445.5" y="766.0"></text>
</g>
<g>
<title>validate_xmit_skb (10 samples, 0.02%)</title><rect x="442.5" y="739.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="445.5" y="750.0"></text>
</g>
<g>
<title>__skb_gso_segment (9 samples, 0.02%)</title><rect x="442.5" y="723.0" width="0.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="445.5" y="734.0"></text>
</g>
<g>
<title>skb_mac_gso_segment (9 samples, 0.02%)</title><rect x="442.5" y="707.0" width="0.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="445.5" y="718.0"></text>
</g>
<g>
<title>fsnotify (10 samples, 0.02%)</title><rect x="442.9" y="931.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="445.9" y="942.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (12 samples, 0.03%)</title><rect x="443.3" y="963.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="446.3" y="974.0"></text>
</g>
<g>
<title>__audit_syscall_exit (10 samples, 0.02%)</title><rect x="443.4" y="947.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="446.4" y="958.0"></text>
</g>
<g>
<title>syscall_trace_enter (19 samples, 0.05%)</title><rect x="443.7" y="963.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="446.7" y="974.0"></text>
</g>
<g>
<title>__audit_syscall_entry (15 samples, 0.04%)</title><rect x="443.8" y="947.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="446.8" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (51 samples, 0.12%)</title><rect x="444.3" y="1059.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="447.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (30 samples, 0.07%)</title><rect x="444.5" y="1043.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="447.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (9 samples, 0.02%)</title><rect x="444.9" y="1027.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="447.9" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (14 samples, 0.03%)</title><rect x="445.4" y="1043.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="448.4" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (45 samples, 0.11%)</title><rect x="445.8" y="1059.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="448.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (18 samples, 0.04%)</title><rect x="446.4" y="1043.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="449.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (13 samples, 0.03%)</title><rect x="446.5" y="1027.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="449.5" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (15 samples, 0.04%)</title><rect x="447.0" y="1075.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="450.0" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureWriteOpen (45 samples, 0.11%)</title><rect x="447.5" y="1075.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="450.5" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.writerCleanup (18 samples, 0.04%)</title><rect x="448.7" y="1075.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="451.7" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.postProcessClean (116 samples, 0.28%)</title><rect x="449.3" y="1107.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="452.3" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioPipeline.unregisterOp (46 samples, 0.11%)</title><rect x="450.5" y="1091.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="453.5" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (45 samples, 0.11%)</title><rect x="450.5" y="1075.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="453.5" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (45 samples, 0.11%)</title><rect x="450.5" y="1059.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="453.5" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetInterestOps (42 samples, 0.10%)</title><rect x="450.6" y="1043.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="453.6" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.putEventOps (42 samples, 0.10%)</title><rect x="450.6" y="1027.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="453.6" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.setInterest (14 samples, 0.03%)</title><rect x="451.4" y="1011.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="454.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.isEmpty (15 samples, 0.04%)</title><rect x="451.8" y="1091.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="454.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (15 samples, 0.04%)</title><rect x="451.8" y="1075.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="454.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.compareAndSet (11 samples, 0.03%)</title><rect x="452.2" y="1091.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="455.2" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/PacketEncoder.onWrite (161 samples, 0.38%)</title><rect x="452.6" y="1107.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="455.6" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.get (143 samples, 0.34%)</title><rect x="452.8" y="1091.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="455.8" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.get (143 samples, 0.34%)</title><rect x="452.8" y="1075.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (116 samples, 0.28%)</title><rect x="453.6" y="1059.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="456.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (55 samples, 0.13%)</title><rect x="454.4" y="1043.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="457.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.casHead (11 samples, 0.03%)</title><rect x="455.6" y="1027.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="458.6" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (29 samples, 0.07%)</title><rect x="455.9" y="1043.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="458.9" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/SelectorOptimizer$IteratorImpl.hasNext (11 samples, 0.03%)</title><rect x="457.2" y="1139.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="460.2" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (49 samples, 0.12%)</title><rect x="457.9" y="1139.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="460.9" y="1150.0"></text>
</g>
<g>
<title>gettimeofday (48 samples, 0.11%)</title><rect x="457.9" y="1123.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="460.9" y="1134.0"></text>
</g>
<g>
<title>[vdso] (41 samples, 0.10%)</title><rect x="458.1" y="1107.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="461.1" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioThread.processTaskQueue (678 samples, 1.61%)</title><rect x="459.4" y="1155.0" width="19.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="462.4" y="1166.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioPipeline.run (652 samples, 1.55%)</title><rect x="459.6" y="1139.0" width="18.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="462.6" y="1150.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.process (652 samples, 1.55%)</title><rect x="459.6" y="1123.0" width="18.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="462.6" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/util/ClientMessageEncoder.onWrite (29 samples, 0.07%)</title><rect x="459.7" y="1107.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="462.7" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessageWriter.writeTo (15 samples, 0.04%)</title><rect x="459.7" y="1091.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="462.7" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessageWriter.writeFrame (15 samples, 0.04%)</title><rect x="459.7" y="1075.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="462.7" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.get (12 samples, 0.03%)</title><rect x="460.1" y="1091.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="463.1" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.get (12 samples, 0.03%)</title><rect x="460.1" y="1075.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="463.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (11 samples, 0.03%)</title><rect x="460.2" y="1059.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="463.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.casItem (11 samples, 0.03%)</title><rect x="460.2" y="1043.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="463.2" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.flushToSocket (585 samples, 1.39%)</title><rect x="460.5" y="1107.0" width="16.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="463.5" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (578 samples, 1.38%)</title><rect x="460.7" y="1091.0" width="16.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="463.7" y="1102.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (10 samples, 0.02%)</title><rect x="461.4" y="1075.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="464.4" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (529 samples, 1.26%)</title><rect x="461.8" y="1075.0" width="14.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="464.8" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (22 samples, 0.05%)</title><rect x="462.0" y="1059.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="465.0" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (19 samples, 0.05%)</title><rect x="462.1" y="1043.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="465.1" y="1054.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (18 samples, 0.04%)</title><rect x="462.1" y="1027.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="465.1" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (12 samples, 0.03%)</title><rect x="462.1" y="1011.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="465.1" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (488 samples, 1.16%)</title><rect x="462.6" y="1059.0" width="13.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="465.6" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (482 samples, 1.15%)</title><rect x="462.8" y="1043.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="465.8" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (482 samples, 1.15%)</title><rect x="462.8" y="1027.0" width="13.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="465.8" y="1038.0"></text>
</g>
<g>
<title>write (475 samples, 1.13%)</title><rect x="463.0" y="1011.0" width="13.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="466.0" y="1022.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (457 samples, 1.09%)</title><rect x="463.5" y="995.0" width="12.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="466.5" y="1006.0"></text>
</g>
<g>
<title>do_syscall_64 (457 samples, 1.09%)</title><rect x="463.5" y="979.0" width="12.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="466.5" y="990.0"></text>
</g>
<g>
<title>sys_write (430 samples, 1.02%)</title><rect x="464.0" y="963.0" width="12.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="467.0" y="974.0"></text>
</g>
<g>
<title>__fdget_pos (14 samples, 0.03%)</title><rect x="464.1" y="947.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="467.1" y="958.0"></text>
</g>
<g>
<title>__fget_light (14 samples, 0.03%)</title><rect x="464.1" y="931.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="467.1" y="942.0"></text>
</g>
<g>
<title>__fget (11 samples, 0.03%)</title><rect x="464.2" y="915.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="467.2" y="926.0"></text>
</g>
<g>
<title>vfs_write (408 samples, 0.97%)</title><rect x="464.6" y="947.0" width="11.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="467.6" y="958.0"></text>
</g>
<g>
<title>__vfs_write (403 samples, 0.96%)</title><rect x="464.7" y="931.0" width="11.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="467.7" y="942.0"></text>
</g>
<g>
<title>sock_write_iter (399 samples, 0.95%)</title><rect x="464.8" y="915.0" width="11.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="467.8" y="926.0"></text>
</g>
<g>
<title>sock_sendmsg (392 samples, 0.93%)</title><rect x="465.0" y="899.0" width="11.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="468.0" y="910.0"></text>
</g>
<g>
<title>tcp_sendmsg (387 samples, 0.92%)</title><rect x="465.2" y="883.0" width="10.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="468.2" y="894.0"></text>
</g>
<g>
<title>lock_sock_nested (33 samples, 0.08%)</title><rect x="465.4" y="867.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="468.4" y="878.0"></text>
</g>
<g>
<title>__lock_sock (16 samples, 0.04%)</title><rect x="465.5" y="851.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="468.5" y="862.0"></text>
</g>
<g>
<title>schedule (11 samples, 0.03%)</title><rect x="465.6" y="835.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="468.6" y="846.0"></text>
</g>
<g>
<title>__sched_text_start (11 samples, 0.03%)</title><rect x="465.6" y="819.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="468.6" y="830.0"></text>
</g>
<g>
<title>finish_task_switch (11 samples, 0.03%)</title><rect x="465.6" y="803.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="468.6" y="814.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (16 samples, 0.04%)</title><rect x="465.9" y="851.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="468.9" y="862.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (14 samples, 0.03%)</title><rect x="466.0" y="835.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="469.0" y="846.0"></text>
</g>
<g>
<title>release_sock (45 samples, 0.11%)</title><rect x="466.4" y="867.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="469.4" y="878.0"></text>
</g>
<g>
<title>__release_sock (25 samples, 0.06%)</title><rect x="466.4" y="851.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="469.4" y="862.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (24 samples, 0.06%)</title><rect x="466.4" y="835.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="469.4" y="846.0"></text>
</g>
<g>
<title>tcp_rcv_established (24 samples, 0.06%)</title><rect x="466.4" y="819.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="469.4" y="830.0"></text>
</g>
<g>
<title>__wake_up_common_lock (13 samples, 0.03%)</title><rect x="467.1" y="851.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="470.1" y="862.0"></text>
</g>
<g>
<title>__lock_text_start (13 samples, 0.03%)</title><rect x="467.1" y="835.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="470.1" y="846.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (299 samples, 0.71%)</title><rect x="467.6" y="867.0" width="8.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="470.6" y="878.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (80 samples, 0.19%)</title><rect x="468.5" y="851.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="471.5" y="862.0"></text>
</g>
<g>
<title>tcp_write_xmit (80 samples, 0.19%)</title><rect x="468.5" y="835.0" width="2.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="471.5" y="846.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (74 samples, 0.18%)</title><rect x="468.5" y="819.0" width="2.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="471.5" y="830.0"></text>
</g>
<g>
<title>ip_output (65 samples, 0.15%)</title><rect x="468.7" y="803.0" width="1.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="471.7" y="814.0"></text>
</g>
<g>
<title>ip_finish_output2 (64 samples, 0.15%)</title><rect x="468.7" y="787.0" width="1.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="471.7" y="798.0"></text>
</g>
<g>
<title>__dev_queue_xmit (61 samples, 0.15%)</title><rect x="468.7" y="771.0" width="1.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="471.7" y="782.0"></text>
</g>
<g>
<title>sch_direct_xmit (52 samples, 0.12%)</title><rect x="469.0" y="755.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="472.0" y="766.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (32 samples, 0.08%)</title><rect x="469.1" y="739.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="472.1" y="750.0"></text>
</g>
<g>
<title>ena_start_xmit	[ena] (20 samples, 0.05%)</title><rect x="469.3" y="723.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="472.3" y="734.0"></text>
</g>
<g>
<title>validate_xmit_skb_list (16 samples, 0.04%)</title><rect x="470.0" y="739.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="473.0" y="750.0"></text>
</g>
<g>
<title>validate_xmit_skb (15 samples, 0.04%)</title><rect x="470.0" y="723.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="473.0" y="734.0"></text>
</g>
<g>
<title>__skb_gso_segment (13 samples, 0.03%)</title><rect x="470.0" y="707.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="473.0" y="718.0"></text>
</g>
<g>
<title>skb_mac_gso_segment (13 samples, 0.03%)</title><rect x="470.0" y="691.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="473.0" y="702.0"></text>
</g>
<g>
<title>inet_gso_segment (13 samples, 0.03%)</title><rect x="470.0" y="675.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="473.0" y="686.0"></text>
</g>
<g>
<title>tcp_gso_segment (11 samples, 0.03%)</title><rect x="470.1" y="659.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="473.1" y="670.0"></text>
</g>
<g>
<title>skb_segment (11 samples, 0.03%)</title><rect x="470.1" y="643.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="473.1" y="654.0"></text>
</g>
<g>
<title>_copy_from_iter_full (121 samples, 0.29%)</title><rect x="470.7" y="851.0" width="3.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="473.7" y="862.0"></text>
</g>
<g>
<title>copyin (119 samples, 0.28%)</title><rect x="470.7" y="835.0" width="3.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="473.7" y="846.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (118 samples, 0.28%)</title><rect x="470.7" y="819.0" width="3.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="473.7" y="830.0"></text>
</g>
<g>
<title>sk_page_frag_refill (32 samples, 0.08%)</title><rect x="474.1" y="851.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="477.1" y="862.0"></text>
</g>
<g>
<title>skb_page_frag_refill (31 samples, 0.07%)</title><rect x="474.1" y="835.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="477.1" y="846.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (26 samples, 0.06%)</title><rect x="474.3" y="819.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="477.3" y="830.0"></text>
</g>
<g>
<title>get_page_from_freelist (25 samples, 0.06%)</title><rect x="474.3" y="803.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="477.3" y="814.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (10 samples, 0.02%)</title><rect x="475.0" y="851.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="478.0" y="862.0"></text>
</g>
<g>
<title>__alloc_skb (10 samples, 0.02%)</title><rect x="475.0" y="835.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="478.0" y="846.0"></text>
</g>
<g>
<title>tcp_send_mss (9 samples, 0.02%)</title><rect x="475.5" y="851.0" width="0.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="478.5" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (9 samples, 0.02%)</title><rect x="476.5" y="1059.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="479.5" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.postProcessClean (12 samples, 0.03%)</title><rect x="476.9" y="1107.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="479.9" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/PacketEncoder.onWrite (22 samples, 0.05%)</title><rect x="477.2" y="1107.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="480.2" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.get (17 samples, 0.04%)</title><rect x="477.3" y="1091.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="480.3" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.get (17 samples, 0.04%)</title><rect x="477.3" y="1075.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="480.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (14 samples, 0.03%)</title><rect x="477.4" y="1059.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="480.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (14 samples, 0.03%)</title><rect x="477.9" y="1139.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="480.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.casItem (10 samples, 0.02%)</title><rect x="478.0" y="1123.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="481.0" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (6,332 samples, 15.08%)</title><rect x="478.5" y="1155.0" width="178.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="481.5" y="1166.0">sun/nio/ch/SelectorImpl..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (6,330 samples, 15.07%)</title><rect x="478.6" y="1139.0" width="177.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="481.6" y="1150.0">sun/nio/ch/SelectorImpl..</text>
</g>
<g>
<title>ret_from_intr (17 samples, 0.04%)</title><rect x="484.0" y="1123.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="487.0" y="1134.0"></text>
</g>
<g>
<title>do_IRQ (17 samples, 0.04%)</title><rect x="484.0" y="1107.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="487.0" y="1118.0"></text>
</g>
<g>
<title>irq_exit (17 samples, 0.04%)</title><rect x="484.0" y="1091.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="487.0" y="1102.0"></text>
</g>
<g>
<title>__softirqentry_text_start (17 samples, 0.04%)</title><rect x="484.0" y="1075.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="487.0" y="1086.0"></text>
</g>
<g>
<title>net_rx_action (12 samples, 0.03%)</title><rect x="484.1" y="1059.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="487.1" y="1070.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (12 samples, 0.03%)</title><rect x="484.1" y="1043.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="487.1" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (6,120 samples, 14.57%)</title><rect x="484.5" y="1123.0" width="172.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="487.5" y="1134.0">sun/nio/ch/EPollSelect..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (99 samples, 0.24%)</title><rect x="487.0" y="1107.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="490.0" y="1118.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (96 samples, 0.23%)</title><rect x="487.1" y="1091.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="490.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (35 samples, 0.08%)</title><rect x="488.6" y="1075.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="491.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (35 samples, 0.08%)</title><rect x="488.6" y="1059.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="491.6" y="1070.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (93 samples, 0.22%)</title><rect x="489.7" y="1107.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="492.7" y="1118.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (93 samples, 0.22%)</title><rect x="489.7" y="1091.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="492.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (81 samples, 0.19%)</title><rect x="490.1" y="1075.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="493.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (81 samples, 0.19%)</title><rect x="490.1" y="1059.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="493.1" y="1070.0"></text>
</g>
<g>
<title>ret_from_intr (10 samples, 0.02%)</title><rect x="492.1" y="1043.0" width="0.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="495.1" y="1054.0"></text>
</g>
<g>
<title>do_IRQ (10 samples, 0.02%)</title><rect x="492.1" y="1027.0" width="0.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="495.1" y="1038.0"></text>
</g>
<g>
<title>irq_exit (10 samples, 0.02%)</title><rect x="492.1" y="1011.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="495.1" y="1022.0"></text>
</g>
<g>
<title>__softirqentry_text_start (10 samples, 0.02%)</title><rect x="492.1" y="995.0" width="0.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="495.1" y="1006.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (9 samples, 0.02%)</title><rect x="492.4" y="1107.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="495.4" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (4,978 samples, 11.85%)</title><rect x="492.8" y="1107.0" width="139.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="495.8" y="1118.0">sun/nio/ch/EPollA..</text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (3,677 samples, 8.76%)</title><rect x="493.3" y="1091.0" width="103.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="496.3" y="1102.0">sun/nio/ch/E..</text>
</g>
<g>
<title>Java_sun_nio_ch_EPollArrayWrapper_epollWait (93 samples, 0.22%)</title><rect x="494.3" y="1075.0" width="2.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="497.3" y="1086.0"></text>
</g>
<g>
<title>gettimeofday (77 samples, 0.18%)</title><rect x="494.8" y="1059.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="497.8" y="1070.0"></text>
</g>
<g>
<title>[vdso] (59 samples, 0.14%)</title><rect x="495.3" y="1043.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="498.3" y="1054.0"></text>
</g>
<g>
<title>[unknown] (3,520 samples, 8.38%)</title><rect x="496.9" y="1075.0" width="99.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="499.9" y="1086.0">[unknown]</text>
</g>
<g>
<title>__GI_epoll_pwait (3,465 samples, 8.25%)</title><rect x="496.9" y="1059.0" width="97.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="499.9" y="1070.0">__GI_epoll_..</text>
</g>
<g>
<title>__indirect_thunk_start (10 samples, 0.02%)</title><rect x="503.5" y="1043.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="506.5" y="1054.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3,181 samples, 7.58%)</title><rect x="504.1" y="1043.0" width="89.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="507.1" y="1054.0">entry_SYSC..</text>
</g>
<g>
<title>do_syscall_64 (3,181 samples, 7.58%)</title><rect x="504.1" y="1027.0" width="89.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="507.1" y="1038.0">do_syscall..</text>
</g>
<g>
<title>ret_from_intr (21 samples, 0.05%)</title><rect x="509.6" y="1011.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="512.6" y="1022.0"></text>
</g>
<g>
<title>do_IRQ (21 samples, 0.05%)</title><rect x="509.6" y="995.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="512.6" y="1006.0"></text>
</g>
<g>
<title>irq_exit (21 samples, 0.05%)</title><rect x="509.6" y="979.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="512.6" y="990.0"></text>
</g>
<g>
<title>__softirqentry_text_start (21 samples, 0.05%)</title><rect x="509.6" y="963.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="512.6" y="974.0"></text>
</g>
<g>
<title>net_rx_action (16 samples, 0.04%)</title><rect x="509.7" y="947.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="512.7" y="958.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (16 samples, 0.04%)</title><rect x="509.7" y="931.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="512.7" y="942.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (11 samples, 0.03%)</title><rect x="509.8" y="915.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="512.8" y="926.0"></text>
</g>
<g>
<title>sys_epoll_pwait (2,861 samples, 6.81%)</title><rect x="510.2" y="1011.0" width="80.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="513.2" y="1022.0">sys_epoll..</text>
</g>
<g>
<title>__fget_light (70 samples, 0.17%)</title><rect x="511.2" y="995.0" width="2.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="514.2" y="1006.0"></text>
</g>
<g>
<title>__fget (54 samples, 0.13%)</title><rect x="511.6" y="979.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="514.6" y="990.0"></text>
</g>
<g>
<title>ep_poll (2,731 samples, 6.50%)</title><rect x="513.2" y="995.0" width="76.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="516.2" y="1006.0">ep_poll</text>
</g>
<g>
<title>__lock_text_start (200 samples, 0.48%)</title><rect x="514.0" y="979.0" width="5.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="517.0" y="990.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.16 (978 samples, 2.33%)</title><rect x="519.7" y="979.0" width="27.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="522.7" y="990.0">e..</text>
</g>
<g>
<title>__lock_text_start (98 samples, 0.23%)</title><rect x="520.8" y="963.0" width="2.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="523.8" y="974.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (9 samples, 0.02%)</title><rect x="523.6" y="963.0" width="0.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="526.6" y="974.0"></text>
</g>
<g>
<title>ep_send_events_proc (746 samples, 1.78%)</title><rect x="523.8" y="963.0" width="21.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="526.8" y="974.0"></text>
</g>
<g>
<title>__list_del_entry_valid (15 samples, 0.04%)</title><rect x="532.5" y="947.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="535.5" y="958.0"></text>
</g>
<g>
<title>pipe_poll (133 samples, 0.32%)</title><rect x="533.0" y="947.0" width="3.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="536.0" y="958.0"></text>
</g>
<g>
<title>ret_from_intr (14 samples, 0.03%)</title><rect x="536.7" y="947.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="539.7" y="958.0"></text>
</g>
<g>
<title>do_IRQ (14 samples, 0.03%)</title><rect x="536.7" y="931.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="539.7" y="942.0"></text>
</g>
<g>
<title>irq_exit (14 samples, 0.03%)</title><rect x="536.7" y="915.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="539.7" y="926.0"></text>
</g>
<g>
<title>__softirqentry_text_start (14 samples, 0.03%)</title><rect x="536.7" y="899.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="539.7" y="910.0"></text>
</g>
<g>
<title>net_rx_action (11 samples, 0.03%)</title><rect x="536.8" y="883.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="539.8" y="894.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (11 samples, 0.03%)</title><rect x="536.8" y="867.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="539.8" y="878.0"></text>
</g>
<g>
<title>sock_poll (274 samples, 0.65%)</title><rect x="537.1" y="947.0" width="7.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="540.1" y="958.0"></text>
</g>
<g>
<title>ret_from_intr (12 samples, 0.03%)</title><rect x="540.7" y="931.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="543.7" y="942.0"></text>
</g>
<g>
<title>do_IRQ (12 samples, 0.03%)</title><rect x="540.7" y="915.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="543.7" y="926.0"></text>
</g>
<g>
<title>irq_exit (12 samples, 0.03%)</title><rect x="540.7" y="899.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="543.7" y="910.0"></text>
</g>
<g>
<title>__softirqentry_text_start (12 samples, 0.03%)</title><rect x="540.7" y="883.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="543.7" y="894.0"></text>
</g>
<g>
<title>tcp_poll (134 samples, 0.32%)</title><rect x="541.0" y="931.0" width="3.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="544.0" y="942.0"></text>
</g>
<g>
<title>tcp_stream_memory_free	[ipv6] (48 samples, 0.11%)</title><rect x="543.4" y="915.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="546.4" y="926.0"></text>
</g>
<g>
<title>mutex_lock (79 samples, 0.19%)</title><rect x="544.8" y="963.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="547.8" y="974.0"></text>
</g>
<g>
<title>ktime_get_ts64 (81 samples, 0.19%)</title><rect x="547.2" y="979.0" width="2.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="550.2" y="990.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (71 samples, 0.17%)</title><rect x="547.4" y="963.0" width="2.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="550.4" y="974.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (63 samples, 0.15%)</title><rect x="547.6" y="947.0" width="1.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="550.6" y="958.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (1,349 samples, 3.21%)</title><rect x="549.5" y="979.0" width="37.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="552.5" y="990.0">sch..</text>
</g>
<g>
<title>__hrtimer_init (23 samples, 0.05%)</title><rect x="550.1" y="963.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="553.1" y="974.0"></text>
</g>
<g>
<title>hrtimer_start_range_ns (71 samples, 0.17%)</title><rect x="550.7" y="963.0" width="2.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="553.7" y="974.0"></text>
</g>
<g>
<title>__lock_text_start (61 samples, 0.15%)</title><rect x="550.8" y="947.0" width="1.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="553.8" y="958.0"></text>
</g>
<g>
<title>hrtimer_try_to_cancel (120 samples, 0.29%)</title><rect x="552.7" y="963.0" width="3.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="555.7" y="974.0"></text>
</g>
<g>
<title>__lock_text_start (106 samples, 0.25%)</title><rect x="552.9" y="947.0" width="3.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="555.9" y="958.0"></text>
</g>
<g>
<title>schedule (1,114 samples, 2.65%)</title><rect x="556.1" y="963.0" width="31.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="559.1" y="974.0">sc..</text>
</g>
<g>
<title>__sched_text_start (1,104 samples, 2.63%)</title><rect x="556.2" y="947.0" width="31.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="559.2" y="958.0">__..</text>
</g>
<g>
<title>finish_task_switch (1,089 samples, 2.59%)</title><rect x="556.6" y="931.0" width="30.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="559.6" y="942.0">fi..</text>
</g>
<g>
<title>ret_from_intr (84 samples, 0.20%)</title><rect x="584.8" y="915.0" width="2.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="587.8" y="926.0"></text>
</g>
<g>
<title>do_IRQ (84 samples, 0.20%)</title><rect x="584.8" y="899.0" width="2.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="587.8" y="910.0"></text>
</g>
<g>
<title>irq_exit (84 samples, 0.20%)</title><rect x="584.8" y="883.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="587.8" y="894.0"></text>
</g>
<g>
<title>__softirqentry_text_start (84 samples, 0.20%)</title><rect x="584.8" y="867.0" width="2.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="587.8" y="878.0"></text>
</g>
<g>
<title>net_rx_action (62 samples, 0.15%)</title><rect x="585.4" y="851.0" width="1.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="588.4" y="862.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (62 samples, 0.15%)</title><rect x="585.4" y="835.0" width="1.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="588.4" y="846.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (51 samples, 0.12%)</title><rect x="585.6" y="819.0" width="1.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="588.6" y="830.0"></text>
</g>
<g>
<title>napi_gro_frags (22 samples, 0.05%)</title><rect x="586.0" y="803.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="589.0" y="814.0"></text>
</g>
<g>
<title>dev_gro_receive (22 samples, 0.05%)</title><rect x="586.0" y="787.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="589.0" y="798.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (20 samples, 0.05%)</title><rect x="586.0" y="771.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="589.0" y="782.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (20 samples, 0.05%)</title><rect x="586.0" y="755.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="589.0" y="766.0"></text>
</g>
<g>
<title>ip_rcv (20 samples, 0.05%)</title><rect x="586.0" y="739.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="589.0" y="750.0"></text>
</g>
<g>
<title>ip_local_deliver (19 samples, 0.05%)</title><rect x="586.0" y="723.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="589.0" y="734.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (19 samples, 0.05%)</title><rect x="586.0" y="707.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="589.0" y="718.0"></text>
</g>
<g>
<title>tcp_v4_rcv (19 samples, 0.05%)</title><rect x="586.0" y="691.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="589.0" y="702.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (19 samples, 0.05%)</title><rect x="586.0" y="675.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="589.0" y="686.0"></text>
</g>
<g>
<title>tcp_rcv_established (19 samples, 0.05%)</title><rect x="586.0" y="659.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="589.0" y="670.0"></text>
</g>
<g>
<title>napi_gro_receive (15 samples, 0.04%)</title><rect x="586.6" y="803.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="589.6" y="814.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (15 samples, 0.04%)</title><rect x="586.6" y="787.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="589.6" y="798.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (15 samples, 0.04%)</title><rect x="586.6" y="771.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="589.6" y="782.0"></text>
</g>
<g>
<title>ip_rcv (14 samples, 0.03%)</title><rect x="586.6" y="755.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="589.6" y="766.0"></text>
</g>
<g>
<title>ip_local_deliver (14 samples, 0.03%)</title><rect x="586.6" y="739.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="589.6" y="750.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (14 samples, 0.03%)</title><rect x="586.6" y="723.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="589.6" y="734.0"></text>
</g>
<g>
<title>tcp_v4_rcv (14 samples, 0.03%)</title><rect x="586.6" y="707.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="589.6" y="718.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (13 samples, 0.03%)</title><rect x="586.6" y="691.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="589.6" y="702.0"></text>
</g>
<g>
<title>tcp_rcv_established (12 samples, 0.03%)</title><rect x="586.7" y="675.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="589.7" y="686.0"></text>
</g>
<g>
<title>select_estimate_accuracy (88 samples, 0.21%)</title><rect x="587.4" y="979.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="590.4" y="990.0"></text>
</g>
<g>
<title>ktime_get_ts64 (51 samples, 0.12%)</title><rect x="588.2" y="963.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="591.2" y="974.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (43 samples, 0.10%)</title><rect x="588.4" y="947.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="591.4" y="958.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (38 samples, 0.09%)</title><rect x="588.6" y="931.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="591.6" y="942.0"></text>
</g>
<g>
<title>fput (25 samples, 0.06%)</title><rect x="589.9" y="995.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="592.9" y="1006.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (73 samples, 0.17%)</title><rect x="590.6" y="1011.0" width="2.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="593.6" y="1022.0"></text>
</g>
<g>
<title>__audit_syscall_exit (42 samples, 0.10%)</title><rect x="591.5" y="995.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="594.5" y="1006.0"></text>
</g>
<g>
<title>syscall_trace_enter (29 samples, 0.07%)</title><rect x="592.7" y="1011.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="595.7" y="1022.0"></text>
</g>
<g>
<title>__audit_syscall_entry (15 samples, 0.04%)</title><rect x="593.0" y="995.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="596.0" y="1006.0"></text>
</g>
<g>
<title>ep_send_events_proc (18 samples, 0.04%)</title><rect x="593.5" y="1043.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="596.5" y="1054.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (18 samples, 0.04%)</title><rect x="593.5" y="1027.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="596.5" y="1038.0"></text>
</g>
<g>
<title>ret_from_intr (11 samples, 0.03%)</title><rect x="594.0" y="1043.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="597.0" y="1054.0"></text>
</g>
<g>
<title>do_IRQ (11 samples, 0.03%)</title><rect x="594.0" y="1027.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="597.0" y="1038.0"></text>
</g>
<g>
<title>irq_exit (11 samples, 0.03%)</title><rect x="594.0" y="1011.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="597.0" y="1022.0"></text>
</g>
<g>
<title>__softirqentry_text_start (11 samples, 0.03%)</title><rect x="594.0" y="995.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="597.0" y="1006.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (33 samples, 0.08%)</title><rect x="594.3" y="1059.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="597.3" y="1070.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (21 samples, 0.05%)</title><rect x="595.2" y="1059.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="598.2" y="1070.0"></text>
</g>
<g>
<title>__GI_epoll_pwait (9 samples, 0.02%)</title><rect x="595.9" y="1075.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="598.9" y="1086.0"></text>
</g>
<g>
<title>gettimeofday (16 samples, 0.04%)</title><rect x="596.2" y="1075.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="599.2" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.getDescriptor (49 samples, 0.12%)</title><rect x="596.6" y="1091.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="599.6" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeObject.getInt (24 samples, 0.06%)</title><rect x="597.3" y="1075.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="600.3" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.updateRegistrations (1,233 samples, 2.94%)</title><rect x="598.0" y="1091.0" width="34.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="601.0" y="1102.0">su..</text>
</g>
<g>
<title>java/util/BitSet.get (11 samples, 0.03%)</title><rect x="601.2" y="1075.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="604.2" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollCtl (1,100 samples, 2.62%)</title><rect x="601.7" y="1075.0" width="30.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="604.7" y="1086.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_EPollArrayWrapper_epollCtl (10 samples, 0.02%)</title><rect x="602.2" y="1059.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="605.2" y="1070.0"></text>
</g>
<g>
<title>epoll_ctl (1,070 samples, 2.55%)</title><rect x="602.6" y="1059.0" width="30.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="605.6" y="1070.0">ep..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (907 samples, 2.16%)</title><rect x="606.9" y="1043.0" width="25.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="609.9" y="1054.0">e..</text>
</g>
<g>
<title>do_syscall_64 (907 samples, 2.16%)</title><rect x="606.9" y="1027.0" width="25.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="609.9" y="1038.0">d..</text>
</g>
<g>
<title>sys_epoll_ctl (681 samples, 1.62%)</title><rect x="612.1" y="1011.0" width="19.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="615.1" y="1022.0"></text>
</g>
<g>
<title>__fget_light (97 samples, 0.23%)</title><rect x="615.0" y="995.0" width="2.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="618.0" y="1006.0"></text>
</g>
<g>
<title>__fget (84 samples, 0.20%)</title><rect x="615.4" y="979.0" width="2.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="618.4" y="990.0"></text>
</g>
<g>
<title>__lock_text_start (35 samples, 0.08%)</title><rect x="617.8" y="995.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="620.8" y="1006.0"></text>
</g>
<g>
<title>_copy_from_user (20 samples, 0.05%)</title><rect x="618.8" y="995.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="621.8" y="1006.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (13 samples, 0.03%)</title><rect x="619.0" y="979.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="622.0" y="990.0"></text>
</g>
<g>
<title>ep_remove (144 samples, 0.34%)</title><rect x="619.6" y="995.0" width="4.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="622.6" y="1006.0"></text>
</g>
<g>
<title>__call_rcu.constprop.68 (32 samples, 0.08%)</title><rect x="620.6" y="979.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="623.6" y="990.0"></text>
</g>
<g>
<title>__lock_text_start (18 samples, 0.04%)</title><rect x="621.5" y="979.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="624.5" y="990.0"></text>
</g>
<g>
<title>ep_unregister_pollwait.isra.9 (49 samples, 0.12%)</title><rect x="622.1" y="979.0" width="1.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="625.1" y="990.0"></text>
</g>
<g>
<title>__lock_text_start (21 samples, 0.05%)</title><rect x="622.6" y="963.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="625.6" y="974.0"></text>
</g>
<g>
<title>kmem_cache_free (12 samples, 0.03%)</title><rect x="623.1" y="963.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="626.1" y="974.0"></text>
</g>
<g>
<title>fput (12 samples, 0.03%)</title><rect x="623.7" y="995.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="626.7" y="1006.0"></text>
</g>
<g>
<title>kmem_cache_alloc (20 samples, 0.05%)</title><rect x="624.0" y="995.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="627.0" y="1006.0"></text>
</g>
<g>
<title>__slab_alloc (13 samples, 0.03%)</title><rect x="624.2" y="979.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="627.2" y="990.0"></text>
</g>
<g>
<title>mutex_lock (9 samples, 0.02%)</title><rect x="624.6" y="995.0" width="0.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="627.6" y="1006.0"></text>
</g>
<g>
<title>mutex_unlock (15 samples, 0.04%)</title><rect x="624.8" y="995.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="627.8" y="1006.0"></text>
</g>
<g>
<title>sock_poll (206 samples, 0.49%)</title><rect x="625.4" y="995.0" width="5.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="628.4" y="1006.0"></text>
</g>
<g>
<title>tcp_poll (172 samples, 0.41%)</title><rect x="626.4" y="979.0" width="4.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="629.4" y="990.0"></text>
</g>
<g>
<title>ep_ptable_queue_proc (59 samples, 0.14%)</title><rect x="628.6" y="963.0" width="1.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="631.6" y="974.0"></text>
</g>
<g>
<title>__lock_text_start (37 samples, 0.09%)</title><rect x="628.8" y="947.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="631.8" y="958.0"></text>
</g>
<g>
<title>tcp_stream_memory_free	[ipv6] (29 samples, 0.07%)</title><rect x="630.4" y="963.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="633.4" y="974.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (21 samples, 0.05%)</title><rect x="631.2" y="1011.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="634.2" y="1022.0"></text>
</g>
<g>
<title>__audit_syscall_exit (16 samples, 0.04%)</title><rect x="631.3" y="995.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="634.3" y="1006.0"></text>
</g>
<g>
<title>syscall_trace_enter (22 samples, 0.05%)</title><rect x="631.8" y="1011.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="634.8" y="1022.0"></text>
</g>
<g>
<title>__audit_syscall_entry (15 samples, 0.04%)</title><rect x="632.0" y="995.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="635.0" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (131 samples, 0.31%)</title><rect x="632.6" y="1107.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="635.6" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (14 samples, 0.03%)</title><rect x="635.3" y="1091.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.02%)</title><rect x="635.3" y="1075.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.3" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (12 samples, 0.03%)</title><rect x="636.0" y="1091.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="639.0" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateReadyOps (12 samples, 0.03%)</title><rect x="636.0" y="1075.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="639.0" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (559 samples, 1.33%)</title><rect x="636.3" y="1107.0" width="15.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="639.3" y="1118.0"></text>
</g>
<g>
<title>read (544 samples, 1.30%)</title><rect x="636.7" y="1091.0" width="15.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="639.7" y="1102.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (466 samples, 1.11%)</title><rect x="638.8" y="1075.0" width="13.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="641.8" y="1086.0"></text>
</g>
<g>
<title>do_syscall_64 (466 samples, 1.11%)</title><rect x="638.8" y="1059.0" width="13.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="641.8" y="1070.0"></text>
</g>
<g>
<title>sys_read (348 samples, 0.83%)</title><rect x="641.6" y="1043.0" width="9.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="644.6" y="1054.0"></text>
</g>
<g>
<title>__fdget_pos (20 samples, 0.05%)</title><rect x="642.1" y="1027.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="645.1" y="1038.0"></text>
</g>
<g>
<title>__fget_light (18 samples, 0.04%)</title><rect x="642.2" y="1011.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="645.2" y="1022.0"></text>
</g>
<g>
<title>__fget (11 samples, 0.03%)</title><rect x="642.4" y="995.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="645.4" y="1006.0"></text>
</g>
<g>
<title>vfs_read (302 samples, 0.72%)</title><rect x="642.9" y="1027.0" width="8.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="645.9" y="1038.0"></text>
</g>
<g>
<title>__vfs_read (281 samples, 0.67%)</title><rect x="643.2" y="1011.0" width="7.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="646.2" y="1022.0"></text>
</g>
<g>
<title>pipe_read (265 samples, 0.63%)</title><rect x="643.7" y="995.0" width="7.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="646.7" y="1006.0"></text>
</g>
<g>
<title>__wake_up_common_lock (42 samples, 0.10%)</title><rect x="645.4" y="979.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="648.4" y="990.0"></text>
</g>
<g>
<title>__lock_text_start (41 samples, 0.10%)</title><rect x="645.5" y="963.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="648.5" y="974.0"></text>
</g>
<g>
<title>anon_pipe_buf_release (25 samples, 0.06%)</title><rect x="646.6" y="979.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="649.6" y="990.0"></text>
</g>
<g>
<title>copy_page_to_iter (55 samples, 0.13%)</title><rect x="647.3" y="979.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="650.3" y="990.0"></text>
</g>
<g>
<title>copyout (47 samples, 0.11%)</title><rect x="647.5" y="963.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="650.5" y="974.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (44 samples, 0.10%)</title><rect x="647.6" y="947.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="650.6" y="958.0"></text>
</g>
<g>
<title>mutex_lock (31 samples, 0.07%)</title><rect x="649.0" y="979.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="652.0" y="990.0"></text>
</g>
<g>
<title>mutex_unlock (14 samples, 0.03%)</title><rect x="649.8" y="979.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="652.8" y="990.0"></text>
</g>
<g>
<title>touch_atime (30 samples, 0.07%)</title><rect x="650.3" y="979.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="653.3" y="990.0"></text>
</g>
<g>
<title>__atime_needs_update (22 samples, 0.05%)</title><rect x="650.4" y="963.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="653.4" y="974.0"></text>
</g>
<g>
<title>syscall_trace_enter (13 samples, 0.03%)</title><rect x="651.6" y="1043.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="654.6" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (158 samples, 0.38%)</title><rect x="652.0" y="1107.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="655.0" y="1118.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (24 samples, 0.06%)</title><rect x="655.6" y="1091.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="658.6" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/executor/HazelcastManagedThread.run (61 samples, 0.15%)</title><rect x="656.7" y="1187.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="659.7" y="1198.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/executor/HazelcastManagedThread.executeRun (61 samples, 0.15%)</title><rect x="656.7" y="1171.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="659.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/Thread.run (61 samples, 0.15%)</title><rect x="656.7" y="1155.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="659.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (61 samples, 0.15%)</title><rect x="656.7" y="1139.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="659.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (61 samples, 0.15%)</title><rect x="656.7" y="1123.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="659.7" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/executor/CachedExecutorServiceDelegate$Worker.run (41 samples, 0.10%)</title><rect x="656.7" y="1107.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="659.7" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/executionservice/impl/DelegateAndSkipOnConcurrentExecutionDecorator$DelegateDecorator.run (36 samples, 0.09%)</title><rect x="656.8" y="1091.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="659.8" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsService$$Lambda$972/1495445111.run (35 samples, 0.08%)</title><rect x="656.8" y="1075.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="659.8" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsService.collectMetrics (35 samples, 0.08%)</title><rect x="656.8" y="1059.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="659.8" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsService.collectMetrics (30 samples, 0.07%)</title><rect x="656.8" y="1043.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="659.8" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsRegistryImpl.collect (30 samples, 0.07%)</title><rect x="656.8" y="1027.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="659.8" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsCollectionCycle.collectDynamicMetrics (23 samples, 0.05%)</title><rect x="656.8" y="1011.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="659.8" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEndpointManagerImpl.provideDynamicMetrics (12 samples, 0.03%)</title><rect x="656.8" y="995.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="659.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.forEach (12 samples, 0.03%)</title><rect x="656.8" y="979.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="659.8" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEndpointManagerImpl$$Lambda$995/219795846.accept (12 samples, 0.03%)</title><rect x="656.8" y="963.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="659.8" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEndpointManagerImpl.lambda$provideDynamicMetrics$0 (12 samples, 0.03%)</title><rect x="656.8" y="947.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="659.8" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEndpointImpl.provideDynamicMetrics (12 samples, 0.03%)</title><rect x="656.8" y="931.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="659.8" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsCompressor.extractMetrics (12 samples, 0.03%)</title><rect x="656.8" y="915.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="659.8" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsCompressor.extractMetrics (12 samples, 0.03%)</title><rect x="656.8" y="899.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="659.8" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsCompressor$MetricsDecompressor.access$100 (12 samples, 0.03%)</title><rect x="656.8" y="883.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="659.8" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsCompressor$MetricsDecompressor.extractMetrics (12 samples, 0.03%)</title><rect x="656.8" y="867.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="659.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 0.04%)</title><rect x="658.0" y="1107.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="661.0" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/simulator/worker/Worker.main (121 samples, 0.29%)</title><rect x="658.9" y="1187.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="661.9" y="1198.0"></text>
</g>
<g>
<title>com/hazelcast/simulator/worker/Worker.start (115 samples, 0.27%)</title><rect x="659.0" y="1171.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="662.0" y="1182.0"></text>
</g>
<g>
<title>com/hazelcast/simulator/hazelcast4/Hazelcast4Driver.startVendorInstance (106 samples, 0.25%)</title><rect x="659.0" y="1155.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="662.0" y="1166.0"></text>
</g>
<g>
<title>com/hazelcast/config/XmlConfigBuilder.build (19 samples, 0.05%)</title><rect x="659.1" y="1139.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="662.1" y="1150.0"></text>
</g>
<g>
<title>com/hazelcast/config/XmlConfigBuilder.build (16 samples, 0.04%)</title><rect x="659.1" y="1123.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="662.1" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/config/XmlConfigBuilder.parseAndBuildConfig (16 samples, 0.04%)</title><rect x="659.1" y="1107.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="662.1" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/config/AbstractXmlConfigHelper.schemaValidation (10 samples, 0.02%)</title><rect x="659.2" y="1091.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="662.2" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/core/Hazelcast.newHazelcastInstance (84 samples, 0.20%)</title><rect x="659.6" y="1139.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="662.6" y="1150.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/HazelcastInstanceFactory.newHazelcastInstance (84 samples, 0.20%)</title><rect x="659.6" y="1123.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="662.6" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/HazelcastInstanceFactory.newHazelcastInstance (84 samples, 0.20%)</title><rect x="659.6" y="1107.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="662.6" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/HazelcastInstanceFactory.constructHazelcastInstance (84 samples, 0.20%)</title><rect x="659.6" y="1091.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="662.6" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/HazelcastInstanceImpl.&lt;init&gt; (82 samples, 0.20%)</title><rect x="659.6" y="1075.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="662.6" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/HazelcastInstanceImpl.createNode (48 samples, 0.11%)</title><rect x="659.7" y="1059.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="662.7" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/Node.&lt;init&gt; (48 samples, 0.11%)</title><rect x="659.7" y="1043.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="662.7" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/EnterpriseNodeExtension.createSerializationService (14 samples, 0.03%)</title><rect x="660.1" y="1027.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="663.1" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceBuilder.build (14 samples, 0.03%)</title><rect x="660.1" y="1011.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="663.1" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceBuilder.build (14 samples, 0.03%)</title><rect x="660.1" y="995.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="663.1" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/DefaultSerializationServiceBuilder.build (14 samples, 0.03%)</title><rect x="660.1" y="979.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="663.1" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceBuilder.createSerializationService (13 samples, 0.03%)</title><rect x="660.2" y="963.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="663.2" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceBuilder.createSerializationService (13 samples, 0.03%)</title><rect x="660.2" y="947.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="663.2" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1$Builder.build (13 samples, 0.03%)</title><rect x="660.2" y="931.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="663.2" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.&lt;init&gt; (13 samples, 0.03%)</title><rect x="660.2" y="915.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="663.2" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/SerializationServiceV1.&lt;init&gt; (12 samples, 0.03%)</title><rect x="660.2" y="899.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="663.2" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/DataSerializableSerializer.&lt;init&gt; (10 samples, 0.02%)</title><rect x="660.2" y="883.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="663.2" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/Node.start (33 samples, 0.08%)</title><rect x="661.0" y="1059.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="664.0" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.start (28 samples, 0.07%)</title><rect x="661.2" y="1043.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="664.2" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.start (25 samples, 0.06%)</title><rect x="661.2" y="1027.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="664.2" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.registerServices (17 samples, 0.04%)</title><rect x="661.5" y="1011.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="664.5" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.registerDefaultServices (17 samples, 0.04%)</title><rect x="661.5" y="995.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="664.5" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/simulator/protocol/Server.start (9 samples, 0.02%)</title><rect x="662.0" y="1155.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="665.0" y="1166.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationThread.run (18,153 samples, 43.23%)</title><rect x="662.3" y="1187.0" width="510.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="665.3" y="1198.0">com/hazelcast/spi/impl/operationexecutor/impl/OperationThread.run</text>
</g>
<g>
<title>com/hazelcast/instance/impl/EnterpriseNodeExtension.onThreadStop (159 samples, 0.38%)</title><rect x="662.8" y="1171.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="665.8" y="1182.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/EnterpriseNodeExtension.deregisterThreadFromPoolingMemoryManager (159 samples, 0.38%)</title><rect x="662.8" y="1155.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="665.8" y="1166.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.deregisterThread (159 samples, 0.38%)</title><rect x="662.8" y="1139.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="665.8" y="1150.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.destroyPool (159 samples, 0.38%)</title><rect x="662.8" y="1123.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="665.8" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.dispose (159 samples, 0.38%)</title><rect x="662.8" y="1107.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="665.8" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.disposePageAllocations (159 samples, 0.38%)</title><rect x="662.8" y="1091.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="665.8" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.freePage (158 samples, 0.38%)</title><rect x="662.8" y="1075.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="665.8" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/StandardMemoryManager.free (158 samples, 0.38%)</title><rect x="662.8" y="1059.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="665.8" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/UnsafeMalloc.free (158 samples, 0.38%)</title><rect x="662.8" y="1043.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="665.8" y="1054.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.freeMemory (158 samples, 0.38%)</title><rect x="662.8" y="1027.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="665.8" y="1038.0"></text>
</g>
<g>
<title>__munmap (158 samples, 0.38%)</title><rect x="662.8" y="1011.0" width="4.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="665.8" y="1022.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (156 samples, 0.37%)</title><rect x="662.8" y="995.0" width="4.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="665.8" y="1006.0"></text>
</g>
<g>
<title>do_syscall_64 (156 samples, 0.37%)</title><rect x="662.8" y="979.0" width="4.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="665.8" y="990.0"></text>
</g>
<g>
<title>sys_munmap (156 samples, 0.37%)</title><rect x="662.8" y="963.0" width="4.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="665.8" y="974.0"></text>
</g>
<g>
<title>vm_munmap (156 samples, 0.37%)</title><rect x="662.8" y="947.0" width="4.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="665.8" y="958.0"></text>
</g>
<g>
<title>do_munmap (24 samples, 0.06%)</title><rect x="662.8" y="931.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="665.8" y="942.0"></text>
</g>
<g>
<title>unmap_region (22 samples, 0.05%)</title><rect x="662.9" y="915.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="665.9" y="926.0"></text>
</g>
<g>
<title>tlb_finish_mmu (20 samples, 0.05%)</title><rect x="662.9" y="899.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="665.9" y="910.0"></text>
</g>
<g>
<title>arch_tlb_finish_mmu (20 samples, 0.05%)</title><rect x="662.9" y="883.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="665.9" y="894.0"></text>
</g>
<g>
<title>tlb_flush_mmu_free (20 samples, 0.05%)</title><rect x="662.9" y="867.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="665.9" y="878.0"></text>
</g>
<g>
<title>release_pages (18 samples, 0.04%)</title><rect x="663.0" y="851.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="666.0" y="862.0"></text>
</g>
<g>
<title>free_hot_cold_page_list (9 samples, 0.02%)</title><rect x="663.2" y="835.0" width="0.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="666.2" y="846.0"></text>
</g>
<g>
<title>free_hot_cold_page (9 samples, 0.02%)</title><rect x="663.2" y="819.0" width="0.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="666.2" y="830.0"></text>
</g>
<g>
<title>down_write_killable (132 samples, 0.31%)</title><rect x="663.5" y="931.0" width="3.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="666.5" y="942.0"></text>
</g>
<g>
<title>call_rwsem_down_write_failed_killable (132 samples, 0.31%)</title><rect x="663.5" y="915.0" width="3.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="666.5" y="926.0"></text>
</g>
<g>
<title>rwsem_down_write_failed_killable (132 samples, 0.31%)</title><rect x="663.5" y="899.0" width="3.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="666.5" y="910.0"></text>
</g>
<g>
<title>osq_lock (114 samples, 0.27%)</title><rect x="663.5" y="883.0" width="3.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="666.5" y="894.0"></text>
</g>
<g>
<title>rwsem_spin_on_owner (17 samples, 0.04%)</title><rect x="666.7" y="883.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="669.7" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationQueueImpl.take (3,626 samples, 8.63%)</title><rect x="667.3" y="1171.0" width="101.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="670.3" y="1182.0">com/hazelcas..</text>
</g>
<g>
<title>com/hazelcast/internal/util/concurrent/MPSCQueue.take (3,614 samples, 8.61%)</title><rect x="667.5" y="1155.0" width="101.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="670.5" y="1166.0">com/hazelcas..</text>
</g>
<g>
<title>com/hazelcast/internal/util/concurrent/MPSCQueue.next (10 samples, 0.02%)</title><rect x="667.5" y="1139.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="670.5" y="1150.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/concurrent/MPSCQueue.takeAll (3,603 samples, 8.58%)</title><rect x="667.8" y="1139.0" width="101.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="670.8" y="1150.0">com/hazelcas..</text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (17 samples, 0.04%)</title><rect x="670.7" y="1123.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="673.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.compareAndSet (33 samples, 0.08%)</title><rect x="671.1" y="1123.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="674.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3,441 samples, 8.19%)</title><rect x="672.1" y="1123.0" width="96.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="675.1" y="1134.0">java/util/c..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (3,441 samples, 8.19%)</title><rect x="672.1" y="1107.0" width="96.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="675.1" y="1118.0">sun/misc/Un..</text>
</g>
<g>
<title>JavaThread::current_park_blocker() (17 samples, 0.04%)</title><rect x="673.2" y="1091.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="676.2" y="1102.0"></text>
</g>
<g>
<title>Unsafe_Park (720 samples, 1.71%)</title><rect x="674.2" y="1091.0" width="20.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="677.2" y="1102.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (18 samples, 0.04%)</title><rect x="675.1" y="1075.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="678.1" y="1086.0"></text>
</g>
<g>
<title>JfrBackend::time() (54 samples, 0.13%)</title><rect x="675.8" y="1075.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="678.8" y="1086.0"></text>
</g>
<g>
<title>os::ft_or_os_elapsed_counter() (52 samples, 0.12%)</title><rect x="675.8" y="1059.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="678.8" y="1070.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (130 samples, 0.31%)</title><rect x="677.3" y="1075.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="680.3" y="1086.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (56 samples, 0.13%)</title><rect x="678.3" y="1059.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="681.3" y="1070.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (19 samples, 0.05%)</title><rect x="678.6" y="1043.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="681.6" y="1054.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (18 samples, 0.04%)</title><rect x="678.7" y="1027.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="681.7" y="1038.0"></text>
</g>
<g>
<title>Monitor::unlock() (10 samples, 0.02%)</title><rect x="679.2" y="1043.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="682.2" y="1054.0"></text>
</g>
<g>
<title>__GI___pthread_getspecific (15 samples, 0.04%)</title><rect x="679.5" y="1043.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="682.5" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (17 samples, 0.04%)</title><rect x="680.4" y="1059.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="683.4" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (10 samples, 0.02%)</title><rect x="681.2" y="1075.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="684.2" y="1086.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (11 samples, 0.03%)</title><rect x="681.6" y="1075.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="684.6" y="1086.0"></text>
</g>
<g>
<title>__lll_unlock_wake (346 samples, 0.82%)</title><rect x="681.9" y="1075.0" width="9.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="684.9" y="1086.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (269 samples, 0.64%)</title><rect x="684.0" y="1059.0" width="7.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="687.0" y="1070.0"></text>
</g>
<g>
<title>do_syscall_64 (269 samples, 0.64%)</title><rect x="684.0" y="1043.0" width="7.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="687.0" y="1054.0"></text>
</g>
<g>
<title>sys_futex (125 samples, 0.30%)</title><rect x="687.1" y="1027.0" width="3.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="690.1" y="1038.0"></text>
</g>
<g>
<title>do_futex (110 samples, 0.26%)</title><rect x="687.4" y="1011.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="690.4" y="1022.0"></text>
</g>
<g>
<title>futex_wake (93 samples, 0.22%)</title><rect x="687.9" y="995.0" width="2.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="690.9" y="1006.0"></text>
</g>
<g>
<title>get_futex_key (60 samples, 0.14%)</title><rect x="688.6" y="979.0" width="1.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="691.6" y="990.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.10 (39 samples, 0.09%)</title><rect x="689.1" y="963.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="692.1" y="974.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (13 samples, 0.03%)</title><rect x="690.6" y="1027.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="693.6" y="1038.0"></text>
</g>
<g>
<title>__audit_syscall_exit (12 samples, 0.03%)</title><rect x="690.6" y="1011.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="693.6" y="1022.0"></text>
</g>
<g>
<title>syscall_trace_enter (22 samples, 0.05%)</title><rect x="690.9" y="1027.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="693.9" y="1038.0"></text>
</g>
<g>
<title>__audit_syscall_entry (12 samples, 0.03%)</title><rect x="691.2" y="1011.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="694.2" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (25 samples, 0.06%)</title><rect x="691.8" y="1075.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="694.8" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::park_blocker(oopDesc*) (16 samples, 0.04%)</title><rect x="692.7" y="1075.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="695.7" y="1086.0"></text>
</g>
<g>
<title>os::ft_or_os_elapsed_counter() (14 samples, 0.03%)</title><rect x="693.2" y="1075.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="696.2" y="1086.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (20 samples, 0.05%)</title><rect x="693.8" y="1075.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="696.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.04%)</title><rect x="694.4" y="1091.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="697.4" y="1102.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (16 samples, 0.04%)</title><rect x="694.4" y="1075.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="697.4" y="1086.0"></text>
</g>
<g>
<title>__condvar_confirm_wakeup (12 samples, 0.03%)</title><rect x="694.9" y="1091.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="697.9" y="1102.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (67 samples, 0.16%)</title><rect x="695.2" y="1091.0" width="1.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="698.2" y="1102.0"></text>
</g>
<g>
<title>__lll_lock_wait (38 samples, 0.09%)</title><rect x="697.1" y="1091.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="700.1" y="1102.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (27 samples, 0.06%)</title><rect x="697.4" y="1075.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="700.4" y="1086.0"></text>
</g>
<g>
<title>do_syscall_64 (27 samples, 0.06%)</title><rect x="697.4" y="1059.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="700.4" y="1070.0"></text>
</g>
<g>
<title>sys_futex (23 samples, 0.05%)</title><rect x="697.5" y="1043.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="700.5" y="1054.0"></text>
</g>
<g>
<title>do_futex (23 samples, 0.05%)</title><rect x="697.5" y="1027.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="700.5" y="1038.0"></text>
</g>
<g>
<title>futex_wait (20 samples, 0.05%)</title><rect x="697.6" y="1011.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="700.6" y="1022.0"></text>
</g>
<g>
<title>futex_wait_queue_me (16 samples, 0.04%)</title><rect x="697.6" y="995.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="700.6" y="1006.0"></text>
</g>
<g>
<title>schedule (14 samples, 0.03%)</title><rect x="697.7" y="979.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="700.7" y="990.0"></text>
</g>
<g>
<title>__sched_text_start (14 samples, 0.03%)</title><rect x="697.7" y="963.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="700.7" y="974.0"></text>
</g>
<g>
<title>finish_task_switch (14 samples, 0.03%)</title><rect x="697.7" y="947.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="700.7" y="958.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (57 samples, 0.14%)</title><rect x="698.3" y="1091.0" width="1.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="701.3" y="1102.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (9 samples, 0.02%)</title><rect x="699.9" y="1091.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="702.9" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (20 samples, 0.05%)</title><rect x="700.1" y="1091.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="703.1" y="1102.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (2,406 samples, 5.73%)</title><rect x="701.1" y="1091.0" width="67.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="704.1" y="1102.0">pthread..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,888 samples, 4.50%)</title><rect x="715.5" y="1075.0" width="53.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="718.5" y="1086.0">entry..</text>
</g>
<g>
<title>do_syscall_64 (1,888 samples, 4.50%)</title><rect x="715.5" y="1059.0" width="53.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="718.5" y="1070.0">do_sy..</text>
</g>
<g>
<title>sys_futex (1,674 samples, 3.99%)</title><rect x="718.6" y="1043.0" width="47.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="721.6" y="1054.0">sys_..</text>
</g>
<g>
<title>do_futex (1,653 samples, 3.94%)</title><rect x="719.2" y="1027.0" width="46.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="722.2" y="1038.0">do_f..</text>
</g>
<g>
<title>futex_wait (1,632 samples, 3.89%)</title><rect x="719.7" y="1011.0" width="45.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="722.7" y="1022.0">fute..</text>
</g>
<g>
<title>futex_wait_queue_me (1,397 samples, 3.33%)</title><rect x="722.3" y="995.0" width="39.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="725.3" y="1006.0">fut..</text>
</g>
<g>
<title>schedule (1,340 samples, 3.19%)</title><rect x="723.9" y="979.0" width="37.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="726.9" y="990.0">sch..</text>
</g>
<g>
<title>__sched_text_start (1,330 samples, 3.17%)</title><rect x="724.2" y="963.0" width="37.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="727.2" y="974.0">__s..</text>
</g>
<g>
<title>finish_task_switch (1,289 samples, 3.07%)</title><rect x="725.3" y="947.0" width="36.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="728.3" y="958.0">fin..</text>
</g>
<g>
<title>ret_from_intr (49 samples, 0.12%)</title><rect x="760.1" y="931.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="763.1" y="942.0"></text>
</g>
<g>
<title>do_IRQ (49 samples, 0.12%)</title><rect x="760.1" y="915.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="763.1" y="926.0"></text>
</g>
<g>
<title>irq_exit (49 samples, 0.12%)</title><rect x="760.1" y="899.0" width="1.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="763.1" y="910.0"></text>
</g>
<g>
<title>__softirqentry_text_start (49 samples, 0.12%)</title><rect x="760.1" y="883.0" width="1.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="763.1" y="894.0"></text>
</g>
<g>
<title>net_rx_action (30 samples, 0.07%)</title><rect x="760.5" y="867.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="763.5" y="878.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (29 samples, 0.07%)</title><rect x="760.5" y="851.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="763.5" y="862.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (21 samples, 0.05%)</title><rect x="760.7" y="835.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="763.7" y="846.0"></text>
</g>
<g>
<title>napi_gro_receive (10 samples, 0.02%)</title><rect x="761.0" y="819.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="764.0" y="830.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (10 samples, 0.02%)</title><rect x="761.0" y="803.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="764.0" y="814.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (10 samples, 0.02%)</title><rect x="761.0" y="787.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="764.0" y="798.0"></text>
</g>
<g>
<title>ip_rcv (10 samples, 0.02%)</title><rect x="761.0" y="771.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="764.0" y="782.0"></text>
</g>
<g>
<title>ip_local_deliver (10 samples, 0.02%)</title><rect x="761.0" y="755.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="764.0" y="766.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (10 samples, 0.02%)</title><rect x="761.0" y="739.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="764.0" y="750.0"></text>
</g>
<g>
<title>tcp_v4_rcv (9 samples, 0.02%)</title><rect x="761.1" y="723.0" width="0.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="764.1" y="734.0"></text>
</g>
<g>
<title>futex_wait_setup (143 samples, 0.34%)</title><rect x="761.6" y="995.0" width="4.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="764.6" y="1006.0"></text>
</g>
<g>
<title>get_futex_key (20 samples, 0.05%)</title><rect x="763.9" y="979.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="766.9" y="990.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.10 (12 samples, 0.03%)</title><rect x="764.1" y="963.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="767.1" y="974.0"></text>
</g>
<g>
<title>get_futex_value_locked (29 samples, 0.07%)</title><rect x="764.4" y="979.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="767.4" y="990.0"></text>
</g>
<g>
<title>hash_futex (10 samples, 0.02%)</title><rect x="765.2" y="979.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="768.2" y="990.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (96 samples, 0.23%)</title><rect x="765.6" y="1043.0" width="2.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="768.6" y="1054.0"></text>
</g>
<g>
<title>__audit_syscall_exit (56 samples, 0.13%)</title><rect x="766.7" y="1027.0" width="1.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="769.7" y="1038.0"></text>
</g>
<g>
<title>syscall_trace_enter (9 samples, 0.02%)</title><rect x="768.3" y="1043.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="771.3" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationThread.process (14,351 samples, 34.17%)</title><rect x="769.2" y="1171.0" width="403.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="772.2" y="1182.0">com/hazelcast/spi/impl/operationexecutor/impl/Operation..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationThread.process (14,275 samples, 33.99%)</title><rect x="771.3" y="1155.0" width="401.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="774.3" y="1166.0">com/hazelcast/spi/impl/operationexecutor/impl/Operation..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractPartitionMessageTask.getPartitionId (57 samples, 0.14%)</title><rect x="771.7" y="1139.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="774.7" y="1150.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessage.getPartitionId (57 samples, 0.14%)</title><rect x="771.7" y="1123.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="774.7" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readIntL (37 samples, 0.09%)</title><rect x="772.3" y="1107.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="775.3" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readIntL (37 samples, 0.09%)</title><rect x="772.3" y="1091.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="775.3" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (37 samples, 0.09%)</title><rect x="772.3" y="1075.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="775.3" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (37 samples, 0.09%)</title><rect x="772.3" y="1059.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="775.3" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.run (14,192 samples, 33.80%)</title><rect x="773.6" y="1139.0" width="398.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="776.6" y="1150.0">com/hazelcast/spi/impl/operationservice/impl/Operation..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.run (8,922 samples, 21.25%)</title><rect x="774.4" y="1123.0" width="250.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="777.4" y="1134.0">com/hazelcast/client/impl/protoco..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.initializeAndProcessMessage (8,911 samples, 21.22%)</title><rect x="774.7" y="1107.0" width="250.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="777.7" y="1118.0">com/hazelcast/client/impl/protoco..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask.processMessage (8,754 samples, 20.85%)</title><rect x="775.1" y="1091.0" width="246.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="778.1" y="1102.0">com/hazelcast/client/impl/protoco..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractPartitionMessageTask.processInternal (7,428 samples, 17.69%)</title><rect x="775.5" y="1075.0" width="208.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="778.5" y="1086.0">com/hazelcast/client/impl/p..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessage.getCorrelationId (96 samples, 0.23%)</title><rect x="776.6" y="1059.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="779.6" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readLongL (95 samples, 0.23%)</title><rect x="776.6" y="1043.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="779.6" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readLongL (77 samples, 0.18%)</title><rect x="777.1" y="1027.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="780.1" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (55 samples, 0.13%)</title><rect x="777.7" y="1011.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="780.7" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (14 samples, 0.03%)</title><rect x="778.8" y="995.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="781.8" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractPartitionMessageTask.getPartitionId (56 samples, 0.13%)</title><rect x="779.3" y="1059.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="782.3" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessage.getPartitionId (55 samples, 0.13%)</title><rect x="779.3" y="1043.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="782.3" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readIntL (51 samples, 0.12%)</title><rect x="779.4" y="1027.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="782.4" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readIntL (51 samples, 0.12%)</title><rect x="779.4" y="1011.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="782.4" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapGetMessageTask.prepareOperation (42 samples, 0.10%)</title><rect x="780.9" y="1059.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="783.9" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/AbstractMapPartitionMessageTask.getMapOperationProvider (34 samples, 0.08%)</title><rect x="781.0" y="1043.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="784.0" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.getService (29 samples, 0.07%)</title><rect x="781.1" y="1027.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="784.1" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.getService (29 samples, 0.07%)</title><rect x="781.1" y="1011.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="784.1" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getService (29 samples, 0.07%)</title><rect x="781.1" y="995.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="784.1" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getServiceInfo (28 samples, 0.07%)</title><rect x="781.1" y="979.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="784.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (23 samples, 0.05%)</title><rect x="781.3" y="963.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="784.3" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapPutMessageTask.prepareOperation (39 samples, 0.09%)</title><rect x="782.1" y="1059.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="785.1" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapPutMessageTask.newPutOperation (36 samples, 0.09%)</title><rect x="782.2" y="1043.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="785.2" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/AbstractMapPartitionMessageTask.getMapOperationProvider (32 samples, 0.08%)</title><rect x="782.2" y="1027.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="785.2" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.getService (24 samples, 0.06%)</title><rect x="782.3" y="1011.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="785.3" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.getService (22 samples, 0.05%)</title><rect x="782.4" y="995.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="785.4" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getService (22 samples, 0.05%)</title><rect x="782.4" y="979.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="785.4" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getServiceInfo (22 samples, 0.05%)</title><rect x="782.4" y="963.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="785.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (21 samples, 0.05%)</title><rect x="782.4" y="947.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="785.4" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodType$ConcurrentWeakInternSet$WeakEntry.equals (9 samples, 0.02%)</title><rect x="782.6" y="931.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="785.6" y="942.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (9 samples, 0.02%)</title><rect x="782.6" y="915.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="785.6" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapSetMessageTask.prepareOperation (38 samples, 0.09%)</title><rect x="783.2" y="1059.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="786.2" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/AbstractMapPartitionMessageTask.getMapOperationProvider (33 samples, 0.08%)</title><rect x="783.2" y="1043.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="786.2" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.getService (16 samples, 0.04%)</title><rect x="783.6" y="1027.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="786.6" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.getService (10 samples, 0.02%)</title><rect x="783.8" y="1011.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="786.8" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.setCallerUuid (20 samples, 0.05%)</title><rect x="784.4" y="1059.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="787.4" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/InvocationBuilderImpl.invoke (6,997 samples, 16.66%)</title><rect x="785.2" y="1059.0" width="196.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="788.2" y="1070.0">com/hazelcast/spi/impl/ope..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.setReplicaIndex (15 samples, 0.04%)</title><rect x="785.7" y="1043.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="788.7" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.setFlag (13 samples, 0.03%)</title><rect x="785.8" y="1027.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="788.8" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.invoke (6,937 samples, 16.52%)</title><rect x="786.2" y="1043.0" width="194.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="789.2" y="1054.0">com/hazelcast/spi/impl/op..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.invoke0 (6,937 samples, 16.52%)</title><rect x="786.2" y="1027.0" width="194.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="789.2" y="1038.0">com/hazelcast/spi/impl/op..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.doInvoke (6,911 samples, 16.46%)</title><rect x="786.8" y="1011.0" width="194.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="789.8" y="1022.0">com/hazelcast/spi/impl/op..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.doInvokeLocal (6,668 samples, 15.88%)</title><rect x="787.0" y="995.0" width="187.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="790.0" y="1006.0">com/hazelcast/spi/impl/o..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.runOrExecute (6,667 samples, 15.88%)</title><rect x="787.0" y="979.0" width="187.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="790.0" y="990.0">com/hazelcast/spi/impl/o..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.run (6,663 samples, 15.87%)</title><rect x="787.1" y="963.0" width="187.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="790.1" y="974.0">com/hazelcast/spi/impl/o..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.run (6,661 samples, 15.86%)</title><rect x="787.2" y="947.0" width="187.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="790.2" y="958.0">com/hazelcast/spi/impl/o..</text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.beforeRun (203 samples, 0.48%)</title><rect x="787.9" y="931.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="790.9" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.getRecordStoreOrNull (172 samples, 0.41%)</title><rect x="788.2" y="915.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="791.2" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.getRecordStore (161 samples, 0.38%)</title><rect x="788.5" y="899.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="791.5" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutSynchronized (131 samples, 0.31%)</title><rect x="789.0" y="883.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="792.0" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer$$Lambda$976/1409342262.createNew (20 samples, 0.05%)</title><rect x="789.4" y="867.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="792.4" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.lambda$new$0 (20 samples, 0.05%)</title><rect x="789.4" y="851.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="792.4" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.createRecordStore (20 samples, 0.05%)</title><rect x="789.4" y="835.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="792.4" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/EnterpriseRecordStore.init (12 samples, 0.03%)</title><rect x="789.6" y="819.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="792.6" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.init (12 samples, 0.03%)</title><rect x="789.6" y="803.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="792.6" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.init (12 samples, 0.03%)</title><rect x="789.6" y="787.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="792.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (96 samples, 0.23%)</title><rect x="790.0" y="867.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="793.0" y="878.0"></text>
</g>
<g>
<title>java/lang/String.equals (14 samples, 0.03%)</title><rect x="791.6" y="851.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="794.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (15 samples, 0.04%)</title><rect x="792.1" y="851.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="795.1" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.getService (20 samples, 0.05%)</title><rect x="793.0" y="915.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="796.0" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.getService (16 samples, 0.04%)</title><rect x="793.1" y="899.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="796.1" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getService (16 samples, 0.04%)</title><rect x="793.1" y="883.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="796.1" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getServiceInfo (16 samples, 0.04%)</title><rect x="793.1" y="867.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="796.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (15 samples, 0.04%)</title><rect x="793.1" y="851.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="796.1" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.call (6,344 samples, 15.11%)</title><rect x="793.6" y="931.0" width="178.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="796.6" y="942.0">com/hazelcast/spi/impl/..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.call (3,458 samples, 8.23%)</title><rect x="793.8" y="915.0" width="97.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="796.8" y="926.0">com/hazelca..</text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/GetOperation.shouldWait (44 samples, 0.10%)</title><rect x="794.3" y="899.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="797.3" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.isTransactionallyLocked (44 samples, 0.10%)</title><rect x="794.3" y="883.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="797.3" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/locksupport/LockStoreProxy.shouldBlockReads (38 samples, 0.09%)</title><rect x="794.4" y="867.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="797.4" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/locksupport/LockStoreImpl.shouldBlockReads (9 samples, 0.02%)</title><rect x="794.4" y="851.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="797.4" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/locksupport/LockStoreProxy.getLockStoreOrNull (29 samples, 0.07%)</title><rect x="794.7" y="851.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="797.7" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/locksupport/LockStoreContainer.getLockStore (28 samples, 0.07%)</title><rect x="794.7" y="835.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="797.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (17 samples, 0.04%)</title><rect x="795.0" y="819.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="798.0" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/LockAwareOperation.shouldWait (56 samples, 0.13%)</title><rect x="795.5" y="899.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="798.5" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.canAcquireLock (55 samples, 0.13%)</title><rect x="795.6" y="883.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="798.6" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/locksupport/LockStoreProxy.canAcquireLock (53 samples, 0.13%)</title><rect x="795.6" y="867.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="798.6" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/locksupport/LockStoreImpl.canAcquireLock (16 samples, 0.04%)</title><rect x="795.6" y="851.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="798.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 0.03%)</title><rect x="795.8" y="835.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="798.8" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/locksupport/LockStoreProxy.getLockStoreOrNull (37 samples, 0.09%)</title><rect x="796.1" y="851.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="799.1" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/locksupport/LockStoreContainer.getLockStore (34 samples, 0.08%)</title><rect x="796.2" y="835.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="799.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (24 samples, 0.06%)</title><rect x="796.4" y="819.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="799.4" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.run (3,295 samples, 7.85%)</title><rect x="797.1" y="899.0" width="92.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="800.1" y="910.0">com/hazelca..</text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/GetOperation.runInternal (1,165 samples, 2.77%)</title><rect x="797.1" y="883.0" width="32.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="800.1" y="894.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/EnterpriseMapServiceContextImpl.toData (848 samples, 2.02%)</title><rect x="797.2" y="867.0" width="23.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="800.2" y="878.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toData (848 samples, 2.02%)</title><rect x="797.2" y="851.0" width="23.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="800.2" y="862.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toDataInternal (845 samples, 2.01%)</title><rect x="797.2" y="835.0" width="23.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="800.2" y="846.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertData (845 samples, 2.01%)</title><rect x="797.2" y="819.0" width="23.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="800.2" y="830.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (844 samples, 2.01%)</title><rect x="797.2" y="803.0" width="23.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="800.2" y="814.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (79 samples, 0.19%)</title><rect x="797.2" y="787.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="800.2" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (76 samples, 0.18%)</title><rect x="797.3" y="771.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="800.3" y="782.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab_event(KlassHandle, unsigned long) (12 samples, 0.03%)</title><rect x="797.4" y="755.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="800.4" y="766.0"></text>
</g>
<g>
<title>JfrTraceEvent&lt;EventAllocObjectOutsideTLAB&gt;::writeEvent() (12 samples, 0.03%)</title><rect x="797.4" y="739.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="800.4" y="750.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::record(int) (11 samples, 0.03%)</title><rect x="797.4" y="723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="800.4" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (61 samples, 0.15%)</title><rect x="797.8" y="755.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="800.8" y="766.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (60 samples, 0.14%)</title><rect x="797.8" y="739.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="800.8" y="750.0"></text>
</g>
<g>
<title>JfrTraceEvent&lt;EventAllocObjectInNewTLAB&gt;::writeEvent() (60 samples, 0.14%)</title><rect x="797.8" y="723.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="800.8" y="734.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::record(int) (57 samples, 0.14%)</title><rect x="797.8" y="707.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="800.8" y="718.0"></text>
</g>
<g>
<title>JfrStackTrace::record(JavaThread*, int) (22 samples, 0.05%)</title><rect x="797.8" y="691.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="800.8" y="702.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::add(JfrStackTrace const&amp;) (32 samples, 0.08%)</title><rect x="798.5" y="691.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="801.5" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryData.toByteArray (763 samples, 1.82%)</title><rect x="799.5" y="787.0" width="21.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="802.5" y="798.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.copyTo (452 samples, 1.08%)</title><rect x="808.0" y="771.0" width="12.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="811.0" y="782.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (421 samples, 1.00%)</title><rect x="808.7" y="755.0" width="11.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="811.7" y="766.0"></text>
</g>
<g>
<title>ret_from_intr (9 samples, 0.02%)</title><rect x="820.3" y="739.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="823.3" y="750.0"></text>
</g>
<g>
<title>do_IRQ (9 samples, 0.02%)</title><rect x="820.3" y="723.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="823.3" y="734.0"></text>
</g>
<g>
<title>irq_exit (9 samples, 0.02%)</title><rect x="820.3" y="707.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="823.3" y="718.0"></text>
</g>
<g>
<title>__softirqentry_text_start (9 samples, 0.02%)</title><rect x="820.3" y="691.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="823.3" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/RecordStore.get (316 samples, 0.75%)</title><rect x="821.0" y="867.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="824.0" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.get (316 samples, 0.75%)</title><rect x="821.0" y="851.0" width="8.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="824.0" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.getRecordOrNull (295 samples, 0.70%)</title><rect x="821.6" y="835.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="824.6" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.getOrNullIfExpired (15 samples, 0.04%)</title><rect x="821.8" y="819.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="824.8" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.isRecordStoreExpirable (15 samples, 0.04%)</title><rect x="821.8" y="803.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="824.8" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (13 samples, 0.03%)</title><rect x="821.9" y="787.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="824.9" y="798.0"></text>
</g>
<g>
<title>gettimeofday (12 samples, 0.03%)</title><rect x="821.9" y="771.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="824.9" y="782.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.02%)</title><rect x="822.0" y="755.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="825.0" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (269 samples, 0.64%)</title><rect x="822.3" y="819.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="825.3" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (258 samples, 0.61%)</title><rect x="822.6" y="803.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="825.6" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get (187 samples, 0.45%)</title><rect x="824.6" y="787.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="827.6" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get0 (187 samples, 0.45%)</title><rect x="824.6" y="771.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="827.6" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BehmSlotAccessor.isAssigned (80 samples, 0.19%)</title><rect x="824.6" y="755.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="827.6" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryDataUtil.equals (99 samples, 0.24%)</title><rect x="827.0" y="755.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="830.0" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryDataUtil.readType (90 samples, 0.21%)</title><rect x="827.3" y="739.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="830.3" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/PutOperation.runInternal (1,518 samples, 3.61%)</title><rect x="829.9" y="883.0" width="42.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="832.9" y="894.0">com/..</text>
</g>
<g>
<title>com/hazelcast/map/impl/EnterpriseMapServiceContextImpl.toData (866 samples, 2.06%)</title><rect x="829.9" y="867.0" width="24.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="832.9" y="878.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toData (865 samples, 2.06%)</title><rect x="829.9" y="851.0" width="24.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="832.9" y="862.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toDataInternal (858 samples, 2.04%)</title><rect x="830.1" y="835.0" width="24.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="833.1" y="846.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertData (858 samples, 2.04%)</title><rect x="830.1" y="819.0" width="24.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="833.1" y="830.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (858 samples, 2.04%)</title><rect x="830.1" y="803.0" width="24.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="833.1" y="814.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (89 samples, 0.21%)</title><rect x="830.1" y="787.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="833.1" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (89 samples, 0.21%)</title><rect x="830.1" y="771.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="833.1" y="782.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab_event(KlassHandle, unsigned long) (12 samples, 0.03%)</title><rect x="830.2" y="755.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="833.2" y="766.0"></text>
</g>
<g>
<title>JfrTraceEvent&lt;EventAllocObjectOutsideTLAB&gt;::writeEvent() (12 samples, 0.03%)</title><rect x="830.2" y="739.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="833.2" y="750.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::record(int) (11 samples, 0.03%)</title><rect x="830.2" y="723.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="833.2" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (74 samples, 0.18%)</title><rect x="830.5" y="755.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="833.5" y="766.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (73 samples, 0.17%)</title><rect x="830.5" y="739.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="833.5" y="750.0"></text>
</g>
<g>
<title>JfrTraceEvent&lt;EventAllocObjectInNewTLAB&gt;::writeEvent() (72 samples, 0.17%)</title><rect x="830.6" y="723.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="833.6" y="734.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::record(int) (71 samples, 0.17%)</title><rect x="830.6" y="707.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="833.6" y="718.0"></text>
</g>
<g>
<title>JfrStackTrace::record(JavaThread*, int) (37 samples, 0.09%)</title><rect x="830.6" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="833.6" y="702.0"></text>
</g>
<g>
<title>JfrTypeIDs::jfr_use_methodID(Method*) (11 samples, 0.03%)</title><rect x="830.9" y="675.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="833.9" y="686.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::add(JfrStackTrace const&amp;) (32 samples, 0.08%)</title><rect x="831.6" y="691.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="834.6" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryData.toByteArray (767 samples, 1.83%)</title><rect x="832.7" y="787.0" width="21.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="835.7" y="798.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.copyTo (432 samples, 1.03%)</title><rect x="841.8" y="771.0" width="12.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="844.8" y="782.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (415 samples, 0.99%)</title><rect x="842.2" y="755.0" width="11.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="845.2" y="766.0"></text>
</g>
<g>
<title>ret_from_intr (12 samples, 0.03%)</title><rect x="853.9" y="771.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="856.9" y="782.0"></text>
</g>
<g>
<title>do_IRQ (12 samples, 0.03%)</title><rect x="853.9" y="755.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="856.9" y="766.0"></text>
</g>
<g>
<title>irq_exit (12 samples, 0.03%)</title><rect x="853.9" y="739.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="856.9" y="750.0"></text>
</g>
<g>
<title>__softirqentry_text_start (12 samples, 0.03%)</title><rect x="853.9" y="723.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="856.9" y="734.0"></text>
</g>
<g>
<title>net_rx_action (10 samples, 0.02%)</title><rect x="854.0" y="707.0" width="0.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="857.0" y="718.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (9 samples, 0.02%)</title><rect x="854.0" y="691.0" width="0.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="857.0" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.put (651 samples, 1.55%)</title><rect x="854.2" y="867.0" width="18.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="857.2" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.putInternal (650 samples, 1.55%)</title><rect x="854.3" y="851.0" width="18.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="857.3" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.getValue (80 samples, 0.19%)</title><rect x="854.4" y="835.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="857.4" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.getValue (80 samples, 0.19%)</title><rect x="854.4" y="819.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="857.4" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryData.reset (71 samples, 0.17%)</title><rect x="854.5" y="803.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="857.5" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.setSize (70 samples, 0.17%)</title><rect x="854.6" y="787.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="857.6" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.markRecordStoreExpirable (16 samples, 0.04%)</title><rect x="856.6" y="835.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="859.6" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (13 samples, 0.03%)</title><rect x="856.7" y="819.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="859.7" y="830.0"></text>
</g>
<g>
<title>gettimeofday (13 samples, 0.03%)</title><rect x="856.7" y="803.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="859.7" y="814.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.02%)</title><rect x="856.8" y="787.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="859.8" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.updateRecord (357 samples, 0.85%)</title><rect x="857.1" y="835.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="860.1" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/ExpirationTimeSetter.setExpirationTimes (31 samples, 0.07%)</title><rect x="857.4" y="819.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="860.4" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/Record.onAccess (29 samples, 0.07%)</title><rect x="858.3" y="819.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="861.3" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.setHits (10 samples, 0.02%)</title><rect x="858.4" y="803.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="861.4" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.writeInt (10 samples, 0.02%)</title><rect x="858.4" y="787.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="861.4" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/Record.onAccessSafe (15 samples, 0.04%)</title><rect x="858.7" y="803.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="861.7" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.setLastAccessTime (15 samples, 0.04%)</title><rect x="858.7" y="787.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="861.7" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.writeInt (13 samples, 0.03%)</title><rect x="858.7" y="771.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="861.7" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/CompositeMutationObserver.onUpdateRecord (90 samples, 0.21%)</title><rect x="859.2" y="819.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="862.2" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/IndexingMutationObserver.onUpdateRecord (50 samples, 0.12%)</title><rect x="859.5" y="803.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="862.5" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/IndexingMutationObserver.saveIndex (50 samples, 0.12%)</title><rect x="859.5" y="787.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="862.5" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapContainer.getIndexes (47 samples, 0.11%)</title><rect x="859.5" y="771.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="862.5" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.getIndexes (42 samples, 0.10%)</title><rect x="859.7" y="755.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="862.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (35 samples, 0.08%)</title><rect x="859.9" y="739.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="862.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (12 samples, 0.03%)</title><rect x="860.5" y="723.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="863.5" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/JsonMetadataMutationObserver.onUpdateRecord (19 samples, 0.05%)</title><rect x="860.9" y="803.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="863.9" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/JsonMetadataMutationObserver.updateValueMetadataIfNecessary (19 samples, 0.05%)</title><rect x="860.9" y="787.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="863.9" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDJsonMetadataMutationObserver.getMetadata (18 samples, 0.04%)</title><rect x="860.9" y="771.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="863.9" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/MetadataStore.get (18 samples, 0.04%)</title><rect x="860.9" y="755.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="863.9" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.updateRecordValue (193 samples, 0.46%)</title><rect x="861.7" y="819.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="864.7" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.updateRecordValue (193 samples, 0.46%)</title><rect x="861.7" y="803.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="864.7" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/NativeMapEntryCostEstimator.calculateValueCost (96 samples, 0.23%)</title><rect x="861.7" y="787.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="864.7" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/NativeMapEntryCostEstimator.calculateValueCost (94 samples, 0.22%)</title><rect x="861.7" y="771.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="864.7" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/NativeMapEntryCostEstimator.getSize (93 samples, 0.22%)</title><rect x="861.7" y="755.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="864.7" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.getSize (93 samples, 0.22%)</title><rect x="861.7" y="739.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="864.7" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.getSize (92 samples, 0.22%)</title><rect x="861.8" y="723.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="864.8" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getAllocatedSize (91 samples, 0.22%)</title><rect x="861.8" y="707.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="864.8" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.getAllocatedSize (59 samples, 0.14%)</title><rect x="861.8" y="691.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="864.8" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.getSizeInternal (59 samples, 0.14%)</title><rect x="861.8" y="675.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="864.8" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (59 samples, 0.14%)</title><rect x="861.8" y="659.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="864.8" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (59 samples, 0.14%)</title><rect x="861.8" y="643.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="864.8" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (50 samples, 0.12%)</title><rect x="862.0" y="627.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="865.0" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (48 samples, 0.11%)</title><rect x="862.1" y="611.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="865.1" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (48 samples, 0.11%)</title><rect x="862.1" y="595.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="865.1" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.isSlotAssigned (41 samples, 0.10%)</title><rect x="862.2" y="579.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="865.2" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.isAssigned (40 samples, 0.10%)</title><rect x="862.3" y="563.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="865.3" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getMemoryManager (32 samples, 0.08%)</title><rect x="863.5" y="691.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="866.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (27 samples, 0.06%)</title><rect x="863.6" y="675.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="866.6" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.toNative (96 samples, 0.23%)</title><rect x="864.4" y="787.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="867.4" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.toData (96 samples, 0.23%)</title><rect x="864.4" y="771.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="867.4" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toNativeData (91 samples, 0.22%)</title><rect x="864.5" y="755.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="867.5" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toDataInternal (91 samples, 0.22%)</title><rect x="864.5" y="739.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="867.5" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertData (90 samples, 0.21%)</title><rect x="864.6" y="723.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="867.6" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (77 samples, 0.18%)</title><rect x="864.6" y="707.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="867.6" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (73 samples, 0.17%)</title><rect x="864.7" y="691.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="867.7" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.allocate (72 samples, 0.17%)</title><rect x="864.7" y="675.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="867.7" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (72 samples, 0.17%)</title><rect x="864.7" y="659.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="867.7" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isValidAndAvailable (71 samples, 0.17%)</title><rect x="864.7" y="643.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="867.7" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (34 samples, 0.08%)</title><rect x="864.7" y="627.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="867.7" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (34 samples, 0.08%)</title><rect x="864.7" y="611.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="867.7" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (26 samples, 0.06%)</title><rect x="864.9" y="595.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="867.9" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (26 samples, 0.06%)</title><rect x="864.9" y="579.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="867.9" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (37 samples, 0.09%)</title><rect x="865.7" y="627.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="868.7" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (37 samples, 0.09%)</title><rect x="865.7" y="611.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="868.7" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (37 samples, 0.09%)</title><rect x="865.7" y="595.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="868.7" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (37 samples, 0.09%)</title><rect x="865.7" y="579.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="868.7" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (37 samples, 0.09%)</title><rect x="865.7" y="563.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="868.7" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.mask (18 samples, 0.04%)</title><rect x="866.2" y="547.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="869.2" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.capacity (17 samples, 0.04%)</title><rect x="866.2" y="531.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="869.2" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.getCurrentMemoryAllocator (13 samples, 0.03%)</title><rect x="866.7" y="707.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="869.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.03%)</title><rect x="866.8" y="691.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="869.8" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.checkIfLoaded (11 samples, 0.03%)</title><rect x="867.1" y="835.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="870.1" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.getRecordOrNull (182 samples, 0.43%)</title><rect x="867.4" y="835.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="870.4" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (176 samples, 0.42%)</title><rect x="867.6" y="819.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="870.6" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (175 samples, 0.42%)</title><rect x="867.6" y="803.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="870.6" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get (174 samples, 0.41%)</title><rect x="867.6" y="787.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="870.6" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get0 (174 samples, 0.41%)</title><rect x="867.6" y="771.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="870.6" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BehmSlotAccessor.isAssigned (66 samples, 0.16%)</title><rect x="867.6" y="755.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="870.6" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryDataUtil.equals (96 samples, 0.23%)</title><rect x="869.8" y="755.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="872.8" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryDataUtil.readType (89 samples, 0.21%)</title><rect x="870.0" y="739.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="873.0" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/SetOperation.runInternal (611 samples, 1.46%)</title><rect x="872.5" y="883.0" width="17.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="875.5" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.set (611 samples, 1.46%)</title><rect x="872.5" y="867.0" width="17.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="875.5" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.putInternal (611 samples, 1.46%)</title><rect x="872.5" y="851.0" width="17.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="875.5" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.putNewRecord (589 samples, 1.40%)</title><rect x="872.6" y="835.0" width="16.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="875.6" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/CompositeMutationObserver.onPutRecord (11 samples, 0.03%)</title><rect x="872.7" y="819.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="875.7" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/EnterpriseRecordStore.createRecord (533 samples, 1.27%)</title><rect x="873.0" y="819.0" width="15.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="876.0" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/EnterpriseRecordStore.createRecordInternal (533 samples, 1.27%)</title><rect x="873.0" y="803.0" width="15.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="876.0" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.createRecord (533 samples, 1.27%)</title><rect x="873.0" y="787.0" width="15.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="876.0" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.createRecord (533 samples, 1.27%)</title><rect x="873.0" y="771.0" width="15.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="876.0" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecordFactory.newRecord (528 samples, 1.26%)</title><rect x="873.1" y="755.0" width="14.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="876.1" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.allocate (109 samples, 0.26%)</title><rect x="873.2" y="739.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="876.2" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (108 samples, 0.26%)</title><rect x="873.2" y="723.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="876.2" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.allocate (107 samples, 0.25%)</title><rect x="873.2" y="707.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="876.2" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (106 samples, 0.25%)</title><rect x="873.2" y="691.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="876.2" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (98 samples, 0.23%)</title><rect x="873.3" y="675.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="876.3" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (91 samples, 0.22%)</title><rect x="873.3" y="659.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="876.3" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (90 samples, 0.21%)</title><rect x="873.3" y="643.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="876.3" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (85 samples, 0.20%)</title><rect x="873.3" y="627.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="876.3" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (84 samples, 0.20%)</title><rect x="873.3" y="611.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="876.3" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (82 samples, 0.20%)</title><rect x="873.3" y="595.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="876.3" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (81 samples, 0.19%)</title><rect x="873.3" y="579.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="876.3" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (77 samples, 0.18%)</title><rect x="873.3" y="563.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="876.3" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (76 samples, 0.18%)</title><rect x="873.3" y="547.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="876.3" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (74 samples, 0.18%)</title><rect x="873.3" y="531.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="876.3" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (74 samples, 0.18%)</title><rect x="873.3" y="515.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="876.3" y="526.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (68 samples, 0.16%)</title><rect x="873.3" y="499.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="876.3" y="510.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (68 samples, 0.16%)</title><rect x="873.3" y="483.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="876.3" y="494.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (62 samples, 0.15%)</title><rect x="873.3" y="467.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="876.3" y="478.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (62 samples, 0.15%)</title><rect x="873.3" y="451.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="876.3" y="462.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (55 samples, 0.13%)</title><rect x="873.3" y="435.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="876.3" y="446.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (55 samples, 0.13%)</title><rect x="873.3" y="419.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="876.3" y="430.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (49 samples, 0.12%)</title><rect x="873.3" y="403.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="876.3" y="414.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (49 samples, 0.12%)</title><rect x="873.3" y="387.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="876.3" y="398.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (46 samples, 0.11%)</title><rect x="873.3" y="371.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="876.3" y="382.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (46 samples, 0.11%)</title><rect x="873.3" y="355.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="876.3" y="366.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (45 samples, 0.11%)</title><rect x="873.3" y="339.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="876.3" y="350.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (45 samples, 0.11%)</title><rect x="873.3" y="323.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="876.3" y="334.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (36 samples, 0.09%)</title><rect x="873.3" y="307.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="876.3" y="318.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (36 samples, 0.09%)</title><rect x="873.3" y="291.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="876.3" y="302.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (34 samples, 0.08%)</title><rect x="873.3" y="275.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="876.3" y="286.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (34 samples, 0.08%)</title><rect x="873.3" y="259.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="876.3" y="270.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (29 samples, 0.07%)</title><rect x="873.3" y="243.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="876.3" y="254.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (29 samples, 0.07%)</title><rect x="873.3" y="227.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="876.3" y="238.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (23 samples, 0.05%)</title><rect x="873.3" y="211.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="876.3" y="222.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (23 samples, 0.05%)</title><rect x="873.3" y="195.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="876.3" y="206.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (20 samples, 0.05%)</title><rect x="873.3" y="179.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="876.3" y="190.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (20 samples, 0.05%)</title><rect x="873.3" y="163.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="876.3" y="174.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/StandardMemoryManager.allocate (14 samples, 0.03%)</title><rect x="873.4" y="147.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="876.4" y="158.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.setMemory (14 samples, 0.03%)</title><rect x="873.4" y="131.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="876.4" y="142.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (14 samples, 0.03%)</title><rect x="873.4" y="115.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="876.4" y="126.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (14 samples, 0.03%)</title><rect x="873.4" y="99.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="876.4" y="110.0"></text>
</g>
<g>
<title>Unsafe_SetMemory2 (14 samples, 0.03%)</title><rect x="873.4" y="83.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="876.4" y="94.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (14 samples, 0.03%)</title><rect x="873.4" y="67.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="876.4" y="78.0"></text>
</g>
<g>
<title>async_page_fault (9 samples, 0.02%)</title><rect x="873.6" y="51.0" width="0.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="876.6" y="62.0"></text>
</g>
<g>
<title>__do_page_fault (9 samples, 0.02%)</title><rect x="873.6" y="35.0" width="0.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="876.6" y="46.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.release (9 samples, 0.02%)</title><rect x="874.3" y="307.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="877.3" y="318.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.resizeQueue (9 samples, 0.02%)</title><rect x="874.3" y="291.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="877.3" y="302.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/queue/LongArrayQueue.&lt;init&gt; (9 samples, 0.02%)</title><rect x="874.3" y="275.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="877.3" y="286.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/queue/LongArrayQueue.clear (9 samples, 0.02%)</title><rect x="874.3" y="259.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="877.3" y="270.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.toData (411 samples, 0.98%)</title><rect x="876.3" y="739.0" width="11.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="879.3" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toNativeData (405 samples, 0.96%)</title><rect x="876.4" y="723.0" width="11.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="879.4" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toDataInternal (405 samples, 0.96%)</title><rect x="876.4" y="707.0" width="11.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="879.4" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertData (405 samples, 0.96%)</title><rect x="876.4" y="691.0" width="11.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="879.4" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (405 samples, 0.96%)</title><rect x="876.4" y="675.0" width="11.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="879.4" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.copyFrom (57 samples, 0.14%)</title><rect x="876.4" y="659.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="879.4" y="670.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (57 samples, 0.14%)</title><rect x="876.4" y="643.0" width="1.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="879.4" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (348 samples, 0.83%)</title><rect x="878.0" y="659.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="881.0" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.allocate (348 samples, 0.83%)</title><rect x="878.0" y="643.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="881.0" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (348 samples, 0.83%)</title><rect x="878.0" y="627.0" width="9.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="881.0" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (341 samples, 0.81%)</title><rect x="878.0" y="611.0" width="9.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="881.0" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (338 samples, 0.80%)</title><rect x="878.1" y="595.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="881.1" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (336 samples, 0.80%)</title><rect x="878.1" y="579.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="881.1" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (336 samples, 0.80%)</title><rect x="878.1" y="563.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="881.1" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (333 samples, 0.79%)</title><rect x="878.1" y="547.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="881.1" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (332 samples, 0.79%)</title><rect x="878.1" y="531.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="881.1" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (332 samples, 0.79%)</title><rect x="878.1" y="515.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="881.1" y="526.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (332 samples, 0.79%)</title><rect x="878.1" y="499.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="881.1" y="510.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (332 samples, 0.79%)</title><rect x="878.1" y="483.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="881.1" y="494.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (332 samples, 0.79%)</title><rect x="878.1" y="467.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="881.1" y="478.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (332 samples, 0.79%)</title><rect x="878.1" y="451.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="881.1" y="462.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (332 samples, 0.79%)</title><rect x="878.1" y="435.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="881.1" y="446.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (332 samples, 0.79%)</title><rect x="878.1" y="419.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="881.1" y="430.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (332 samples, 0.79%)</title><rect x="878.1" y="403.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="881.1" y="414.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (332 samples, 0.79%)</title><rect x="878.1" y="387.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="881.1" y="398.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (332 samples, 0.79%)</title><rect x="878.1" y="371.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="881.1" y="382.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (332 samples, 0.79%)</title><rect x="878.1" y="355.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="881.1" y="366.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.zeroOut (53 samples, 0.13%)</title><rect x="878.1" y="339.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="881.1" y="350.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.setMemory (53 samples, 0.13%)</title><rect x="878.1" y="323.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="881.1" y="334.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (53 samples, 0.13%)</title><rect x="878.1" y="307.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="881.1" y="318.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (53 samples, 0.13%)</title><rect x="878.1" y="291.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="881.1" y="302.0"></text>
</g>
<g>
<title>Unsafe_SetMemory2 (53 samples, 0.13%)</title><rect x="878.1" y="275.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="881.1" y="286.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (53 samples, 0.13%)</title><rect x="878.1" y="259.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="881.1" y="270.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/StandardMemoryManager.allocate (278 samples, 0.66%)</title><rect x="879.6" y="339.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="882.6" y="350.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.setMemory (276 samples, 0.66%)</title><rect x="879.7" y="323.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="882.7" y="334.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (276 samples, 0.66%)</title><rect x="879.7" y="307.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="882.7" y="318.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (276 samples, 0.66%)</title><rect x="879.7" y="291.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="882.7" y="302.0"></text>
</g>
<g>
<title>Unsafe_SetMemory2 (276 samples, 0.66%)</title><rect x="879.7" y="275.0" width="7.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="882.7" y="286.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (276 samples, 0.66%)</title><rect x="879.7" y="259.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="882.7" y="270.0"></text>
</g>
<g>
<title>async_page_fault (216 samples, 0.51%)</title><rect x="881.3" y="243.0" width="6.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="884.3" y="254.0"></text>
</g>
<g>
<title>__do_page_fault (216 samples, 0.51%)</title><rect x="881.3" y="227.0" width="6.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="884.3" y="238.0"></text>
</g>
<g>
<title>handle_mm_fault (152 samples, 0.36%)</title><rect x="883.0" y="211.0" width="4.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="886.0" y="222.0"></text>
</g>
<g>
<title>__handle_mm_fault (148 samples, 0.35%)</title><rect x="883.1" y="195.0" width="4.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="886.1" y="206.0"></text>
</g>
<g>
<title>_raw_spin_lock (47 samples, 0.11%)</title><rect x="883.4" y="179.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="886.4" y="190.0"></text>
</g>
<g>
<title>alloc_pages_vma (61 samples, 0.15%)</title><rect x="884.8" y="179.0" width="1.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="887.8" y="190.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (61 samples, 0.15%)</title><rect x="884.8" y="163.0" width="1.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="887.8" y="174.0"></text>
</g>
<g>
<title>get_page_from_freelist (60 samples, 0.14%)</title><rect x="884.8" y="147.0" width="1.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="887.8" y="158.0"></text>
</g>
<g>
<title>clear_page_erms (44 samples, 0.10%)</title><rect x="885.2" y="131.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="888.2" y="142.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge (16 samples, 0.04%)</title><rect x="886.6" y="179.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="889.6" y="190.0"></text>
</g>
<g>
<title>try_charge (10 samples, 0.02%)</title><rect x="886.8" y="163.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="889.8" y="174.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.put (42 samples, 0.10%)</title><rect x="888.0" y="819.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="891.0" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.put (40 samples, 0.10%)</title><rect x="888.0" y="803.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="891.0" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.put (12 samples, 0.03%)</title><rect x="888.1" y="787.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="891.1" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.expandAndPut (10 samples, 0.02%)</title><rect x="888.1" y="771.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="891.1" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.toNative (21 samples, 0.05%)</title><rect x="888.5" y="787.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="891.5" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.convertData (21 samples, 0.05%)</title><rect x="888.5" y="771.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="891.5" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertToNativeData (18 samples, 0.04%)</title><rect x="888.6" y="755.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="891.6" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (18 samples, 0.04%)</title><rect x="888.6" y="739.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="891.6" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (17 samples, 0.04%)</title><rect x="888.7" y="723.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="891.7" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.allocate (16 samples, 0.04%)</title><rect x="888.7" y="707.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="891.7" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (16 samples, 0.04%)</title><rect x="888.7" y="691.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="891.7" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (10 samples, 0.02%)</title><rect x="888.7" y="675.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="891.7" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.getRecordOrNull (15 samples, 0.04%)</title><rect x="889.3" y="835.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="892.3" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (15 samples, 0.04%)</title><rect x="889.3" y="819.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="892.3" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (15 samples, 0.04%)</title><rect x="889.3" y="803.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="892.3" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get (15 samples, 0.04%)</title><rect x="889.3" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="892.3" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get0 (15 samples, 0.04%)</title><rect x="889.3" y="771.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="892.3" y="782.0"></text>
</g>
<g>
<title>itable stub (31 samples, 0.07%)</title><rect x="889.8" y="899.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="892.8" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.sendResponse (219 samples, 0.52%)</title><rect x="891.0" y="915.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="894.0" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.sendResponse (216 samples, 0.51%)</title><rect x="891.0" y="899.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="894.0" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.complete (91 samples, 0.22%)</title><rect x="891.2" y="883.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="894.2" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.complete (12 samples, 0.03%)</title><rect x="891.4" y="867.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="894.4" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.complete0 (12 samples, 0.03%)</title><rect x="891.4" y="851.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="894.4" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/InvocationRegistry.deregister (73 samples, 0.17%)</title><rect x="891.7" y="867.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="894.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.remove (70 samples, 0.17%)</title><rect x="891.8" y="851.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="894.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.replaceNode (70 samples, 0.17%)</title><rect x="891.8" y="835.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="894.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.addCount (22 samples, 0.05%)</title><rect x="893.0" y="819.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="896.0" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.notifyNormalResponse (105 samples, 0.25%)</title><rect x="893.7" y="883.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="896.7" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.complete (95 samples, 0.23%)</title><rect x="894.0" y="867.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="897.0" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.complete (15 samples, 0.04%)</title><rect x="894.2" y="851.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="897.2" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.complete0 (15 samples, 0.04%)</title><rect x="894.2" y="835.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="897.2" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.compareAndSetState (9 samples, 0.02%)</title><rect x="894.2" y="819.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="897.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet (9 samples, 0.02%)</title><rect x="894.2" y="803.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="897.2" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/InvocationRegistry.deregister (74 samples, 0.18%)</title><rect x="894.6" y="851.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="897.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.remove (62 samples, 0.15%)</title><rect x="894.9" y="835.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="897.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.replaceNode (62 samples, 0.15%)</title><rect x="894.9" y="819.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="897.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.addCount (25 samples, 0.06%)</title><rect x="895.9" y="803.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="898.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet (15 samples, 0.04%)</title><rect x="896.7" y="883.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="899.7" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.sendBackups (2,181 samples, 5.19%)</title><rect x="897.1" y="915.0" width="61.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="900.1" y="926.0">com/ha..</text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/BasePutOperation.shouldBackup (15 samples, 0.04%)</title><rect x="897.2" y="899.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="900.2" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.getRecord (15 samples, 0.04%)</title><rect x="897.2" y="883.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="900.2" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (14 samples, 0.03%)</title><rect x="897.2" y="867.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="900.2" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (14 samples, 0.03%)</title><rect x="897.2" y="851.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="900.2" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get (14 samples, 0.03%)</title><rect x="897.2" y="835.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="900.2" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get0 (14 samples, 0.03%)</title><rect x="897.2" y="819.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="900.2" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.sendBackups0 (2,164 samples, 5.15%)</title><rect x="897.6" y="899.0" width="60.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="900.6" y="910.0">com/ha..</text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionReplicaManager.getServiceNamespace (30 samples, 0.07%)</title><rect x="898.1" y="883.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="901.1" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.getServiceNamespace (29 samples, 0.07%)</title><rect x="898.2" y="867.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="901.2" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.getServiceNamespace (29 samples, 0.07%)</title><rect x="898.2" y="851.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="901.2" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapServiceContextImpl.getMapContainer (14 samples, 0.03%)</title><rect x="898.3" y="835.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="901.3" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.getService (9 samples, 0.02%)</title><rect x="898.7" y="835.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="901.7" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionReplicaManager.incrementPartitionReplicaVersions (46 samples, 0.11%)</title><rect x="899.0" y="883.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="902.0" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionReplicaVersions.incrementAndGet (42 samples, 0.10%)</title><rect x="899.1" y="867.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="902.1" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionReplicaVersions.getFragmentVersions (38 samples, 0.09%)</title><rect x="899.2" y="851.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="902.2" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (22 samples, 0.05%)</title><rect x="899.6" y="835.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="902.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (14 samples, 0.03%)</title><rect x="899.8" y="819.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="902.8" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.makeBackups (2,051 samples, 4.88%)</title><rect x="900.3" y="883.0" width="57.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="903.3" y="894.0">com/ha..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.sendSingleBackup (2,043 samples, 4.87%)</title><rect x="900.5" y="867.0" width="57.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="903.5" y="878.0">com/ha..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.sendSingleBackup (2,043 samples, 4.87%)</title><rect x="900.5" y="851.0" width="57.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="903.5" y="862.0">com/ha..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.getBackupOperation (76 samples, 0.18%)</title><rect x="900.7" y="835.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="903.7" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/BasePutOperation.getBackupOperation (76 samples, 0.18%)</title><rect x="900.7" y="819.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="903.7" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/BasePutOperation.newBackupOperation (15 samples, 0.04%)</title><rect x="900.8" y="803.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="903.8" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/PutBackupOperation.&lt;init&gt; (9 samples, 0.02%)</title><rect x="900.9" y="787.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="903.9" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.&lt;init&gt; (9 samples, 0.02%)</title><rect x="900.9" y="771.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="903.9" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.getValueOrPostProcessedValue (17 samples, 0.04%)</title><rect x="901.2" y="803.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="904.2" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.isPostProcessing (9 samples, 0.02%)</title><rect x="901.4" y="787.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="904.4" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.getRecord (40 samples, 0.10%)</title><rect x="901.7" y="803.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="904.7" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (33 samples, 0.08%)</title><rect x="901.9" y="787.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="904.9" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (15 samples, 0.04%)</title><rect x="902.1" y="771.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="905.1" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get (15 samples, 0.04%)</title><rect x="902.1" y="755.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="905.1" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get0 (15 samples, 0.04%)</title><rect x="902.1" y="739.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="905.1" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.newBackup (15 samples, 0.04%)</title><rect x="902.8" y="835.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="905.8" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/OperationAccessor.setCallId (9 samples, 0.02%)</title><rect x="902.9" y="819.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="905.9" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.setCallId (9 samples, 0.02%)</title><rect x="902.9" y="803.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="905.9" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.skipSendingBackupToTarget (24 samples, 0.06%)</title><rect x="903.2" y="835.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="906.2" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/ClusterServiceImpl.getMember (20 samples, 0.05%)</title><rect x="903.3" y="819.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="906.3" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/MembershipManager.getMember (20 samples, 0.05%)</title><rect x="903.3" y="803.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="906.3" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/MemberMap.getMember (14 samples, 0.03%)</title><rect x="903.5" y="787.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="906.5" y="798.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (11 samples, 0.03%)</title><rect x="903.5" y="771.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="906.5" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OutboundOperationHandler.send (1,923 samples, 4.58%)</title><rect x="903.9" y="835.0" width="54.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="906.9" y="846.0">com/h..</text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/MemberViewUnifiedEndpointManager.getOrConnect (22 samples, 0.05%)</title><rect x="904.3" y="819.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="907.3" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/MemberViewUnifiedEndpointManager.getOrConnect (17 samples, 0.04%)</title><rect x="904.4" y="803.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="907.4" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/TcpIpEndpointManager.getOrConnect (17 samples, 0.04%)</title><rect x="904.4" y="787.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="907.4" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/TcpIpEndpointManager.getOrConnect (17 samples, 0.04%)</title><rect x="904.4" y="771.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="907.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (14 samples, 0.03%)</title><rect x="904.5" y="755.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="907.5" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/TcpIpNetworkingService.getEndpointManager (21 samples, 0.05%)</title><rect x="904.9" y="819.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="907.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (17 samples, 0.04%)</title><rect x="905.0" y="803.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="908.0" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodType$ConcurrentWeakInternSet$WeakEntry.equals (10 samples, 0.02%)</title><rect x="905.2" y="787.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="908.2" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/instance/EndpointQualifier.hashCode (10 samples, 0.02%)</title><rect x="905.2" y="771.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="908.2" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OutboundOperationHandler.send (1,865 samples, 4.44%)</title><rect x="905.5" y="819.0" width="52.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="908.5" y="830.0">com/h..</text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/MemberViewUnifiedEndpointManager.transmit (622 samples, 1.48%)</title><rect x="905.9" y="803.0" width="17.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="908.9" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/MemberViewUnifiedEndpointManager.transmit (622 samples, 1.48%)</title><rect x="905.9" y="787.0" width="17.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="908.9" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/TcpIpEndpointManager.transmit (621 samples, 1.48%)</title><rect x="906.0" y="771.0" width="17.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="909.0" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/TcpIpConnection.write (621 samples, 1.48%)</title><rect x="906.0" y="755.0" width="17.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="909.0" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioChannel.write (617 samples, 1.47%)</title><rect x="906.1" y="739.0" width="17.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="909.1" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.write (604 samples, 1.44%)</title><rect x="906.4" y="723.0" width="17.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="909.4" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.executePipeline (499 samples, 1.19%)</title><rect x="907.2" y="707.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="910.2" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioPipeline.registerOp (75 samples, 0.18%)</title><rect x="907.7" y="691.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="910.7" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (69 samples, 0.16%)</title><rect x="907.9" y="675.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="910.9" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.ensureValid (10 samples, 0.02%)</title><rect x="907.9" y="659.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="910.9" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (59 samples, 0.14%)</title><rect x="908.2" y="659.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="911.2" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetInterestOps (58 samples, 0.14%)</title><rect x="908.2" y="643.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="911.2" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.putEventOps (58 samples, 0.14%)</title><rect x="908.2" y="627.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="911.2" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.setInterest (17 samples, 0.04%)</title><rect x="909.4" y="611.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="912.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (398 samples, 0.95%)</title><rect x="909.8" y="691.0" width="11.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="912.8" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (358 samples, 0.85%)</title><rect x="911.0" y="675.0" width="10.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="914.0" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (356 samples, 0.85%)</title><rect x="911.0" y="659.0" width="10.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="914.0" y="670.0"></text>
</g>
<g>
<title>write (352 samples, 0.84%)</title><rect x="911.1" y="643.0" width="9.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="914.1" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (331 samples, 0.79%)</title><rect x="911.7" y="627.0" width="9.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="914.7" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (331 samples, 0.79%)</title><rect x="911.7" y="611.0" width="9.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="914.7" y="622.0"></text>
</g>
<g>
<title>sys_write (290 samples, 0.69%)</title><rect x="912.6" y="595.0" width="8.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="915.6" y="606.0"></text>
</g>
<g>
<title>__fdget_pos (22 samples, 0.05%)</title><rect x="912.6" y="579.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="915.6" y="590.0"></text>
</g>
<g>
<title>__fget_light (22 samples, 0.05%)</title><rect x="912.6" y="563.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="915.6" y="574.0"></text>
</g>
<g>
<title>__fget (16 samples, 0.04%)</title><rect x="912.8" y="547.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="915.8" y="558.0"></text>
</g>
<g>
<title>vfs_write (262 samples, 0.62%)</title><rect x="913.4" y="579.0" width="7.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="916.4" y="590.0"></text>
</g>
<g>
<title>__vfs_write (247 samples, 0.59%)</title><rect x="913.6" y="563.0" width="7.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="916.6" y="574.0"></text>
</g>
<g>
<title>pipe_write (243 samples, 0.58%)</title><rect x="913.7" y="547.0" width="6.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="916.7" y="558.0"></text>
</g>
<g>
<title>__wake_up_common_lock (181 samples, 0.43%)</title><rect x="914.3" y="531.0" width="5.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="917.3" y="542.0"></text>
</g>
<g>
<title>__lock_text_start (179 samples, 0.43%)</title><rect x="914.3" y="515.0" width="5.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="917.3" y="526.0"></text>
</g>
<g>
<title>copy_page_from_iter (14 samples, 0.03%)</title><rect x="919.3" y="531.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="922.3" y="542.0"></text>
</g>
<g>
<title>file_update_time (9 samples, 0.02%)</title><rect x="919.7" y="531.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="922.7" y="542.0"></text>
</g>
<g>
<title>mutex_unlock (13 samples, 0.03%)</title><rect x="920.2" y="531.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="923.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.offer (71 samples, 0.17%)</title><rect x="921.2" y="707.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="924.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.casNext (61 samples, 0.15%)</title><rect x="921.5" y="691.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="924.5" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.toBytes (1,226 samples, 2.92%)</title><rect x="923.4" y="803.0" width="34.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="926.4" y="814.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.toBytes (1,225 samples, 2.92%)</title><rect x="923.4" y="787.0" width="34.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="926.4" y="798.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.toBytes (1,225 samples, 2.92%)</title><rect x="923.4" y="771.0" width="34.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="926.4" y="782.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.toByteArray (93 samples, 0.22%)</title><rect x="924.1" y="755.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="927.1" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.toByteArray (92 samples, 0.22%)</title><rect x="924.1" y="739.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="927.1" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (17 samples, 0.04%)</title><rect x="925.4" y="723.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="928.4" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (17 samples, 0.04%)</title><rect x="925.4" y="707.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="928.4" y="718.0"></text>
</g>
<g>
<title>async_page_fault (9 samples, 0.02%)</title><rect x="925.9" y="723.0" width="0.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="928.9" y="734.0"></text>
</g>
<g>
<title>__do_page_fault (9 samples, 0.02%)</title><rect x="925.9" y="707.0" width="0.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="928.9" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (17 samples, 0.04%)</title><rect x="926.1" y="723.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="929.1" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeInt (23 samples, 0.05%)</title><rect x="926.7" y="755.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="929.7" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.writeInt (21 samples, 0.05%)</title><rect x="926.7" y="739.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="929.7" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.writeInt (19 samples, 0.05%)</title><rect x="926.8" y="723.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="929.8" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.writeIntB (19 samples, 0.05%)</title><rect x="926.8" y="707.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="929.8" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.putByte (9 samples, 0.02%)</title><rect x="927.0" y="691.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="930.0" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/StreamSerializerAdapter.write (654 samples, 1.56%)</title><rect x="927.4" y="755.0" width="18.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="930.4" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.write (654 samples, 1.56%)</title><rect x="927.4" y="739.0" width="18.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="930.4" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.write (653 samples, 1.56%)</title><rect x="927.4" y="723.0" width="18.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="930.4" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.writeIdentifiedDataSerializable (35 samples, 0.08%)</title><rect x="927.7" y="707.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="930.7" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeInt (32 samples, 0.08%)</title><rect x="927.8" y="691.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="930.8" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.ensureAvailable (30 samples, 0.07%)</title><rect x="927.9" y="675.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="930.9" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.available (29 samples, 0.07%)</title><rect x="927.9" y="659.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="930.9" y="670.0"></text>
</g>
<g>
<title>itable stub (15 samples, 0.04%)</title><rect x="928.3" y="643.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="931.3" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.writeData (596 samples, 1.42%)</title><rect x="929.0" y="707.0" width="16.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="932.0" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeLong (30 samples, 0.07%)</title><rect x="929.2" y="691.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="932.2" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.writeLong (25 samples, 0.06%)</title><rect x="929.2" y="675.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="932.2" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.writeLong (25 samples, 0.06%)</title><rect x="929.2" y="659.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="932.2" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.writeLongB (25 samples, 0.06%)</title><rect x="929.2" y="643.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="932.2" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.putByte (20 samples, 0.05%)</title><rect x="929.3" y="627.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="932.3" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.putByte (13 samples, 0.03%)</title><rect x="929.5" y="611.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="932.5" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/operations/Backup.writeInternal (545 samples, 1.30%)</title><rect x="930.4" y="691.0" width="15.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="933.4" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/cluster/Address.writeData (19 samples, 0.05%)</title><rect x="930.4" y="675.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="933.4" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeUTF (19 samples, 0.05%)</title><rect x="930.4" y="659.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="933.4" y="670.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (18 samples, 0.04%)</title><rect x="930.5" y="643.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="933.5" y="654.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (17 samples, 0.04%)</title><rect x="930.5" y="627.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="933.5" y="638.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (14 samples, 0.03%)</title><rect x="930.6" y="611.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="933.6" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (14 samples, 0.03%)</title><rect x="930.6" y="595.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="933.6" y="606.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (14 samples, 0.03%)</title><rect x="930.6" y="579.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="933.6" y="590.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (14 samples, 0.03%)</title><rect x="930.6" y="563.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="933.6" y="574.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (10 samples, 0.02%)</title><rect x="930.7" y="547.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="933.7" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeObject (518 samples, 1.23%)</title><rect x="931.1" y="675.0" width="14.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="934.1" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.writeObject (518 samples, 1.23%)</title><rect x="931.1" y="659.0" width="14.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="934.1" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeInt (24 samples, 0.06%)</title><rect x="931.5" y="643.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="934.5" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.writeInt (23 samples, 0.05%)</title><rect x="931.5" y="627.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="934.5" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.writeInt (23 samples, 0.05%)</title><rect x="931.5" y="611.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="934.5" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.writeIntB (21 samples, 0.05%)</title><rect x="931.5" y="595.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="934.5" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.putByte (14 samples, 0.03%)</title><rect x="931.6" y="579.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="934.6" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.putByte (11 samples, 0.03%)</title><rect x="931.7" y="563.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="934.7" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/StreamSerializerAdapter.write (482 samples, 1.15%)</title><rect x="932.2" y="643.0" width="13.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="935.2" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.write (481 samples, 1.15%)</title><rect x="932.2" y="627.0" width="13.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="935.2" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.write (481 samples, 1.15%)</title><rect x="932.2" y="611.0" width="13.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="935.2" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.writeIdentifiedDataSerializable (54 samples, 0.13%)</title><rect x="932.4" y="595.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="935.4" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeByte (19 samples, 0.05%)</title><rect x="932.5" y="579.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="935.5" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.write (19 samples, 0.05%)</title><rect x="932.5" y="563.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="935.5" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.ensureAvailable (14 samples, 0.03%)</title><rect x="932.6" y="547.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="935.6" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeInt (26 samples, 0.06%)</title><rect x="933.1" y="579.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="936.1" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.ensureAvailable (21 samples, 0.05%)</title><rect x="933.2" y="563.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="936.2" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.writeData (411 samples, 0.98%)</title><rect x="934.2" y="595.0" width="11.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="937.2" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeLong (12 samples, 0.03%)</title><rect x="934.3" y="579.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="937.3" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeShort (52 samples, 0.12%)</title><rect x="934.6" y="579.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="937.6" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.writeShort (14 samples, 0.03%)</title><rect x="934.8" y="563.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="937.8" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.writeShort (14 samples, 0.03%)</title><rect x="934.8" y="547.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="937.8" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.ensureAvailable (33 samples, 0.08%)</title><rect x="935.2" y="563.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="938.2" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.putByte (9 samples, 0.02%)</title><rect x="935.7" y="547.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="938.7" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/PutBackupOperation.writeInternal (325 samples, 0.77%)</title><rect x="936.3" y="579.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="939.3" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/IOUtil.writeData (20 samples, 0.05%)</title><rect x="936.3" y="563.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="939.3" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseByteArrayObjectDataOutput.writeData (20 samples, 0.05%)</title><rect x="936.3" y="547.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="939.3" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeData (20 samples, 0.05%)</title><rect x="936.3" y="531.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="939.3" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/HeapData.copyTo (9 samples, 0.02%)</title><rect x="936.5" y="515.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="939.5" y="526.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/Records.writeRecord (227 samples, 0.54%)</title><rect x="936.8" y="563.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="939.8" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/RecordReaderWriter$2.writeRecord (223 samples, 0.53%)</title><rect x="937.0" y="547.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="940.0" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/IOUtil.writeData (187 samples, 0.45%)</title><rect x="937.0" y="531.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="940.0" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseByteArrayObjectDataOutput.writeData (185 samples, 0.44%)</title><rect x="937.0" y="515.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="940.0" y="526.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeData (184 samples, 0.44%)</title><rect x="937.0" y="499.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="940.0" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (165 samples, 0.39%)</title><rect x="937.6" y="483.0" width="4.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="940.6" y="494.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeInt (23 samples, 0.05%)</title><rect x="942.2" y="531.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="945.2" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/AbstractNamedOperation.writeInternal (78 samples, 0.19%)</title><rect x="943.2" y="563.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="946.2" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeUTF (78 samples, 0.19%)</title><rect x="943.2" y="547.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="946.2" y="558.0"></text>
</g>
<g>
<title>java/io/OutputStream.write (12 samples, 0.03%)</title><rect x="943.4" y="531.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="946.4" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.write (12 samples, 0.03%)</title><rect x="943.4" y="515.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="946.4" y="526.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (61 samples, 0.15%)</title><rect x="943.7" y="531.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="946.7" y="542.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (61 samples, 0.15%)</title><rect x="943.7" y="515.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="946.7" y="526.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (19 samples, 0.05%)</title><rect x="943.9" y="499.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="946.9" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (17 samples, 0.04%)</title><rect x="943.9" y="483.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="946.9" y="494.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (13 samples, 0.03%)</title><rect x="944.0" y="467.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="947.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (25 samples, 0.06%)</title><rect x="944.7" y="499.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="947.7" y="510.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (19 samples, 0.05%)</title><rect x="944.9" y="483.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="947.9" y="494.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (19 samples, 0.05%)</title><rect x="944.9" y="467.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="947.9" y="478.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (19 samples, 0.05%)</title><rect x="944.9" y="451.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="947.9" y="462.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (14 samples, 0.03%)</title><rect x="945.0" y="435.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="948.0" y="446.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/bufferpool/BufferPoolThreadLocal.get (420 samples, 1.00%)</title><rect x="946.0" y="755.0" width="11.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="949.0" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (114 samples, 0.27%)</title><rect x="953.0" y="739.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="956.0" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (112 samples, 0.27%)</title><rect x="953.0" y="723.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="956.0" y="734.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab_event(KlassHandle, unsigned long) (15 samples, 0.04%)</title><rect x="953.1" y="707.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="956.1" y="718.0"></text>
</g>
<g>
<title>JfrTraceEvent&lt;EventAllocObjectOutsideTLAB&gt;::writeEvent() (15 samples, 0.04%)</title><rect x="953.1" y="691.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="956.1" y="702.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::record(int) (15 samples, 0.04%)</title><rect x="953.1" y="675.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="956.1" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (93 samples, 0.22%)</title><rect x="953.5" y="707.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="956.5" y="718.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (93 samples, 0.22%)</title><rect x="953.5" y="691.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="956.5" y="702.0"></text>
</g>
<g>
<title>JfrTraceEvent&lt;EventAllocObjectInNewTLAB&gt;::writeEvent() (93 samples, 0.22%)</title><rect x="953.5" y="675.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="956.5" y="686.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::record(int) (91 samples, 0.22%)</title><rect x="953.6" y="659.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="956.6" y="670.0"></text>
</g>
<g>
<title>JfrStackTrace::record(JavaThread*, int) (27 samples, 0.06%)</title><rect x="953.6" y="643.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="956.6" y="654.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::add(JfrStackTrace const&amp;) (57 samples, 0.14%)</title><rect x="954.3" y="643.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="957.3" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (18 samples, 0.04%)</title><rect x="956.3" y="739.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="959.3" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (15 samples, 0.04%)</title><rect x="956.3" y="723.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="959.3" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (15 samples, 0.04%)</title><rect x="956.3" y="707.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="959.3" y="718.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (10 samples, 0.02%)</title><rect x="956.8" y="739.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="959.8" y="750.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (10 samples, 0.02%)</title><rect x="956.8" y="723.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="959.8" y="734.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (9 samples, 0.02%)</title><rect x="956.8" y="707.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="959.8" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (21 samples, 0.05%)</title><rect x="957.1" y="739.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="960.1" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.afterRun (478 samples, 1.14%)</title><rect x="958.4" y="915.0" width="13.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="961.4" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.afterRun (470 samples, 1.12%)</title><rect x="958.5" y="899.0" width="13.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="961.5" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/BasePutOperation.afterRunInternal (414 samples, 0.99%)</title><rect x="958.5" y="883.0" width="11.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="961.5" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/event/MapEventPublisherImpl.publishEvent (65 samples, 0.15%)</title><rect x="958.7" y="867.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="961.7" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/event/EnterpriseMapEventPublisherImpl.publishEvent (65 samples, 0.15%)</title><rect x="958.7" y="851.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="961.7" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapServiceContextImpl.getMapContainer (13 samples, 0.03%)</title><rect x="958.7" y="835.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="961.7" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutSynchronized (12 samples, 0.03%)</title><rect x="958.8" y="819.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="961.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 0.03%)</title><rect x="958.8" y="803.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="961.8" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/event/EnterpriseMapEventPublisherImpl.toHeapData (34 samples, 0.08%)</title><rect x="959.1" y="835.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="962.1" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toData (33 samples, 0.08%)</title><rect x="959.1" y="819.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="962.1" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toDataInternal (25 samples, 0.06%)</title><rect x="959.4" y="803.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="962.4" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertData (25 samples, 0.06%)</title><rect x="959.4" y="787.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="962.4" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (15 samples, 0.04%)</title><rect x="959.4" y="771.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="962.4" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (14 samples, 0.03%)</title><rect x="959.4" y="755.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="962.4" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getMemoryManager (10 samples, 0.02%)</title><rect x="959.5" y="739.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="962.5" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.getCurrentMemoryAllocator (10 samples, 0.02%)</title><rect x="959.8" y="771.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="962.8" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.02%)</title><rect x="959.8" y="755.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="962.8" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/event/MapEventPublisherImpl.publishEvent (15 samples, 0.04%)</title><rect x="960.1" y="835.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="963.1" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/event/MapEventPublisherImpl.getRegistrations (15 samples, 0.04%)</title><rect x="960.1" y="819.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="963.1" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/eventservice/impl/EventServiceImpl.getRegistrations (12 samples, 0.03%)</title><rect x="960.1" y="803.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="963.1" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/eventservice/impl/EventServiceImpl.getSegment (12 samples, 0.03%)</title><rect x="960.1" y="787.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="963.1" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.evict (337 samples, 0.80%)</title><rect x="960.5" y="867.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="963.5" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.disposeDeferredBlocks (337 samples, 0.80%)</title><rect x="960.5" y="851.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="963.5" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapServiceContextImpl.getExistingRecordStore (9 samples, 0.02%)</title><rect x="960.5" y="835.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="963.5" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.disposeDeferredBlocks (327 samples, 0.78%)</title><rect x="960.8" y="835.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="963.8" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.disposeDeferredBlocks (327 samples, 0.78%)</title><rect x="960.8" y="819.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="963.8" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.disposeDeferredBlocks (325 samples, 0.77%)</title><rect x="960.8" y="803.0" width="9.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="963.8" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.disposeDeferredBlocks (324 samples, 0.77%)</title><rect x="960.8" y="787.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="963.8" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.disposeData (318 samples, 0.76%)</title><rect x="961.0" y="771.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="964.0" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.disposeData (317 samples, 0.75%)</title><rect x="961.0" y="755.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="964.0" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.getSize (20 samples, 0.05%)</title><rect x="961.1" y="739.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="964.1" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getAllocatedSize (20 samples, 0.05%)</title><rect x="961.1" y="723.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="964.1" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.getAllocatedSize (10 samples, 0.02%)</title><rect x="961.1" y="707.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="964.1" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.getSizeInternal (10 samples, 0.02%)</title><rect x="961.1" y="691.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="964.1" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (10 samples, 0.02%)</title><rect x="961.1" y="675.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="964.1" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (10 samples, 0.02%)</title><rect x="961.1" y="659.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="964.1" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getMemoryManager (9 samples, 0.02%)</title><rect x="961.4" y="707.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="964.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.02%)</title><rect x="961.4" y="691.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="964.4" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.disposeData (296 samples, 0.70%)</title><rect x="961.6" y="739.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="964.6" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.disposeDataInternal (296 samples, 0.70%)</title><rect x="961.6" y="723.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="964.6" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.free (295 samples, 0.70%)</title><rect x="961.6" y="707.0" width="8.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="964.6" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.free (292 samples, 0.70%)</title><rect x="961.7" y="691.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="964.7" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.zeroOut (204 samples, 0.49%)</title><rect x="962.1" y="675.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="965.1" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.setMemory (202 samples, 0.48%)</title><rect x="962.1" y="659.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="965.1" y="670.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (202 samples, 0.48%)</title><rect x="962.1" y="643.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="965.1" y="654.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (202 samples, 0.48%)</title><rect x="962.1" y="627.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="965.1" y="638.0"></text>
</g>
<g>
<title>Unsafe_SetMemory2 (181 samples, 0.43%)</title><rect x="962.7" y="611.0" width="5.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="965.7" y="622.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (166 samples, 0.40%)</title><rect x="962.8" y="595.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="965.8" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PooledNativeMemoryStats.removeUsedNativeMemory (17 samples, 0.04%)</title><rect x="967.8" y="675.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="970.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.addAndGet (17 samples, 0.04%)</title><rect x="967.8" y="659.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="970.8" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.markAvailable (52 samples, 0.12%)</title><rect x="968.4" y="675.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="971.4" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.putByte (50 samples, 0.12%)</title><rect x="968.5" y="659.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="971.5" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.disposeDeferredBlocks (40 samples, 0.10%)</title><rect x="970.2" y="883.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="973.2" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapServiceContextImpl.getExistingRecordStore (22 samples, 0.05%)</title><rect x="970.4" y="867.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="973.4" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.getExistingRecordStore (17 samples, 0.04%)</title><rect x="970.5" y="851.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="973.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (12 samples, 0.03%)</title><rect x="970.7" y="835.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="973.7" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.disposeDeferredBlocks (10 samples, 0.02%)</title><rect x="971.0" y="867.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="974.0" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.disposeDeferredBlocks (10 samples, 0.02%)</title><rect x="971.0" y="851.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="974.0" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.disposeDeferredBlocks (9 samples, 0.02%)</title><rect x="971.1" y="835.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="974.1" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/SetOperation.afterRunInternal (13 samples, 0.03%)</title><rect x="971.3" y="883.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="974.3" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/BasePutOperation.afterRunInternal (13 samples, 0.03%)</title><rect x="971.3" y="867.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="974.3" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.checkNodeState (18 samples, 0.04%)</title><rect x="971.9" y="931.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="974.9" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.ensureNoPartitionProblems (18 samples, 0.04%)</title><rect x="972.4" y="931.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="975.4" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.ensureNoSplitBrain (11 samples, 0.03%)</title><rect x="972.9" y="931.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="975.9" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/splitbrainprotection/impl/SplitBrainProtectionServiceImpl.ensureNoSplitBrain (10 samples, 0.02%)</title><rect x="972.9" y="915.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="975.9" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/splitbrainprotection/impl/SplitBrainProtectionServiceImpl.isInactive (10 samples, 0.02%)</title><rect x="972.9" y="899.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="975.9" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.publishCurrentTask (10 samples, 0.02%)</title><rect x="973.2" y="931.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="976.2" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.timeout (32 samples, 0.08%)</title><rect x="973.5" y="931.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="976.5" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl.isCallTimedOut (32 samples, 0.08%)</title><rect x="973.5" y="915.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="976.5" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/ClusterClockImpl.getClusterTime (19 samples, 0.05%)</title><rect x="973.5" y="899.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="976.5" y="910.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (19 samples, 0.05%)</title><rect x="973.5" y="883.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="976.5" y="894.0"></text>
</g>
<g>
<title>gettimeofday (19 samples, 0.05%)</title><rect x="973.5" y="867.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="976.5" y="878.0"></text>
</g>
<g>
<title>[vdso] (12 samples, 0.03%)</title><rect x="973.7" y="851.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="976.7" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.initInvocationTarget (91 samples, 0.22%)</title><rect x="974.4" y="995.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="977.4" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/PartitionInvocation.getInvocationTarget (49 samples, 0.12%)</title><rect x="974.8" y="979.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="977.8" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/PartitionInvocation.getInvocationTarget (49 samples, 0.12%)</title><rect x="974.8" y="963.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="977.8" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/InternalPartitionServiceImpl.getPartition (44 samples, 0.10%)</title><rect x="974.9" y="947.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="977.9" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/InternalPartitionServiceImpl.getPartition (43 samples, 0.10%)</title><rect x="974.9" y="931.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="977.9" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/InternalPartitionImpl.getOwnerReplicaOrNull (34 samples, 0.08%)</title><rect x="975.0" y="915.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="978.0" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/PartitionInvocation.toTargetMember (27 samples, 0.06%)</title><rect x="976.2" y="979.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="979.2" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/PartitionInvocation.toTargetMember (26 samples, 0.06%)</title><rect x="976.2" y="963.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="979.2" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/ClusterServiceImpl.getMember (25 samples, 0.06%)</title><rect x="976.2" y="947.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="979.2" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/MembershipManager.getMember (25 samples, 0.06%)</title><rect x="976.2" y="931.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="979.2" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/MemberMap.getMember (23 samples, 0.05%)</title><rect x="976.2" y="915.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="979.2" y="926.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (20 samples, 0.05%)</title><rect x="976.3" y="899.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="979.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (11 samples, 0.03%)</title><rect x="976.6" y="883.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="979.6" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/cluster/Address.hashCode (10 samples, 0.02%)</title><rect x="976.6" y="867.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="979.6" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/InvocationRegistry.register (144 samples, 0.34%)</title><rect x="976.9" y="995.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="979.9" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/sequence/AbstractCallIdSequence.next (9 samples, 0.02%)</title><rect x="977.2" y="979.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="980.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.put (126 samples, 0.30%)</title><rect x="977.4" y="979.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="980.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putVal (126 samples, 0.30%)</title><rect x="977.4" y="963.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="980.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.addCount (20 samples, 0.05%)</title><rect x="977.6" y="947.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="980.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.casTabAt (45 samples, 0.11%)</title><rect x="978.2" y="947.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="981.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.initTable (17 samples, 0.04%)</title><rect x="979.4" y="947.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="982.4" y="958.0"></text>
</g>
<g>
<title>java/lang/Long.hashCode (11 samples, 0.03%)</title><rect x="979.5" y="931.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="982.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (37 samples, 0.09%)</title><rect x="979.9" y="947.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="982.9" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/PartitionInvocation.&lt;init&gt; (26 samples, 0.06%)</title><rect x="981.1" y="1043.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="984.1" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.&lt;init&gt; (20 samples, 0.05%)</title><rect x="981.2" y="1027.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="984.2" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl.createInvocationBuilder (72 samples, 0.17%)</title><rect x="981.8" y="1059.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="984.8" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/InvocationBuilderImpl.&lt;init&gt; (34 samples, 0.08%)</title><rect x="982.3" y="1043.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="985.3" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/InvocationBuilderImpl.&lt;init&gt; (34 samples, 0.08%)</title><rect x="982.3" y="1027.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="985.3" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/InvocationBuilder.&lt;init&gt; (32 samples, 0.08%)</title><rect x="982.3" y="1011.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="985.3" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (23 samples, 0.05%)</title><rect x="982.5" y="995.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="985.5" y="1006.0"></text>
</g>
<g>
<title>gettimeofday (21 samples, 0.05%)</title><rect x="982.6" y="979.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="985.6" y="990.0"></text>
</g>
<g>
<title>[vdso] (18 samples, 0.04%)</title><rect x="982.7" y="963.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="985.7" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (21 samples, 0.05%)</title><rect x="983.2" y="1043.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="986.2" y="1054.0"></text>
</g>
<g>
<title>gettimeofday (21 samples, 0.05%)</title><rect x="983.2" y="1027.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="986.2" y="1038.0"></text>
</g>
<g>
<title>[vdso] (17 samples, 0.04%)</title><rect x="983.3" y="1011.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="986.3" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.thenApplyAsync (192 samples, 0.46%)</title><rect x="984.4" y="1075.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="987.4" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.thenApplyAsync (192 samples, 0.46%)</title><rect x="984.4" y="1059.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="987.4" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.newCompletableFuture (10 samples, 0.02%)</title><rect x="984.7" y="1043.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="987.7" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.unblockApply (173 samples, 0.41%)</title><rect x="985.0" y="1043.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="988.0" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil$1.execute (166 samples, 0.40%)</title><rect x="985.0" y="1027.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="988.0" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture$$Lambda$1029/1397393483.run (166 samples, 0.40%)</title><rect x="985.0" y="1011.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="988.0" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.lambda$unblockApply$1 (165 samples, 0.39%)</title><rect x="985.0" y="995.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="988.0" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask$$Lambda$1023/1492962858.apply (138 samples, 0.33%)</title><rect x="985.1" y="979.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="988.1" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/AbstractMapPutMessageTask.processResponseBeforeSending (54 samples, 0.13%)</title><rect x="985.2" y="963.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="988.2" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.getService (9 samples, 0.02%)</title><rect x="985.3" y="947.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="988.3" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.getService (9 samples, 0.02%)</title><rect x="985.3" y="931.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="988.3" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getService (9 samples, 0.02%)</title><rect x="985.3" y="915.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="988.3" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getServiceInfo (9 samples, 0.02%)</title><rect x="985.3" y="899.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="988.3" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/monitor/impl/LocalMapStatsImpl.incrementPutLatencyNanos (19 samples, 0.05%)</title><rect x="985.6" y="947.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="988.6" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/monitor/impl/LocalMapStatsImpl.incrementPutLatencyNanos (19 samples, 0.05%)</title><rect x="985.6" y="931.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="988.6" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.setMax (19 samples, 0.05%)</title><rect x="985.6" y="915.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="988.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.get (19 samples, 0.05%)</title><rect x="985.6" y="899.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="988.6" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/LocalMapStatsProvider.getLocalMapStatsImpl (20 samples, 0.05%)</title><rect x="986.1" y="947.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="989.1" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutIfAbsent (16 samples, 0.04%)</title><rect x="986.2" y="931.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="989.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (16 samples, 0.04%)</title><rect x="986.2" y="915.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="989.2" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/AbstractMapSetMessageTask.processResponseBeforeSending (11 samples, 0.03%)</title><rect x="986.8" y="963.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="989.8" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapGetMessageTask.processResponseBeforeSending (67 samples, 0.16%)</title><rect x="987.1" y="963.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="990.1" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.getService (9 samples, 0.02%)</title><rect x="987.1" y="947.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="990.1" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.getService (9 samples, 0.02%)</title><rect x="987.1" y="931.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="990.1" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/monitor/impl/LocalMapStatsImpl.incrementGetLatencyNanos (14 samples, 0.03%)</title><rect x="987.4" y="947.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="990.4" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/monitor/impl/LocalMapStatsImpl.incrementGetLatencyNanos (14 samples, 0.03%)</title><rect x="987.4" y="931.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="990.4" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.setMax (14 samples, 0.03%)</title><rect x="987.4" y="915.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="990.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.get (14 samples, 0.03%)</title><rect x="987.4" y="899.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="990.4" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/LocalMapStatsProvider.getLocalMapStatsImpl (21 samples, 0.05%)</title><rect x="987.8" y="947.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="990.8" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutIfAbsent (18 samples, 0.04%)</title><rect x="987.9" y="931.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="990.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (17 samples, 0.04%)</title><rect x="987.9" y="915.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="990.9" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapServiceContextImpl.getMapContainer (16 samples, 0.04%)</title><rect x="988.5" y="947.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="991.5" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutSynchronized (16 samples, 0.04%)</title><rect x="988.5" y="931.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="991.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 0.03%)</title><rect x="988.6" y="915.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="991.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (25 samples, 0.06%)</title><rect x="988.9" y="979.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="991.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (24 samples, 0.06%)</title><rect x="989.0" y="963.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="992.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenCompleteAsync (1,108 samples, 2.64%)</title><rect x="989.9" y="1075.0" width="31.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="992.9" y="1086.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1,108 samples, 2.64%)</title><rect x="989.9" y="1059.0" width="31.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="992.9" y="1070.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1,107 samples, 2.64%)</title><rect x="989.9" y="1043.0" width="31.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="992.9" y="1054.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1,106 samples, 2.63%)</title><rect x="990.0" y="1027.0" width="31.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="993.0" y="1038.0">ja..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask$$Lambda$1025/309726403.accept (13 samples, 0.03%)</title><rect x="990.0" y="1011.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="993.0" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask.sendResponseOrHandleFailure (13 samples, 0.03%)</title><rect x="990.0" y="995.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="993.0" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.sendResponse (11 samples, 0.03%)</title><rect x="990.0" y="979.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="993.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1,093 samples, 2.60%)</title><rect x="990.3" y="1011.0" width="30.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="993.3" y="1022.0">ja..</text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil$1.execute (1,073 samples, 2.56%)</title><rect x="990.7" y="995.0" width="30.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="993.7" y="1006.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (1,054 samples, 2.51%)</title><rect x="991.2" y="979.0" width="29.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="994.2" y="990.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1,054 samples, 2.51%)</title><rect x="991.2" y="963.0" width="29.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="994.2" y="974.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1,048 samples, 2.50%)</title><rect x="991.4" y="947.0" width="29.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="994.4" y="958.0">ja..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask$$Lambda$1025/309726403.accept (1,047 samples, 2.49%)</title><rect x="991.4" y="931.0" width="29.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="994.4" y="942.0">co..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask.sendResponseOrHandleFailure (1,045 samples, 2.49%)</title><rect x="991.5" y="915.0" width="29.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="994.5" y="926.0">co..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.sendResponse (1,041 samples, 2.48%)</title><rect x="991.6" y="899.0" width="29.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="994.6" y="910.0">co..</text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientBackupAwareResponse.getResponse (29 samples, 0.07%)</title><rect x="992.0" y="883.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="995.0" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.sendClientMessage (961 samples, 2.29%)</title><rect x="992.8" y="883.0" width="27.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="995.8" y="894.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/TcpIpConnection.write (948 samples, 2.26%)</title><rect x="993.1" y="867.0" width="26.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="996.1" y="878.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioChannel.write (947 samples, 2.26%)</title><rect x="993.2" y="851.0" width="26.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="996.2" y="862.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.write (938 samples, 2.23%)</title><rect x="993.4" y="835.0" width="26.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="996.4" y="846.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.executePipeline (755 samples, 1.80%)</title><rect x="995.2" y="819.0" width="21.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="998.2" y="830.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioPipeline.registerOp (126 samples, 0.30%)</title><rect x="996.1" y="803.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="999.1" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (121 samples, 0.29%)</title><rect x="996.3" y="787.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="999.3" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.ensureValid (16 samples, 0.04%)</title><rect x="996.3" y="771.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="999.3" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (104 samples, 0.25%)</title><rect x="996.7" y="771.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="999.7" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetInterestOps (103 samples, 0.25%)</title><rect x="996.8" y="755.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="999.8" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.putEventOps (101 samples, 0.24%)</title><rect x="996.8" y="739.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="999.8" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.setInterest (41 samples, 0.10%)</title><rect x="998.5" y="723.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1001.5" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (585 samples, 1.39%)</title><rect x="999.7" y="803.0" width="16.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1002.7" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (523 samples, 1.25%)</title><rect x="1001.4" y="787.0" width="14.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1004.4" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (520 samples, 1.24%)</title><rect x="1001.5" y="771.0" width="14.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1004.5" y="782.0"></text>
</g>
<g>
<title>write (514 samples, 1.22%)</title><rect x="1001.7" y="755.0" width="14.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1004.7" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (481 samples, 1.15%)</title><rect x="1002.6" y="739.0" width="13.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1005.6" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (481 samples, 1.15%)</title><rect x="1002.6" y="723.0" width="13.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1005.6" y="734.0"></text>
</g>
<g>
<title>sys_write (417 samples, 0.99%)</title><rect x="1004.0" y="707.0" width="11.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1007.0" y="718.0"></text>
</g>
<g>
<title>__fdget_pos (30 samples, 0.07%)</title><rect x="1004.3" y="691.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1007.3" y="702.0"></text>
</g>
<g>
<title>__fget_light (30 samples, 0.07%)</title><rect x="1004.3" y="675.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1007.3" y="686.0"></text>
</g>
<g>
<title>__fget (23 samples, 0.05%)</title><rect x="1004.5" y="659.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1007.5" y="670.0"></text>
</g>
<g>
<title>fput (10 samples, 0.02%)</title><rect x="1005.1" y="691.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1008.1" y="702.0"></text>
</g>
<g>
<title>vfs_write (368 samples, 0.88%)</title><rect x="1005.4" y="691.0" width="10.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1008.4" y="702.0"></text>
</g>
<g>
<title>__vfs_write (356 samples, 0.85%)</title><rect x="1005.6" y="675.0" width="10.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1008.6" y="686.0"></text>
</g>
<g>
<title>pipe_write (348 samples, 0.83%)</title><rect x="1005.8" y="659.0" width="9.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1008.8" y="670.0"></text>
</g>
<g>
<title>__wake_up_common_lock (265 samples, 0.63%)</title><rect x="1006.3" y="643.0" width="7.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1009.3" y="654.0"></text>
</g>
<g>
<title>__lock_text_start (264 samples, 0.63%)</title><rect x="1006.3" y="627.0" width="7.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1009.3" y="638.0"></text>
</g>
<g>
<title>copy_page_from_iter (29 samples, 0.07%)</title><rect x="1013.7" y="643.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1016.7" y="654.0"></text>
</g>
<g>
<title>copyin (13 samples, 0.03%)</title><rect x="1014.2" y="627.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1017.2" y="638.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (12 samples, 0.03%)</title><rect x="1014.2" y="611.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1017.2" y="622.0"></text>
</g>
<g>
<title>mutex_lock (21 samples, 0.05%)</title><rect x="1014.7" y="643.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1017.7" y="654.0"></text>
</g>
<g>
<title>mutex_unlock (13 samples, 0.03%)</title><rect x="1015.2" y="643.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1018.2" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.selector (9 samples, 0.02%)</title><rect x="1016.1" y="803.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1019.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.offer (113 samples, 0.27%)</title><rect x="1016.4" y="819.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1019.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.casNext (106 samples, 0.25%)</title><rect x="1016.6" y="803.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1019.6" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapPutMessageTask.encodeResponse (17 samples, 0.04%)</title><rect x="1020.0" y="883.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1023.0" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/MapPutCodec.encodeResponse (16 samples, 0.04%)</title><rect x="1020.0" y="867.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1023.0" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapSetMessageTask.encodeResponse (14 samples, 0.03%)</title><rect x="1020.5" y="883.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1023.5" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/MapSetCodec.encodeResponse (14 samples, 0.03%)</title><rect x="1020.5" y="867.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1023.5" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.validateNodeStart (25 samples, 0.06%)</title><rect x="1021.5" y="1091.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1024.5" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/EnterpriseNodeExtension.isStartCompleted (18 samples, 0.04%)</title><rect x="1021.6" y="1075.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1024.6" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapGetMessageTask.decodeClientMessage (40 samples, 0.10%)</title><rect x="1022.2" y="1091.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1025.2" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapGetMessageTask.decodeClientMessage (40 samples, 0.10%)</title><rect x="1022.2" y="1075.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1025.2" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/MapGetCodec.decodeRequest (40 samples, 0.10%)</title><rect x="1022.2" y="1059.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1025.2" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/builtin/StringCodec.decode (30 samples, 0.07%)</title><rect x="1022.5" y="1043.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1025.5" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/builtin/StringCodec.decode (30 samples, 0.07%)</title><rect x="1022.5" y="1027.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1025.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (23 samples, 0.05%)</title><rect x="1022.7" y="1011.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1025.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (22 samples, 0.05%)</title><rect x="1022.7" y="995.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1025.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (22 samples, 0.05%)</title><rect x="1022.7" y="979.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1025.7" y="990.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (10 samples, 0.02%)</title><rect x="1023.0" y="963.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1026.0" y="974.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (9 samples, 0.02%)</title><rect x="1023.0" y="947.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1026.0" y="958.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (9 samples, 0.02%)</title><rect x="1023.0" y="931.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1026.0" y="942.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (9 samples, 0.02%)</title><rect x="1023.0" y="915.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1026.0" y="926.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (9 samples, 0.02%)</title><rect x="1023.0" y="899.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1026.0" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapPutMessageTask.decodeClientMessage (48 samples, 0.11%)</title><rect x="1023.3" y="1091.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1026.3" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapPutMessageTask.decodeClientMessage (48 samples, 0.11%)</title><rect x="1023.3" y="1075.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1026.3" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/MapPutCodec.decodeRequest (48 samples, 0.11%)</title><rect x="1023.3" y="1059.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1026.3" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/builtin/FixedSizeTypesCodec.decodeLong (31 samples, 0.07%)</title><rect x="1023.5" y="1043.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1026.5" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readLongL (30 samples, 0.07%)</title><rect x="1023.5" y="1027.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1026.5" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readLongL (30 samples, 0.07%)</title><rect x="1023.5" y="1011.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1026.5" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (22 samples, 0.05%)</title><rect x="1023.7" y="995.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1026.7" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (11 samples, 0.03%)</title><rect x="1024.0" y="979.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1027.0" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/builtin/StringCodec.decode (11 samples, 0.03%)</title><rect x="1024.4" y="1043.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1027.4" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/builtin/StringCodec.decode (11 samples, 0.03%)</title><rect x="1024.4" y="1027.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1027.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.02%)</title><rect x="1024.4" y="1011.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1027.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.02%)</title><rect x="1024.4" y="995.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1027.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (10 samples, 0.02%)</title><rect x="1024.4" y="979.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1027.4" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapSetMessageTask.decodeClientMessage (15 samples, 0.04%)</title><rect x="1024.7" y="1091.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1027.7" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapSetMessageTask.decodeClientMessage (15 samples, 0.04%)</title><rect x="1024.7" y="1075.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1027.7" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/MapSetCodec.decodeRequest (15 samples, 0.04%)</title><rect x="1024.7" y="1059.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1027.7" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.toObject (1,368 samples, 3.26%)</title><rect x="1025.4" y="1123.0" width="38.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1028.4" y="1134.0">com..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.toObject (1,365 samples, 3.25%)</title><rect x="1025.5" y="1107.0" width="38.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1028.5" y="1118.0">com..</text>
</g>
<g>
<title>com/hazelcast/instance/impl/HazelcastManagedContext.initialize (13 samples, 0.03%)</title><rect x="1025.6" y="1091.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1028.6" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseBufferPool.takeInputBuffer (11 samples, 0.03%)</title><rect x="1026.1" y="1091.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1029.1" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.createObjectDataInput (10 samples, 0.02%)</title><rect x="1026.1" y="1075.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1029.1" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseByteArrayInputOutputFactory.createInput (10 samples, 0.02%)</title><rect x="1026.1" y="1059.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1029.1" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseByteArrayInputOutputFactory.createInput (10 samples, 0.02%)</title><rect x="1026.1" y="1043.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1029.1" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/StreamSerializerAdapter.read (1,299 samples, 3.09%)</title><rect x="1026.6" y="1091.0" width="36.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1029.6" y="1102.0">com..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.read (1,296 samples, 3.09%)</title><rect x="1026.7" y="1075.0" width="36.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1029.7" y="1086.0">com..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.read (1,296 samples, 3.09%)</title><rect x="1026.7" y="1059.0" width="36.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1029.7" y="1070.0">com..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.doRead (1,296 samples, 3.09%)</title><rect x="1026.7" y="1043.0" width="36.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1029.7" y="1054.0">com..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.readIdentifiedDataSerializable (1,292 samples, 3.08%)</title><rect x="1026.8" y="1027.0" width="36.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1029.8" y="1038.0">com..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (18 samples, 0.04%)</title><rect x="1026.9" y="1011.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1029.9" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (16 samples, 0.04%)</title><rect x="1027.0" y="995.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1030.0" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readInt (15 samples, 0.04%)</title><rect x="1027.0" y="979.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1030.0" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readInt (15 samples, 0.04%)</title><rect x="1027.0" y="963.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1030.0" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readIntB (14 samples, 0.03%)</title><rect x="1027.0" y="947.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1030.0" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (11 samples, 0.03%)</title><rect x="1027.1" y="931.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1030.1" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (11 samples, 0.03%)</title><rect x="1027.1" y="915.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1030.1" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.createIdentifiedDataSerializable (33 samples, 0.08%)</title><rect x="1027.4" y="1011.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1030.4" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/Int2ObjectHashMap.get (10 samples, 0.02%)</title><rect x="1027.8" y="995.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1030.8" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/SpiDataSerializerHook$1.create (11 samples, 0.03%)</title><rect x="1028.0" y="995.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1031.0" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/VersionedObjectDataInput.setVersion (32 samples, 0.08%)</title><rect x="1028.3" y="1011.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1031.3" y="1022.0"></text>
</g>
<g>
<title>itable stub (19 samples, 0.05%)</title><rect x="1028.7" y="995.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1031.7" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.readData (1,202 samples, 2.86%)</title><rect x="1029.3" y="1011.0" width="33.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1032.3" y="1022.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readLong (22 samples, 0.05%)</title><rect x="1029.5" y="995.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1032.5" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readLong (22 samples, 0.05%)</title><rect x="1029.5" y="979.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1032.5" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readLong (22 samples, 0.05%)</title><rect x="1029.5" y="963.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1032.5" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readLong (21 samples, 0.05%)</title><rect x="1029.5" y="947.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1032.5" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readLongB (20 samples, 0.05%)</title><rect x="1029.5" y="931.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1032.5" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (15 samples, 0.04%)</title><rect x="1029.7" y="915.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1032.7" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (12 samples, 0.03%)</title><rect x="1029.8" y="899.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1032.8" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/operations/Backup.readInternal (1,162 samples, 2.77%)</title><rect x="1030.4" y="995.0" width="32.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1033.4" y="1006.0">co..</text>
</g>
<g>
<title>com/hazelcast/cluster/Address.readData (49 samples, 0.12%)</title><rect x="1030.6" y="979.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1033.6" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readUTF (41 samples, 0.10%)</title><rect x="1030.8" y="963.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1033.8" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (18 samples, 0.04%)</title><rect x="1030.8" y="947.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1033.8" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (18 samples, 0.04%)</title><rect x="1030.8" y="931.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1033.8" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readInt (16 samples, 0.04%)</title><rect x="1030.8" y="915.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1033.8" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readInt (15 samples, 0.04%)</title><rect x="1030.9" y="899.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1033.9" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readIntB (14 samples, 0.03%)</title><rect x="1030.9" y="883.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1033.9" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (13 samples, 0.03%)</title><rect x="1030.9" y="867.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1033.9" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (13 samples, 0.03%)</title><rect x="1030.9" y="851.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1033.9" y="862.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (23 samples, 0.05%)</title><rect x="1031.3" y="947.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1034.3" y="958.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (15 samples, 0.04%)</title><rect x="1031.5" y="931.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1034.5" y="942.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (10 samples, 0.02%)</title><rect x="1031.6" y="915.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1034.6" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readBoolean (15 samples, 0.04%)</title><rect x="1032.0" y="979.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1035.0" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.read (12 samples, 0.03%)</title><rect x="1032.1" y="963.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1035.1" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readObject (1,091 samples, 2.60%)</title><rect x="1032.4" y="979.0" width="30.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1035.4" y="990.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.readObject (1,091 samples, 2.60%)</title><rect x="1032.4" y="963.0" width="30.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1035.4" y="974.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.serializerFor (12 samples, 0.03%)</title><rect x="1032.8" y="947.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1035.8" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (16 samples, 0.04%)</title><rect x="1033.1" y="947.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1036.1" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (11 samples, 0.03%)</title><rect x="1033.2" y="931.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1036.2" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readInt (10 samples, 0.02%)</title><rect x="1033.3" y="915.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1036.3" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readInt (10 samples, 0.02%)</title><rect x="1033.3" y="899.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1036.3" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readIntB (9 samples, 0.02%)</title><rect x="1033.3" y="883.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1036.3" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/StreamSerializerAdapter.read (1,050 samples, 2.50%)</title><rect x="1033.5" y="947.0" width="29.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1036.5" y="958.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.read (1,050 samples, 2.50%)</title><rect x="1033.5" y="931.0" width="29.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1036.5" y="942.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.read (1,050 samples, 2.50%)</title><rect x="1033.5" y="915.0" width="29.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1036.5" y="926.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.doRead (1,050 samples, 2.50%)</title><rect x="1033.5" y="899.0" width="29.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1036.5" y="910.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.readIdentifiedDataSerializable (1,050 samples, 2.50%)</title><rect x="1033.5" y="883.0" width="29.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1036.5" y="894.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (9 samples, 0.02%)</title><rect x="1033.6" y="867.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1036.6" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.createIdentifiedDataSerializable (62 samples, 0.15%)</title><rect x="1033.9" y="867.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1036.9" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ArrayDataSerializableFactory.create (39 samples, 0.09%)</title><rect x="1034.4" y="851.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1037.4" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapDataSerializerHook$$Lambda$310/124323713.createNew (10 samples, 0.02%)</title><rect x="1035.1" y="835.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1038.1" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapDataSerializerHook.lambda$createFactory$3 (9 samples, 0.02%)</title><rect x="1035.1" y="819.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1038.1" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/VersionedObjectDataInput.setVersion (9 samples, 0.02%)</title><rect x="1035.6" y="867.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1038.6" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.readData (966 samples, 2.30%)</title><rect x="1035.9" y="867.0" width="27.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1038.9" y="878.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readByte (12 samples, 0.03%)</title><rect x="1035.9" y="851.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1038.9" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readLong (25 samples, 0.06%)</title><rect x="1036.2" y="851.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1039.2" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readLong (25 samples, 0.06%)</title><rect x="1036.2" y="835.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1039.2" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readLong (23 samples, 0.05%)</title><rect x="1036.3" y="819.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1039.3" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readLong (23 samples, 0.05%)</title><rect x="1036.3" y="803.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1039.3" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readLongB (17 samples, 0.04%)</title><rect x="1036.4" y="787.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1039.4" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (10 samples, 0.02%)</title><rect x="1036.5" y="771.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1039.5" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (10 samples, 0.02%)</title><rect x="1036.5" y="755.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1039.5" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/PutBackupOperation.readInternal (927 samples, 2.21%)</title><rect x="1037.0" y="851.0" width="26.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1040.0" y="862.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/nio/IOUtil.readData (17 samples, 0.04%)</title><rect x="1037.0" y="835.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1040.0" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readData (17 samples, 0.04%)</title><rect x="1037.0" y="819.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1040.0" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readByteArray (11 samples, 0.03%)</title><rect x="1037.1" y="803.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1040.1" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/Records.readRecord (873 samples, 2.08%)</title><rect x="1037.5" y="835.0" width="24.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1040.5" y="846.0">c..</text>
</g>
<g>
<title>com/hazelcast/map/impl/record/RecordReaderWriter$2.readRecord (870 samples, 2.07%)</title><rect x="1037.5" y="819.0" width="24.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1040.5" y="830.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/nio/IOUtil.readData (222 samples, 0.53%)</title><rect x="1045.3" y="803.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1048.3" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readData (222 samples, 0.53%)</title><rect x="1045.3" y="787.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1048.3" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readByteArray (220 samples, 0.52%)</title><rect x="1045.3" y="771.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1048.3" y="782.0"></text>
</g>
<g>
<title>async_page_fault (10 samples, 0.02%)</title><rect x="1046.0" y="755.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1049.0" y="766.0"></text>
</g>
<g>
<title>__do_page_fault (10 samples, 0.02%)</title><rect x="1046.0" y="739.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1049.0" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (151 samples, 0.36%)</title><rect x="1046.6" y="755.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1049.6" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (150 samples, 0.36%)</title><rect x="1046.7" y="739.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1049.7" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readInt (29 samples, 0.07%)</title><rect x="1047.1" y="723.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1050.1" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readInt (28 samples, 0.07%)</title><rect x="1047.1" y="707.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1050.1" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readIntB (28 samples, 0.07%)</title><rect x="1047.1" y="691.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1050.1" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (21 samples, 0.05%)</title><rect x="1047.3" y="675.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1050.3" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (18 samples, 0.04%)</title><rect x="1047.3" y="659.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1050.3" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (18 samples, 0.04%)</title><rect x="1047.3" y="643.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1050.3" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (18 samples, 0.04%)</title><rect x="1047.3" y="627.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1050.3" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.checkAvailable (107 samples, 0.25%)</title><rect x="1047.9" y="723.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1050.9" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (105 samples, 0.25%)</title><rect x="1047.9" y="707.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1050.9" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (103 samples, 0.25%)</title><rect x="1048.0" y="691.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1051.0" y="702.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab_event(KlassHandle, unsigned long) (35 samples, 0.08%)</title><rect x="1048.3" y="675.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1051.3" y="686.0"></text>
</g>
<g>
<title>JfrTraceEvent&lt;EventAllocObjectOutsideTLAB&gt;::writeEvent() (35 samples, 0.08%)</title><rect x="1048.3" y="659.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1051.3" y="670.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::record(int) (34 samples, 0.08%)</title><rect x="1048.3" y="643.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1051.3" y="654.0"></text>
</g>
<g>
<title>JfrStackTrace::record(JavaThread*, int) (25 samples, 0.06%)</title><rect x="1048.3" y="627.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1051.3" y="638.0"></text>
</g>
<g>
<title>Method::line_number_from_bci(int) const (9 samples, 0.02%)</title><rect x="1048.7" y="611.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1051.7" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (53 samples, 0.13%)</title><rect x="1049.3" y="675.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1052.3" y="686.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (53 samples, 0.13%)</title><rect x="1049.3" y="659.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1052.3" y="670.0"></text>
</g>
<g>
<title>JfrTraceEvent&lt;EventAllocObjectInNewTLAB&gt;::writeEvent() (53 samples, 0.13%)</title><rect x="1049.3" y="643.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1052.3" y="654.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::record(int) (51 samples, 0.12%)</title><rect x="1049.4" y="627.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1052.4" y="638.0"></text>
</g>
<g>
<title>JfrStackTrace::record(JavaThread*, int) (29 samples, 0.07%)</title><rect x="1049.4" y="611.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1052.4" y="622.0"></text>
</g>
<g>
<title>JfrTypeIDs::jfr_use_methodID(Method*) (10 samples, 0.02%)</title><rect x="1049.5" y="595.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1052.5" y="606.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::add(JfrStackTrace const&amp;) (14 samples, 0.03%)</title><rect x="1050.2" y="611.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1053.2" y="622.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (21 samples, 0.05%)</title><rect x="1050.9" y="755.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1053.9" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (354 samples, 0.84%)</title><rect x="1051.5" y="803.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1054.5" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (354 samples, 0.84%)</title><rect x="1051.5" y="787.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1054.5" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readInt (354 samples, 0.84%)</title><rect x="1051.5" y="771.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1054.5" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readInt (353 samples, 0.84%)</title><rect x="1051.6" y="755.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1054.6" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readIntB (353 samples, 0.84%)</title><rect x="1051.6" y="739.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1054.6" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (353 samples, 0.84%)</title><rect x="1051.6" y="723.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1054.6" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (341 samples, 0.81%)</title><rect x="1051.9" y="707.0" width="9.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1054.9" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (312 samples, 0.74%)</title><rect x="1052.7" y="691.0" width="8.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1055.7" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/DataRecordWithStats.&lt;init&gt; (10 samples, 0.02%)</title><rect x="1061.5" y="803.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1064.5" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/AbstractRecordWithStats.&lt;init&gt; (10 samples, 0.02%)</title><rect x="1061.5" y="787.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1064.5" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/AbstractRecord.&lt;init&gt; (10 samples, 0.02%)</title><rect x="1061.5" y="771.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1064.5" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/AbstractNamedOperation.readInternal (23 samples, 0.05%)</title><rect x="1062.0" y="835.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1065.0" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readUTF (21 samples, 0.05%)</title><rect x="1062.0" y="819.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1065.0" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (14 samples, 0.03%)</title><rect x="1062.2" y="803.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1065.2" y="814.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (14 samples, 0.03%)</title><rect x="1062.2" y="787.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1065.2" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (13 samples, 0.03%)</title><rect x="1062.7" y="835.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1065.7" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/bufferpool/BufferPoolThreadLocal.get (11 samples, 0.03%)</title><rect x="1063.1" y="1091.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1066.1" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/usercodedeployment/impl/ClassLocator.onFinishDeserialization (11 samples, 0.03%)</title><rect x="1063.4" y="1091.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1066.4" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/usercodedeployment/impl/ThreadLocalClassCache.onFinishDeserialization (11 samples, 0.03%)</title><rect x="1063.4" y="1075.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1066.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.02%)</title><rect x="1063.5" y="1059.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1066.5" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.call (971 samples, 2.31%)</title><rect x="1064.0" y="1123.0" width="27.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1067.0" y="1134.0">c..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.call (969 samples, 2.31%)</title><rect x="1064.0" y="1107.0" width="27.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1067.0" y="1118.0">c..</text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapPartitionDestroyOperation.run (967 samples, 2.30%)</title><rect x="1064.1" y="1091.0" width="27.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1067.1" y="1102.0">c..</text>
</g>
<g>
<title>com/hazelcast/map/impl/EnterprisePartitionContainer.destroyMap (967 samples, 2.30%)</title><rect x="1064.1" y="1075.0" width="27.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1067.1" y="1086.0">c..</text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.destroyMap (967 samples, 2.30%)</title><rect x="1064.1" y="1059.0" width="27.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1067.1" y="1070.0">c..</text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.destroy (967 samples, 2.30%)</title><rect x="1064.1" y="1043.0" width="27.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1067.1" y="1054.0">c..</text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.clearPartition (967 samples, 2.30%)</title><rect x="1064.1" y="1027.0" width="27.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1067.1" y="1038.0">c..</text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.destroyStorageAfterClear (966 samples, 2.30%)</title><rect x="1064.1" y="1011.0" width="27.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1067.1" y="1022.0">c..</text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.clearStorage (966 samples, 2.30%)</title><rect x="1064.1" y="995.0" width="27.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1067.1" y="1006.0">c..</text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.clear (966 samples, 2.30%)</title><rect x="1064.1" y="979.0" width="27.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1067.1" y="990.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.clear (966 samples, 2.30%)</title><rect x="1064.1" y="963.0" width="27.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1067.1" y="974.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap$SlotIter.nextSlot (16 samples, 0.04%)</title><rect x="1064.2" y="947.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1067.2" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap$SlotIter.advance (11 samples, 0.03%)</title><rect x="1064.3" y="931.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1067.3" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap$SlotIter.remove (944 samples, 2.25%)</title><rect x="1064.7" y="947.0" width="26.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1067.7" y="958.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap$KeyIter.removeInternal (941 samples, 2.24%)</title><rect x="1064.8" y="931.0" width="26.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1067.8" y="942.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap$SlotIter.removeInternal (936 samples, 2.23%)</title><rect x="1064.9" y="915.0" width="26.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1067.9" y="926.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BehmSlotAccessor.getKey (12 samples, 0.03%)</title><rect x="1065.5" y="899.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1068.5" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BehmSlotAccessor.slotBase (12 samples, 0.03%)</title><rect x="1065.5" y="883.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1068.5" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BehmSlotAccessor.isAssigned (17 samples, 0.04%)</title><rect x="1065.8" y="899.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1068.8" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BehmSlotAccessor.getKey (11 samples, 0.03%)</title><rect x="1066.0" y="883.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1069.0" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BehmSlotAccessor.slotBase (11 samples, 0.03%)</title><rect x="1066.0" y="867.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1069.0" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap$SlotIter.readIntoKeyHolder (15 samples, 0.04%)</title><rect x="1066.3" y="899.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1069.3" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryData.reset (9 samples, 0.02%)</title><rect x="1066.5" y="883.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1069.5" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.access$010 (30 samples, 0.07%)</title><rect x="1066.7" y="899.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1069.7" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.access$200 (9 samples, 0.02%)</title><rect x="1067.6" y="899.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1070.6" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.access$500 (58 samples, 0.14%)</title><rect x="1068.0" y="899.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1071.0" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.shiftConflictingKeys (50 samples, 0.12%)</title><rect x="1068.2" y="883.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1071.2" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BehmSlotAccessor.isAssigned (24 samples, 0.06%)</title><rect x="1068.4" y="867.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1071.4" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BehmSlotAccessor.getKey (9 samples, 0.02%)</title><rect x="1068.8" y="851.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1071.8" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BehmSlotAccessor.slotBase (9 samples, 0.02%)</title><rect x="1068.8" y="835.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1071.8" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryDataUtil.hashCode (15 samples, 0.04%)</title><rect x="1069.2" y="867.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1072.2" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryDataUtil.readDataSize (10 samples, 0.02%)</title><rect x="1069.2" y="851.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1072.2" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.dispose (574 samples, 1.37%)</title><rect x="1069.6" y="899.0" width="16.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1072.6" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.dispose (558 samples, 1.33%)</title><rect x="1070.0" y="883.0" width="15.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1073.0" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.dispose (556 samples, 1.32%)</title><rect x="1070.1" y="867.0" width="15.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1073.1" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.disposeValue (375 samples, 0.89%)</title><rect x="1070.3" y="851.0" width="10.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1073.3" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.disposeData (373 samples, 0.89%)</title><rect x="1070.4" y="835.0" width="10.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1073.4" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.disposeData (362 samples, 0.86%)</title><rect x="1070.5" y="819.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1073.5" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.disposeData (352 samples, 0.84%)</title><rect x="1070.7" y="803.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1073.7" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.disposeDataInternal (352 samples, 0.84%)</title><rect x="1070.7" y="787.0" width="9.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1073.7" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.free (342 samples, 0.81%)</title><rect x="1071.0" y="771.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1074.0" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.free (337 samples, 0.80%)</title><rect x="1071.1" y="755.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1074.1" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (119 samples, 0.28%)</title><rect x="1071.8" y="739.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1074.8" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (77 samples, 0.18%)</title><rect x="1072.0" y="723.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1075.0" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (51 samples, 0.12%)</title><rect x="1072.2" y="707.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1075.2" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (43 samples, 0.10%)</title><rect x="1072.2" y="691.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1075.2" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (43 samples, 0.10%)</title><rect x="1072.2" y="675.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1075.2" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (32 samples, 0.08%)</title><rect x="1072.3" y="659.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1075.3" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (20 samples, 0.05%)</title><rect x="1072.6" y="643.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1075.6" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (15 samples, 0.04%)</title><rect x="1072.7" y="627.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1075.7" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isValidAndAvailable (19 samples, 0.05%)</title><rect x="1073.6" y="707.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1076.6" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (14 samples, 0.03%)</title><rect x="1073.7" y="691.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1076.7" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.release (33 samples, 0.08%)</title><rect x="1074.2" y="723.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1077.2" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.compact (12 samples, 0.03%)</title><rect x="1074.3" y="707.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1077.3" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.resizeQueue (16 samples, 0.04%)</title><rect x="1074.7" y="707.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1077.7" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/queue/LongArrayQueue.&lt;init&gt; (16 samples, 0.04%)</title><rect x="1074.7" y="691.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1077.7" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.zeroOut (156 samples, 0.37%)</title><rect x="1075.2" y="739.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1078.2" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.setMemory (156 samples, 0.37%)</title><rect x="1075.2" y="723.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1078.2" y="734.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (156 samples, 0.37%)</title><rect x="1075.2" y="707.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1078.2" y="718.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (156 samples, 0.37%)</title><rect x="1075.2" y="691.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1078.2" y="702.0"></text>
</g>
<g>
<title>Unsafe_SetMemory2 (152 samples, 0.36%)</title><rect x="1075.3" y="675.0" width="4.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1078.3" y="686.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (143 samples, 0.34%)</title><rect x="1075.3" y="659.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1078.3" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PooledNativeMemoryStats.removeUsedNativeMemory (15 samples, 0.04%)</title><rect x="1079.5" y="739.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1082.5" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.markAvailable (17 samples, 0.04%)</title><rect x="1080.1" y="739.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1083.1" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.putByte (17 samples, 0.04%)</title><rect x="1080.1" y="723.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1083.1" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.free (158 samples, 0.38%)</title><rect x="1081.1" y="851.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1084.1" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.free (151 samples, 0.36%)</title><rect x="1081.2" y="835.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1084.2" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (107 samples, 0.25%)</title><rect x="1081.8" y="819.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1084.8" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (80 samples, 0.19%)</title><rect x="1081.9" y="803.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1084.9" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (65 samples, 0.15%)</title><rect x="1082.2" y="787.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1085.2" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (61 samples, 0.15%)</title><rect x="1082.2" y="771.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1085.2" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (57 samples, 0.14%)</title><rect x="1082.2" y="755.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1085.2" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (40 samples, 0.10%)</title><rect x="1082.5" y="739.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1085.5" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (23 samples, 0.05%)</title><rect x="1082.8" y="723.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1085.8" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (19 samples, 0.05%)</title><rect x="1082.9" y="707.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1085.9" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.release (9 samples, 0.02%)</title><rect x="1083.6" y="739.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1086.6" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.release (22 samples, 0.05%)</title><rect x="1084.2" y="803.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1087.2" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.resizeQueue (10 samples, 0.02%)</title><rect x="1084.5" y="787.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1087.5" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/queue/LongArrayQueue.&lt;init&gt; (10 samples, 0.02%)</title><rect x="1084.5" y="771.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1087.5" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PooledNativeMemoryStats.removeUsedNativeMemory (15 samples, 0.04%)</title><rect x="1084.9" y="819.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1087.9" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.disposeData (194 samples, 0.46%)</title><rect x="1085.7" y="899.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1088.7" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.getSize (23 samples, 0.05%)</title><rect x="1086.2" y="883.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1089.2" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getAllocatedSize (23 samples, 0.05%)</title><rect x="1086.2" y="867.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1089.2" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.getAllocatedSize (20 samples, 0.05%)</title><rect x="1086.2" y="851.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1089.2" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.getSizeInternal (20 samples, 0.05%)</title><rect x="1086.2" y="835.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1089.2" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (19 samples, 0.05%)</title><rect x="1086.3" y="819.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1089.3" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (19 samples, 0.05%)</title><rect x="1086.3" y="803.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1089.3" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (19 samples, 0.05%)</title><rect x="1086.3" y="787.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1089.3" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (18 samples, 0.04%)</title><rect x="1086.3" y="771.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1089.3" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (18 samples, 0.04%)</title><rect x="1086.3" y="755.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1089.3" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.disposeData (153 samples, 0.36%)</title><rect x="1086.9" y="883.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1089.9" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.disposeDataInternal (153 samples, 0.36%)</title><rect x="1086.9" y="867.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1089.9" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.free (144 samples, 0.34%)</title><rect x="1087.1" y="851.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1090.1" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.free (140 samples, 0.33%)</title><rect x="1087.1" y="835.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1090.1" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (89 samples, 0.21%)</title><rect x="1087.8" y="819.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1090.8" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (52 samples, 0.12%)</title><rect x="1088.1" y="803.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1091.1" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (30 samples, 0.07%)</title><rect x="1088.4" y="787.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1091.4" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (27 samples, 0.06%)</title><rect x="1088.5" y="771.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1091.5" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (26 samples, 0.06%)</title><rect x="1088.5" y="755.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1091.5" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (12 samples, 0.03%)</title><rect x="1088.6" y="739.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1091.6" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.release (10 samples, 0.02%)</title><rect x="1089.0" y="739.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1092.0" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isValidAndAvailable (9 samples, 0.02%)</title><rect x="1089.3" y="787.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1092.3" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.release (25 samples, 0.06%)</title><rect x="1089.6" y="803.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1092.6" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.compact (9 samples, 0.02%)</title><rect x="1089.8" y="787.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1092.8" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PooledNativeMemoryStats.removeUsedNativeMemory (14 samples, 0.03%)</title><rect x="1090.5" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1093.5" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.ensureValidMember (20 samples, 0.05%)</title><rect x="1091.3" y="1123.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1094.3" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/ClusterServiceImpl.getMember (17 samples, 0.04%)</title><rect x="1091.3" y="1107.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1094.3" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/MembershipManager.getMember (15 samples, 0.04%)</title><rect x="1091.4" y="1091.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1094.4" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.publishCurrentTask (18 samples, 0.04%)</title><rect x="1091.8" y="1123.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1094.8" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.run (2,814 samples, 6.70%)</title><rect x="1092.3" y="1123.0" width="79.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1095.3" y="1134.0">com/hazel..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.call (2,543 samples, 6.06%)</title><rect x="1092.5" y="1107.0" width="71.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1095.5" y="1118.0">com/haze..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.call (1,879 samples, 4.47%)</title><rect x="1092.7" y="1091.0" width="52.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1095.7" y="1102.0">com/h..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/operations/Backup.run (1,859 samples, 4.43%)</title><rect x="1092.9" y="1075.0" width="52.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1095.9" y="1086.0">com/h..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/OperationRunner.runDirect (1,840 samples, 4.38%)</title><rect x="1093.2" y="1059.0" width="51.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1096.2" y="1070.0">com/h..</text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.afterRun (486 samples, 1.16%)</title><rect x="1093.3" y="1043.0" width="13.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1096.3" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/PutBackupOperation.afterRunInternal (479 samples, 1.14%)</title><rect x="1093.4" y="1027.0" width="13.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1096.4" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.evict (479 samples, 1.14%)</title><rect x="1093.4" y="1011.0" width="13.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1096.4" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.disposeDeferredBlocks (478 samples, 1.14%)</title><rect x="1093.4" y="995.0" width="13.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1096.4" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapServiceContextImpl.getExistingRecordStore (12 samples, 0.03%)</title><rect x="1093.4" y="979.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1096.4" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.getExistingRecordStore (11 samples, 0.03%)</title><rect x="1093.5" y="963.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1096.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 0.03%)</title><rect x="1093.5" y="947.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1096.5" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.disposeDeferredBlocks (465 samples, 1.11%)</title><rect x="1093.8" y="979.0" width="13.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1096.8" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.disposeDeferredBlocks (465 samples, 1.11%)</title><rect x="1093.8" y="963.0" width="13.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1096.8" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.disposeDeferredBlocks (464 samples, 1.10%)</title><rect x="1093.8" y="947.0" width="13.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1096.8" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.disposeDeferredBlocks (463 samples, 1.10%)</title><rect x="1093.8" y="931.0" width="13.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1096.8" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.disposeData (455 samples, 1.08%)</title><rect x="1094.0" y="915.0" width="12.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1097.0" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.disposeData (454 samples, 1.08%)</title><rect x="1094.0" y="899.0" width="12.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1097.0" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.getSize (10 samples, 0.02%)</title><rect x="1094.1" y="883.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1097.1" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getAllocatedSize (9 samples, 0.02%)</title><rect x="1094.1" y="867.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1097.1" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.disposeData (443 samples, 1.05%)</title><rect x="1094.3" y="883.0" width="12.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1097.3" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.disposeDataInternal (443 samples, 1.05%)</title><rect x="1094.3" y="867.0" width="12.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1097.3" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.free (442 samples, 1.05%)</title><rect x="1094.3" y="851.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1097.3" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.free (442 samples, 1.05%)</title><rect x="1094.3" y="835.0" width="12.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1097.3" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (9 samples, 0.02%)</title><rect x="1094.7" y="819.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1097.7" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.zeroOut (369 samples, 0.88%)</title><rect x="1094.9" y="819.0" width="10.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1097.9" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.setMemory (367 samples, 0.87%)</title><rect x="1095.0" y="803.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1098.0" y="814.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (367 samples, 0.87%)</title><rect x="1095.0" y="787.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1098.0" y="798.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (366 samples, 0.87%)</title><rect x="1095.0" y="771.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1098.0" y="782.0"></text>
</g>
<g>
<title>Unsafe_SetMemory2 (352 samples, 0.84%)</title><rect x="1095.4" y="755.0" width="9.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1098.4" y="766.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (323 samples, 0.77%)</title><rect x="1095.6" y="739.0" width="9.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.6" y="750.0"></text>
</g>
<g>
<title>ret_from_intr (10 samples, 0.02%)</title><rect x="1104.4" y="723.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1107.4" y="734.0"></text>
</g>
<g>
<title>do_IRQ (10 samples, 0.02%)</title><rect x="1104.4" y="707.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1107.4" y="718.0"></text>
</g>
<g>
<title>irq_exit (10 samples, 0.02%)</title><rect x="1104.4" y="691.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1107.4" y="702.0"></text>
</g>
<g>
<title>__softirqentry_text_start (10 samples, 0.02%)</title><rect x="1104.4" y="675.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1107.4" y="686.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (15 samples, 0.04%)</title><rect x="1104.7" y="739.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.7" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PooledNativeMemoryStats.removeUsedNativeMemory (10 samples, 0.02%)</title><rect x="1105.3" y="819.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1108.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.addAndGet (9 samples, 0.02%)</title><rect x="1105.3" y="803.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1108.3" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.markAvailable (37 samples, 0.09%)</title><rect x="1105.7" y="819.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1108.7" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.putByte (33 samples, 0.08%)</title><rect x="1105.8" y="803.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1108.8" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.beforeRun (116 samples, 0.28%)</title><rect x="1106.9" y="1043.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1109.9" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.getRecordStoreOrNull (106 samples, 0.25%)</title><rect x="1107.2" y="1027.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1110.2" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.getRecordStore (99 samples, 0.24%)</title><rect x="1107.4" y="1011.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1110.4" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutSynchronized (86 samples, 0.20%)</title><rect x="1107.7" y="995.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1110.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (74 samples, 0.18%)</title><rect x="1108.0" y="979.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1111.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (12 samples, 0.03%)</title><rect x="1109.7" y="963.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1112.7" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.call (1,237 samples, 2.95%)</title><rect x="1110.2" y="1043.0" width="34.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1113.2" y="1054.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.run (1,233 samples, 2.94%)</title><rect x="1110.3" y="1027.0" width="34.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1113.3" y="1038.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/PutBackupOperation.runInternal (1,232 samples, 2.93%)</title><rect x="1110.3" y="1011.0" width="34.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1113.3" y="1022.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.putBackup (1,224 samples, 2.91%)</title><rect x="1110.4" y="995.0" width="34.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1113.4" y="1006.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.putBackupInternal (1,221 samples, 2.91%)</title><rect x="1110.5" y="979.0" width="34.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1113.5" y="990.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.getValue (94 samples, 0.22%)</title><rect x="1110.6" y="963.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1113.6" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.getValue (94 samples, 0.22%)</title><rect x="1110.6" y="947.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1113.6" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryData.reset (84 samples, 0.20%)</title><rect x="1110.7" y="931.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1113.7" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryData.totalSize (84 samples, 0.20%)</title><rect x="1110.7" y="915.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1113.7" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryDataUtil.readTotalSize (82 samples, 0.20%)</title><rect x="1110.7" y="899.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1113.7" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.getValueAddress (9 samples, 0.02%)</title><rect x="1113.0" y="931.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1116.0" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.readLong (9 samples, 0.02%)</title><rect x="1113.0" y="915.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1116.0" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.markRecordStoreExpirable (41 samples, 0.10%)</title><rect x="1113.3" y="963.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1116.3" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.isRecordStoreExpirable (12 samples, 0.03%)</title><rect x="1113.3" y="947.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1116.3" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/EnterpriseRecordStore.isTtlDefined (27 samples, 0.06%)</title><rect x="1113.7" y="947.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1116.7" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (14 samples, 0.03%)</title><rect x="1114.0" y="931.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1117.0" y="942.0"></text>
</g>
<g>
<title>gettimeofday (13 samples, 0.03%)</title><rect x="1114.0" y="915.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1117.0" y="926.0"></text>
</g>
<g>
<title>[vdso] (11 samples, 0.03%)</title><rect x="1114.1" y="899.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1117.1" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.updateRecord (404 samples, 0.96%)</title><rect x="1114.5" y="963.0" width="11.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1117.5" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/ExpirationTimeSetter.setExpirationTimes (69 samples, 0.16%)</title><rect x="1114.5" y="947.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1117.5" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/ExpirationTimeSetter.setExpirationTime (67 samples, 0.16%)</title><rect x="1114.6" y="931.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1117.6" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/ExpirationTimeSetter.calculateExpirationTime (65 samples, 0.15%)</title><rect x="1114.6" y="915.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1117.6" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/ExpirationTimeSetter.sumForExpiration (14 samples, 0.03%)</title><rect x="1115.8" y="899.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1118.8" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/Record.onAccess (15 samples, 0.04%)</title><rect x="1116.5" y="947.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1119.5" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/CompositeMutationObserver.onUpdateRecord (53 samples, 0.13%)</title><rect x="1117.2" y="947.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1120.2" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/JsonMetadataMutationObserver.onUpdateRecord (29 samples, 0.07%)</title><rect x="1117.7" y="931.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1120.7" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/JsonMetadataMutationObserver.updateValueMetadataIfNecessary (28 samples, 0.07%)</title><rect x="1117.8" y="915.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1120.8" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDJsonMetadataMutationObserver.getMetadata (23 samples, 0.05%)</title><rect x="1117.9" y="899.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1120.9" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/MetadataStore.get (23 samples, 0.05%)</title><rect x="1117.9" y="883.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1120.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 0.03%)</title><rect x="1118.2" y="867.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1121.2" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.updateRecordValue (254 samples, 0.60%)</title><rect x="1118.7" y="947.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1121.7" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.updateRecordValue (254 samples, 0.60%)</title><rect x="1118.7" y="931.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1121.7" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/NativeMapEntryCostEstimator.calculateValueCost (95 samples, 0.23%)</title><rect x="1119.6" y="915.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1122.6" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/NativeMapEntryCostEstimator.calculateValueCost (94 samples, 0.22%)</title><rect x="1119.7" y="899.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1122.7" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/NativeMapEntryCostEstimator.getSize (93 samples, 0.22%)</title><rect x="1119.7" y="883.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1122.7" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.getSize (93 samples, 0.22%)</title><rect x="1119.7" y="867.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1122.7" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.getSize (93 samples, 0.22%)</title><rect x="1119.7" y="851.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1122.7" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getAllocatedSize (88 samples, 0.21%)</title><rect x="1119.8" y="835.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1122.8" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.getAllocatedSize (67 samples, 0.16%)</title><rect x="1119.8" y="819.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1122.8" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.getSizeInternal (67 samples, 0.16%)</title><rect x="1119.8" y="803.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1122.8" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (66 samples, 0.16%)</title><rect x="1119.8" y="787.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1122.8" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (66 samples, 0.16%)</title><rect x="1119.8" y="771.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1122.8" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (58 samples, 0.14%)</title><rect x="1120.0" y="755.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1123.0" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (58 samples, 0.14%)</title><rect x="1120.0" y="739.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1123.0" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (57 samples, 0.14%)</title><rect x="1120.0" y="723.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1123.0" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.isSlotAssigned (41 samples, 0.10%)</title><rect x="1120.4" y="707.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1123.4" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.isAssigned (41 samples, 0.10%)</title><rect x="1120.4" y="691.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1123.4" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getMemoryManager (21 samples, 0.05%)</title><rect x="1121.7" y="819.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1124.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (20 samples, 0.05%)</title><rect x="1121.7" y="803.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1124.7" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.toNative (120 samples, 0.29%)</title><rect x="1122.4" y="915.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1125.4" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.toData (120 samples, 0.29%)</title><rect x="1122.4" y="899.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1125.4" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.getSize (23 samples, 0.05%)</title><rect x="1122.7" y="883.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1125.7" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getAllocatedSize (23 samples, 0.05%)</title><rect x="1122.7" y="867.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1125.7" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.getAllocatedSize (13 samples, 0.03%)</title><rect x="1122.7" y="851.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1125.7" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.getSizeInternal (13 samples, 0.03%)</title><rect x="1122.7" y="835.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1125.7" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (12 samples, 0.03%)</title><rect x="1122.8" y="819.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1125.8" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (12 samples, 0.03%)</title><rect x="1122.8" y="803.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1125.8" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (12 samples, 0.03%)</title><rect x="1122.8" y="787.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1125.8" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (11 samples, 0.03%)</title><rect x="1122.8" y="771.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1125.8" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getMemoryManager (10 samples, 0.02%)</title><rect x="1123.1" y="851.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1126.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.02%)</title><rect x="1123.1" y="835.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1126.1" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toNativeData (87 samples, 0.21%)</title><rect x="1123.4" y="883.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1126.4" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toDataInternal (87 samples, 0.21%)</title><rect x="1123.4" y="867.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1126.4" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertData (85 samples, 0.20%)</title><rect x="1123.4" y="851.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1126.4" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (82 samples, 0.20%)</title><rect x="1123.4" y="835.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1126.4" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (76 samples, 0.18%)</title><rect x="1123.6" y="819.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1126.6" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.allocate (73 samples, 0.17%)</title><rect x="1123.6" y="803.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1126.6" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (73 samples, 0.17%)</title><rect x="1123.6" y="787.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1126.6" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isValidAndAvailable (69 samples, 0.16%)</title><rect x="1123.7" y="771.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1126.7" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (38 samples, 0.09%)</title><rect x="1123.7" y="755.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1126.7" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (38 samples, 0.09%)</title><rect x="1123.7" y="739.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1126.7" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (28 samples, 0.07%)</title><rect x="1124.0" y="723.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1127.0" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (28 samples, 0.07%)</title><rect x="1124.0" y="707.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1127.0" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (31 samples, 0.07%)</title><rect x="1124.8" y="755.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1127.8" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (31 samples, 0.07%)</title><rect x="1124.8" y="739.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1127.8" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (31 samples, 0.07%)</title><rect x="1124.8" y="723.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1127.8" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (31 samples, 0.07%)</title><rect x="1124.8" y="707.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1127.8" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (31 samples, 0.07%)</title><rect x="1124.8" y="691.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1127.8" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.isSlotAssigned (10 samples, 0.02%)</title><rect x="1124.9" y="675.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1127.9" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.isAssigned (10 samples, 0.02%)</title><rect x="1124.9" y="659.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1127.9" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.mask (15 samples, 0.04%)</title><rect x="1125.2" y="675.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1128.2" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.capacity (15 samples, 0.04%)</title><rect x="1125.2" y="659.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1128.2" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.getRecordOrNull (250 samples, 0.60%)</title><rect x="1125.9" y="963.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1128.9" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (243 samples, 0.58%)</title><rect x="1126.1" y="947.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1129.1" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (236 samples, 0.56%)</title><rect x="1126.3" y="931.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1129.3" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get (229 samples, 0.55%)</title><rect x="1126.5" y="915.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1129.5" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get0 (228 samples, 0.54%)</title><rect x="1126.5" y="899.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1129.5" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BehmSlotAccessor.isAssigned (74 samples, 0.18%)</title><rect x="1126.6" y="883.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1129.6" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.ensureMemory (12 samples, 0.03%)</title><rect x="1128.8" y="883.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1131.8" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryDataUtil.equals (133 samples, 0.32%)</title><rect x="1129.2" y="883.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1132.2" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryDataUtil.readType (127 samples, 0.30%)</title><rect x="1129.3" y="867.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1132.3" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/EnterpriseRecordStore.createRecord (379 samples, 0.90%)</title><rect x="1132.9" y="963.0" width="10.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1135.9" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/EnterpriseRecordStore.createRecordInternal (376 samples, 0.90%)</title><rect x="1133.0" y="947.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1136.0" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.createRecord (376 samples, 0.90%)</title><rect x="1133.0" y="931.0" width="10.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1136.0" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.createRecord (376 samples, 0.90%)</title><rect x="1133.0" y="915.0" width="10.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1136.0" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecordFactory.newRecord (373 samples, 0.89%)</title><rect x="1133.0" y="899.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1136.0" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.allocate (19 samples, 0.05%)</title><rect x="1133.1" y="883.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1136.1" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (17 samples, 0.04%)</title><rect x="1133.1" y="867.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1136.1" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.allocate (15 samples, 0.04%)</title><rect x="1133.1" y="851.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1136.1" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (14 samples, 0.03%)</title><rect x="1133.2" y="835.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1136.2" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.toData (346 samples, 0.82%)</title><rect x="1133.7" y="883.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1136.7" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toNativeData (340 samples, 0.81%)</title><rect x="1133.9" y="867.0" width="9.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1136.9" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toDataInternal (340 samples, 0.81%)</title><rect x="1133.9" y="851.0" width="9.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1136.9" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertData (340 samples, 0.81%)</title><rect x="1133.9" y="835.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1136.9" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (340 samples, 0.81%)</title><rect x="1133.9" y="819.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1136.9" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.copyFrom (52 samples, 0.12%)</title><rect x="1133.9" y="803.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1136.9" y="814.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (52 samples, 0.12%)</title><rect x="1133.9" y="787.0" width="1.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1136.9" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (288 samples, 0.69%)</title><rect x="1135.3" y="803.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1138.3" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.allocate (288 samples, 0.69%)</title><rect x="1135.3" y="787.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1138.3" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (288 samples, 0.69%)</title><rect x="1135.3" y="771.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1138.3" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (281 samples, 0.67%)</title><rect x="1135.3" y="755.0" width="7.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1138.3" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (281 samples, 0.67%)</title><rect x="1135.3" y="739.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1138.3" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (281 samples, 0.67%)</title><rect x="1135.3" y="723.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1138.3" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (281 samples, 0.67%)</title><rect x="1135.3" y="707.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1138.3" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (280 samples, 0.67%)</title><rect x="1135.3" y="691.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1138.3" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (280 samples, 0.67%)</title><rect x="1135.3" y="675.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1138.3" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (280 samples, 0.67%)</title><rect x="1135.3" y="659.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1138.3" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (280 samples, 0.67%)</title><rect x="1135.3" y="643.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1138.3" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (279 samples, 0.66%)</title><rect x="1135.3" y="627.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1138.3" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (279 samples, 0.66%)</title><rect x="1135.3" y="611.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1138.3" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (279 samples, 0.66%)</title><rect x="1135.3" y="595.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1138.3" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (279 samples, 0.66%)</title><rect x="1135.3" y="579.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1138.3" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (279 samples, 0.66%)</title><rect x="1135.3" y="563.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1138.3" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (279 samples, 0.66%)</title><rect x="1135.3" y="547.0" width="7.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1138.3" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (279 samples, 0.66%)</title><rect x="1135.3" y="531.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1138.3" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (279 samples, 0.66%)</title><rect x="1135.3" y="515.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1138.3" y="526.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (279 samples, 0.66%)</title><rect x="1135.3" y="499.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1138.3" y="510.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.zeroOut (46 samples, 0.11%)</title><rect x="1135.3" y="483.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1138.3" y="494.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.setMemory (46 samples, 0.11%)</title><rect x="1135.3" y="467.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1138.3" y="478.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (46 samples, 0.11%)</title><rect x="1135.3" y="451.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1138.3" y="462.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (46 samples, 0.11%)</title><rect x="1135.3" y="435.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1138.3" y="446.0"></text>
</g>
<g>
<title>Unsafe_SetMemory2 (46 samples, 0.11%)</title><rect x="1135.3" y="419.0" width="1.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1138.3" y="430.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (46 samples, 0.11%)</title><rect x="1135.3" y="403.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.3" y="414.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/StandardMemoryManager.allocate (233 samples, 0.55%)</title><rect x="1136.6" y="483.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1139.6" y="494.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.setMemory (232 samples, 0.55%)</title><rect x="1136.6" y="467.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1139.6" y="478.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (232 samples, 0.55%)</title><rect x="1136.6" y="451.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1139.6" y="462.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (232 samples, 0.55%)</title><rect x="1136.6" y="435.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1139.6" y="446.0"></text>
</g>
<g>
<title>Unsafe_SetMemory2 (232 samples, 0.55%)</title><rect x="1136.6" y="419.0" width="6.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1139.6" y="430.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (232 samples, 0.55%)</title><rect x="1136.6" y="403.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.6" y="414.0"></text>
</g>
<g>
<title>async_page_fault (178 samples, 0.42%)</title><rect x="1138.1" y="387.0" width="5.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1141.1" y="398.0"></text>
</g>
<g>
<title>__do_page_fault (178 samples, 0.42%)</title><rect x="1138.1" y="371.0" width="5.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1141.1" y="382.0"></text>
</g>
<g>
<title>handle_mm_fault (122 samples, 0.29%)</title><rect x="1139.5" y="355.0" width="3.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1142.5" y="366.0"></text>
</g>
<g>
<title>__handle_mm_fault (118 samples, 0.28%)</title><rect x="1139.6" y="339.0" width="3.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1142.6" y="350.0"></text>
</g>
<g>
<title>_raw_spin_lock (51 samples, 0.12%)</title><rect x="1139.9" y="323.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1142.9" y="334.0"></text>
</g>
<g>
<title>alloc_pages_vma (34 samples, 0.08%)</title><rect x="1141.3" y="323.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1144.3" y="334.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (34 samples, 0.08%)</title><rect x="1141.3" y="307.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1144.3" y="318.0"></text>
</g>
<g>
<title>get_page_from_freelist (32 samples, 0.08%)</title><rect x="1141.4" y="291.0" width="0.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1144.4" y="302.0"></text>
</g>
<g>
<title>clear_page_erms (23 samples, 0.05%)</title><rect x="1141.6" y="275.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1144.6" y="286.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge (10 samples, 0.02%)</title><rect x="1142.4" y="323.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1145.4" y="334.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.put (43 samples, 0.10%)</title><rect x="1143.6" y="963.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1146.6" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.put (42 samples, 0.10%)</title><rect x="1143.6" y="947.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1146.6" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.toNative (29 samples, 0.07%)</title><rect x="1144.0" y="931.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1147.0" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.convertData (29 samples, 0.07%)</title><rect x="1144.0" y="915.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1147.0" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertToNativeData (28 samples, 0.07%)</title><rect x="1144.0" y="899.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1147.0" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (28 samples, 0.07%)</title><rect x="1144.0" y="883.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1147.0" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (27 samples, 0.06%)</title><rect x="1144.0" y="867.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1147.0" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.allocate (24 samples, 0.06%)</title><rect x="1144.0" y="851.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1147.0" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (22 samples, 0.05%)</title><rect x="1144.1" y="835.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1147.1" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (14 samples, 0.03%)</title><rect x="1144.1" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1147.1" y="830.0"></text>
</g>
<g>
<title>vtable stub (10 samples, 0.02%)</title><rect x="1145.2" y="1075.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1148.2" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.sendBackups (20 samples, 0.05%)</title><rect x="1145.5" y="1091.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1148.5" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.sendBackups0 (18 samples, 0.04%)</title><rect x="1145.5" y="1075.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1148.5" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.makeBackups (16 samples, 0.04%)</title><rect x="1145.6" y="1059.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1148.6" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.sendSingleBackup (16 samples, 0.04%)</title><rect x="1145.6" y="1043.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1148.6" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.sendSingleBackup (16 samples, 0.04%)</title><rect x="1145.6" y="1027.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1148.6" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.getBackupOperation (15 samples, 0.04%)</title><rect x="1145.6" y="1011.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1148.6" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/BasePutOperation.getBackupOperation (15 samples, 0.04%)</title><rect x="1145.6" y="995.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1148.6" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.getValueOrPostProcessedValue (11 samples, 0.03%)</title><rect x="1145.7" y="979.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1148.7" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.afterRun (638 samples, 1.52%)</title><rect x="1146.0" y="1091.0" width="18.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1149.0" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/operations/Backup.afterRun (637 samples, 1.52%)</title><rect x="1146.1" y="1075.0" width="17.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1149.1" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEngineImpl.dispatchBackupEvent (625 samples, 1.49%)</title><rect x="1146.3" y="1059.0" width="17.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1149.3" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AddBackupListenerMessageTask.accept (571 samples, 1.36%)</title><rect x="1147.2" y="1043.0" width="16.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1150.2" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AddBackupListenerMessageTask.accept (570 samples, 1.36%)</title><rect x="1147.2" y="1027.0" width="16.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1150.2" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/ClientLocalBackupListenerCodec.encodeBackupEvent (111 samples, 0.26%)</title><rect x="1147.2" y="1011.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1150.2" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/builtin/FixedSizeTypesCodec.encodeLong (101 samples, 0.24%)</title><rect x="1147.5" y="995.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1150.5" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.writeLongL (101 samples, 0.24%)</title><rect x="1147.5" y="979.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1150.5" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.writeLongL (101 samples, 0.24%)</title><rect x="1147.5" y="963.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1150.5" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.putByte (53 samples, 0.13%)</title><rect x="1148.9" y="947.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1151.9" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.putByte (52 samples, 0.12%)</title><rect x="1148.9" y="931.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1151.9" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.sendClientMessage (458 samples, 1.09%)</title><rect x="1150.4" y="1011.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1153.4" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/TcpIpConnection.write (455 samples, 1.08%)</title><rect x="1150.4" y="995.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1153.4" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioChannel.write (452 samples, 1.08%)</title><rect x="1150.5" y="979.0" width="12.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1153.5" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.write (452 samples, 1.08%)</title><rect x="1150.5" y="963.0" width="12.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1153.5" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.executePipeline (441 samples, 1.05%)</title><rect x="1150.6" y="947.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1153.6" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioPipeline.registerOp (79 samples, 0.19%)</title><rect x="1151.2" y="931.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1154.2" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (73 samples, 0.17%)</title><rect x="1151.3" y="915.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1154.3" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (65 samples, 0.15%)</title><rect x="1151.6" y="899.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1154.6" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetInterestOps (61 samples, 0.15%)</title><rect x="1151.7" y="883.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1154.7" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.putEventOps (61 samples, 0.15%)</title><rect x="1151.7" y="867.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1154.7" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.setInterest (25 samples, 0.06%)</title><rect x="1152.7" y="851.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1155.7" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (335 samples, 0.80%)</title><rect x="1153.4" y="931.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1156.4" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (295 samples, 0.70%)</title><rect x="1154.5" y="915.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1157.5" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (294 samples, 0.70%)</title><rect x="1154.6" y="899.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1157.6" y="910.0"></text>
</g>
<g>
<title>write (288 samples, 0.69%)</title><rect x="1154.7" y="883.0" width="8.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1157.7" y="894.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (262 samples, 0.62%)</title><rect x="1155.5" y="867.0" width="7.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1158.5" y="878.0"></text>
</g>
<g>
<title>do_syscall_64 (262 samples, 0.62%)</title><rect x="1155.5" y="851.0" width="7.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1158.5" y="862.0"></text>
</g>
<g>
<title>sys_write (234 samples, 0.56%)</title><rect x="1156.1" y="835.0" width="6.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1159.1" y="846.0"></text>
</g>
<g>
<title>__fdget_pos (17 samples, 0.04%)</title><rect x="1156.2" y="819.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1159.2" y="830.0"></text>
</g>
<g>
<title>__fget_light (17 samples, 0.04%)</title><rect x="1156.2" y="803.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1159.2" y="814.0"></text>
</g>
<g>
<title>__fget (13 samples, 0.03%)</title><rect x="1156.3" y="787.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1159.3" y="798.0"></text>
</g>
<g>
<title>vfs_write (212 samples, 0.50%)</title><rect x="1156.7" y="819.0" width="6.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1159.7" y="830.0"></text>
</g>
<g>
<title>__vfs_write (200 samples, 0.48%)</title><rect x="1156.8" y="803.0" width="5.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1159.8" y="814.0"></text>
</g>
<g>
<title>pipe_write (198 samples, 0.47%)</title><rect x="1156.9" y="787.0" width="5.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1159.9" y="798.0"></text>
</g>
<g>
<title>__wake_up_common_lock (143 samples, 0.34%)</title><rect x="1157.2" y="771.0" width="4.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1160.2" y="782.0"></text>
</g>
<g>
<title>__lock_text_start (141 samples, 0.34%)</title><rect x="1157.2" y="755.0" width="4.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1160.2" y="766.0"></text>
</g>
<g>
<title>copy_page_from_iter (21 samples, 0.05%)</title><rect x="1161.2" y="771.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1164.2" y="782.0"></text>
</g>
<g>
<title>copyin (9 samples, 0.02%)</title><rect x="1161.5" y="755.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1164.5" y="766.0"></text>
</g>
<g>
<title>mutex_unlock (11 samples, 0.03%)</title><rect x="1162.2" y="771.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1165.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (15 samples, 0.04%)</title><rect x="1163.4" y="1043.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1166.4" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.checkNodeState (18 samples, 0.04%)</title><rect x="1164.0" y="1107.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1167.0" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.ensureNoPartitionProblems (21 samples, 0.05%)</title><rect x="1164.5" y="1107.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1167.5" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/InternalPartitionImpl.isMigrating (15 samples, 0.04%)</title><rect x="1164.6" y="1091.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1167.6" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.timeout (31 samples, 0.07%)</title><rect x="1165.3" y="1107.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1168.3" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl.isCallTimedOut (31 samples, 0.07%)</title><rect x="1165.3" y="1091.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1168.3" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/ClusterClockImpl.getClusterTime (20 samples, 0.05%)</title><rect x="1165.4" y="1075.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1168.4" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (15 samples, 0.04%)</title><rect x="1165.5" y="1059.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.5" y="1070.0"></text>
</g>
<g>
<title>gettimeofday (12 samples, 0.03%)</title><rect x="1165.6" y="1043.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1168.6" y="1054.0"></text>
</g>
<g>
<title>[vdso] (11 samples, 0.03%)</title><rect x="1165.6" y="1027.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1168.6" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/operations/Backup.beforeRun (186 samples, 0.44%)</title><rect x="1166.2" y="1107.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1169.2" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionReplicaManager.getServiceNamespace (72 samples, 0.17%)</title><rect x="1166.7" y="1091.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1169.7" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.getServiceNamespace (66 samples, 0.16%)</title><rect x="1166.9" y="1075.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1169.9" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.getServiceNamespace (66 samples, 0.16%)</title><rect x="1166.9" y="1059.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1169.9" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapServiceContextImpl.getMapContainer (23 samples, 0.05%)</title><rect x="1167.4" y="1043.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1170.4" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutSynchronized (21 samples, 0.05%)</title><rect x="1167.4" y="1027.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1170.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (14 samples, 0.03%)</title><rect x="1167.6" y="1011.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1170.6" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.getService (24 samples, 0.06%)</title><rect x="1168.0" y="1043.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1171.0" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.getService (21 samples, 0.05%)</title><rect x="1168.1" y="1027.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1171.1" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getService (19 samples, 0.05%)</title><rect x="1168.1" y="1011.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1171.1" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getServiceInfo (19 samples, 0.05%)</title><rect x="1168.1" y="995.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1171.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.02%)</title><rect x="1168.3" y="979.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1171.3" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.getLogger (29 samples, 0.07%)</title><rect x="1168.9" y="1091.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1171.9" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.getLogger (29 samples, 0.07%)</title><rect x="1168.9" y="1075.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1171.9" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/logging/impl/LoggingServiceImpl.getLogger (28 samples, 0.07%)</title><rect x="1168.9" y="1059.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1171.9" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutIfAbsent (25 samples, 0.06%)</title><rect x="1169.0" y="1043.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1172.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (25 samples, 0.06%)</title><rect x="1169.0" y="1027.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1172.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodType$ConcurrentWeakInternSet$WeakEntry.equals (10 samples, 0.02%)</title><rect x="1169.4" y="1011.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1172.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (10 samples, 0.02%)</title><rect x="1169.4" y="995.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1172.4" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/operations/Backup.ensureBackupOperationInitialized (60 samples, 0.14%)</title><rect x="1169.7" y="1091.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1172.7" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (13 samples, 0.03%)</title><rect x="1171.0" y="1075.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.0" y="1086.0"></text>
</g>
<g>
<title>gettimeofday (12 samples, 0.03%)</title><rect x="1171.1" y="1059.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1174.1" y="1070.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.02%)</title><rect x="1171.1" y="1043.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1174.1" y="1054.0"></text>
</g>
<g>
<title>itable stub (35 samples, 0.08%)</title><rect x="1171.4" y="1123.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1174.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.run (14 samples, 0.03%)</title><rect x="1172.5" y="1187.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1175.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (11 samples, 0.03%)</title><rect x="1172.5" y="1171.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1175.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (11 samples, 0.03%)</title><rect x="1172.5" y="1155.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1175.5" y="1166.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/JFR.init (27 samples, 0.06%)</title><rect x="1172.9" y="1187.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1175.9" y="1198.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/VMJFR.instrument (16 samples, 0.04%)</title><rect x="1173.2" y="1171.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1176.2" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/instrumentation/Tracer.addInstrumentations (14 samples, 0.03%)</title><rect x="1173.2" y="1155.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1176.2" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/instrumentation/Tracer.retransformClasses0 (13 samples, 0.03%)</title><rect x="1173.3" y="1139.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1176.3" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/instrumentation/Tracer.retransformCallback (13 samples, 0.03%)</title><rect x="1173.3" y="1123.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1176.3" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/instrumentation/Tracer.transform (13 samples, 0.03%)</title><rect x="1173.3" y="1107.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1176.3" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/instrumentation/ClassInstrumentation.&lt;init&gt; (13 samples, 0.03%)</title><rect x="1173.3" y="1091.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1176.3" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/instrumentation/ClassInstrumentation.instrument (12 samples, 0.03%)</title><rect x="1173.3" y="1075.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1176.3" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/org/objectweb/asm/ClassReader.accept (9 samples, 0.02%)</title><rect x="1173.4" y="1059.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1176.4" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/org/objectweb/asm/ClassReader.accept (9 samples, 0.02%)</title><rect x="1173.4" y="1043.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1176.4" y="1054.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/VMJFR.startRecording (15 samples, 0.04%)</title><rect x="1173.7" y="1187.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1176.7" y="1198.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/DCmdStart.execute (15 samples, 0.04%)</title><rect x="1173.7" y="1171.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1176.7" y="1182.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/DCmdStart.findPreset (14 samples, 0.03%)</title><rect x="1173.7" y="1155.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1176.7" y="1166.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/settings/PresetFile.createFromName (14 samples, 0.03%)</title><rect x="1173.7" y="1139.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1176.7" y="1150.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/settings/PresetFile.create (14 samples, 0.03%)</title><rect x="1173.7" y="1123.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1176.7" y="1134.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/settings/JFCParser.createPresetFile (14 samples, 0.03%)</title><rect x="1173.7" y="1107.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1176.7" y="1118.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/settings/JFCParser.createPresetFile (14 samples, 0.03%)</title><rect x="1173.7" y="1091.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1176.7" y="1102.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/settings/JFCParser.validateXML (12 samples, 0.03%)</title><rect x="1173.8" y="1075.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1176.8" y="1086.0"></text>
</g>
<g>
<title>start_thread (556 samples, 1.32%)</title><rect x="1174.3" y="1187.0" width="15.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1177.3" y="1198.0"></text>
</g>
<g>
<title>java_start(Thread*) (555 samples, 1.32%)</title><rect x="1174.4" y="1171.0" width="15.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1177.4" y="1182.0"></text>
</g>
<g>
<title>GCTaskThread::run() (510 samples, 1.21%)</title><rect x="1174.4" y="1155.0" width="14.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.4" y="1166.0"></text>
</g>
<g>
<title>OldToYoungRootsTask::do_it(GCTaskManager*, unsigned int) (10 samples, 0.02%)</title><rect x="1174.5" y="1139.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.5" y="1150.0"></text>
</g>
<g>
<title>CardTableExtension::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWord*, PSPromotionManager*, unsigned int, unsigned int) (10 samples, 0.02%)</title><rect x="1174.5" y="1123.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="1134.0"></text>
</g>
<g>
<title>StealMarkingTask::do_it(GCTaskManager*, unsigned int) (52 samples, 0.12%)</title><rect x="1175.1" y="1139.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.1" y="1150.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;GenericTaskQueue&lt;oopDesc*, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, oopDesc*&amp;) (28 samples, 0.07%)</title><rect x="1175.1" y="1123.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.1" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::oop_follow_contents(ParCompactionManager*, oopDesc*) (10 samples, 0.02%)</title><rect x="1175.9" y="1123.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.9" y="1134.0"></text>
</g>
<g>
<title>StealRegionCompactionTask::do_it(GCTaskManager*, unsigned int) (204 samples, 0.49%)</title><rect x="1176.5" y="1139.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.5" y="1150.0"></text>
</g>
<g>
<title>ParCompactionManager::drain_region_stacks() (14 samples, 0.03%)</title><rect x="1176.7" y="1123.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.7" y="1134.0"></text>
</g>
<g>
<title>PSParallelCompact::fill_region(ParCompactionManager*, unsigned long) (14 samples, 0.03%)</title><rect x="1176.7" y="1107.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="1118.0"></text>
</g>
<g>
<title>ParMarkBitMap::iterate(ParMarkBitMapClosure*, unsigned long, unsigned long) const (14 samples, 0.03%)</title><rect x="1176.7" y="1091.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="1102.0"></text>
</g>
<g>
<title>MoveAndUpdateClosure::do_addr(HeapWord*, unsigned long) (10 samples, 0.02%)</title><rect x="1176.7" y="1075.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.7" y="1086.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (10 samples, 0.02%)</title><rect x="1177.0" y="1123.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.0" y="1134.0"></text>
</g>
<g>
<title>SpinPause (175 samples, 0.42%)</title><rect x="1177.3" y="1123.0" width="4.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1180.3" y="1134.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (213 samples, 0.51%)</title><rect x="1182.2" y="1139.0" width="6.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.2" y="1150.0"></text>
</g>
<g>
<title>SpinPause (191 samples, 0.45%)</title><rect x="1182.8" y="1123.0" width="5.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1185.8" y="1134.0"></text>
</g>
<g>
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (14 samples, 0.03%)</title><rect x="1188.3" y="1139.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.3" y="1150.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (14 samples, 0.03%)</title><rect x="1188.3" y="1123.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.3" y="1134.0"></text>
</g>
<g>
<title>JavaThread::run() (9 samples, 0.02%)</title><rect x="1188.7" y="1155.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.7" y="1166.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (9 samples, 0.02%)</title><rect x="1188.7" y="1139.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.7" y="1150.0"></text>
</g>
<g>
<title>VMThread::run() (36 samples, 0.09%)</title><rect x="1189.0" y="1155.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="1166.0"></text>
</g>
<g>
<title>VMThread::loop() (36 samples, 0.09%)</title><rect x="1189.0" y="1139.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.0" y="1150.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (30 samples, 0.07%)</title><rect x="1189.1" y="1123.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.1" y="1134.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (30 samples, 0.07%)</title><rect x="1189.1" y="1107.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.1" y="1118.0"></text>
</g>
<g>
<title>VM_GC_SendObjectCountEvent::doit() (11 samples, 0.03%)</title><rect x="1189.3" y="1091.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.3" y="1102.0"></text>
</g>
<g>
<title>VM_GC_HeapInspection::collect() (11 samples, 0.03%)</title><rect x="1189.3" y="1075.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.3" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::collect_as_vm_thread(GCCause::Cause) (11 samples, 0.03%)</title><rect x="1189.3" y="1059.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.3" y="1070.0"></text>
</g>
<g>
<title>PSParallelCompact::invoke(bool) (11 samples, 0.03%)</title><rect x="1189.3" y="1043.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.3" y="1054.0"></text>
</g>
<g>
<title>PSParallelCompact::invoke_no_policy(bool) (11 samples, 0.03%)</title><rect x="1189.3" y="1027.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.3" y="1038.0"></text>
</g>
<g>
<title>VM_ParallelGCFailedAllocation::doit() (10 samples, 0.02%)</title><rect x="1189.7" y="1091.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.7" y="1102.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (10 samples, 0.02%)</title><rect x="1189.7" y="1075.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.7" y="1086.0"></text>
</g>
<g>
<title>PSScavenge::invoke() (10 samples, 0.02%)</title><rect x="1189.7" y="1059.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.7" y="1070.0"></text>
</g>
<g>
<title>PSScavenge::invoke_no_policy() (10 samples, 0.02%)</title><rect x="1189.7" y="1043.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.7" y="1054.0"></text>
</g>
</g>
</svg>

<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1237"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1237"> </text>
<g id="frames">
<g>
<title>all (46,427 samples, 100.00%)</title><rect x="10.0" y="1203.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1214.0">all</text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (10 samples, 0.02%)</title><rect x="10.6" y="1187.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.6" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (36 samples, 0.08%)</title><rect x="10.9" y="1187.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.9" y="1198.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (32 samples, 0.07%)</title><rect x="11.0" y="1171.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.0" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (26 samples, 0.06%)</title><rect x="11.0" y="1155.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.0" y="1166.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (10 samples, 0.02%)</title><rect x="11.1" y="1139.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.1" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (10 samples, 0.02%)</title><rect x="11.9" y="1187.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.9" y="1198.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (134 samples, 0.29%)</title><rect x="12.2" y="1187.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.2" y="1198.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (69 samples, 0.15%)</title><rect x="12.9" y="1171.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.9" y="1182.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin_VaryDuration(Thread*) (18 samples, 0.04%)</title><rect x="13.8" y="1155.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="16.8" y="1166.0"></text>
</g>
<g>
<title>SpinPause (13 samples, 0.03%)</title><rect x="14.3" y="1155.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="17.3" y="1166.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (16 samples, 0.03%)</title><rect x="14.7" y="1171.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.7" y="1182.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (12 samples, 0.03%)</title><rect x="15.3" y="1171.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="18.3" y="1182.0"></text>
</g>
<g>
<title>[not_walkable_Java] (57 samples, 0.12%)</title><rect x="15.9" y="1187.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="18.9" y="1198.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 0.11%)</title><rect x="16.0" y="1171.0" width="1.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="19.0" y="1182.0"></text>
</g>
<g>
<title>Unsafe_Park (10 samples, 0.02%)</title><rect x="16.0" y="1155.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="19.0" y="1166.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.02%)</title><rect x="16.0" y="1139.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="19.0" y="1150.0"></text>
</g>
<g>
<title>__GI___clock_gettime (30 samples, 0.06%)</title><rect x="16.4" y="1155.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="19.4" y="1166.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (17 samples, 0.04%)</title><rect x="16.8" y="1139.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="19.8" y="1150.0"></text>
</g>
<g>
<title>[unknown_Java] (3,659 samples, 7.88%)</title><rect x="17.3" y="1187.0" width="93.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="20.3" y="1198.0">[unknown_Ja..</text>
</g>
<g>
<title>[unknown] (59 samples, 0.13%)</title><rect x="102.5" y="1171.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="105.5" y="1182.0"></text>
</g>
<g>
<title>__GI___clock_gettime (59 samples, 0.13%)</title><rect x="102.5" y="1155.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="105.5" y="1166.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (59 samples, 0.13%)</title><rect x="102.5" y="1139.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="105.5" y="1150.0"></text>
</g>
<g>
<title>[vdso] (59 samples, 0.13%)</title><rect x="102.5" y="1123.0" width="1.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="105.5" y="1134.0"></text>
</g>
<g>
<title>__GI___clock_gettime (12 samples, 0.03%)</title><rect x="104.0" y="1171.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="107.0" y="1182.0"></text>
</g>
<g>
<title>__GI___clock_gettime (12 samples, 0.03%)</title><rect x="104.0" y="1155.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="107.0" y="1166.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (12 samples, 0.03%)</title><rect x="104.0" y="1139.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="107.0" y="1150.0"></text>
</g>
<g>
<title>[vdso] (12 samples, 0.03%)</title><rect x="104.0" y="1123.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="107.0" y="1134.0"></text>
</g>
<g>
<title>__pthread_cond_signal (20 samples, 0.04%)</title><rect x="104.4" y="1171.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="107.4" y="1182.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (19 samples, 0.04%)</title><rect x="104.4" y="1155.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="107.4" y="1166.0"></text>
</g>
<g>
<title>do_syscall_64 (19 samples, 0.04%)</title><rect x="104.4" y="1139.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="107.4" y="1150.0"></text>
</g>
<g>
<title>sys_futex (17 samples, 0.04%)</title><rect x="104.5" y="1123.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="107.5" y="1134.0"></text>
</g>
<g>
<title>do_futex (17 samples, 0.04%)</title><rect x="104.5" y="1107.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="107.5" y="1118.0"></text>
</g>
<g>
<title>futex_wake (17 samples, 0.04%)</title><rect x="104.5" y="1091.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="107.5" y="1102.0"></text>
</g>
<g>
<title>wake_up_q (11 samples, 0.02%)</title><rect x="104.6" y="1075.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="107.6" y="1086.0"></text>
</g>
<g>
<title>try_to_wake_up (10 samples, 0.02%)</title><rect x="104.7" y="1059.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="107.7" y="1070.0"></text>
</g>
<g>
<title>__lock_text_start (10 samples, 0.02%)</title><rect x="104.7" y="1043.0" width="0.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="107.7" y="1054.0"></text>
</g>
<g>
<title>ret_from_intr (206 samples, 0.44%)</title><rect x="105.0" y="1171.0" width="5.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="108.0" y="1182.0"></text>
</g>
<g>
<title>do_IRQ (206 samples, 0.44%)</title><rect x="105.0" y="1155.0" width="5.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="108.0" y="1166.0"></text>
</g>
<g>
<title>irq_exit (206 samples, 0.44%)</title><rect x="105.0" y="1139.0" width="5.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="108.0" y="1150.0"></text>
</g>
<g>
<title>__softirqentry_text_start (206 samples, 0.44%)</title><rect x="105.0" y="1123.0" width="5.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="108.0" y="1134.0"></text>
</g>
<g>
<title>net_rx_action (133 samples, 0.29%)</title><rect x="106.6" y="1107.0" width="3.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="109.6" y="1118.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (131 samples, 0.28%)</title><rect x="106.7" y="1091.0" width="3.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="109.7" y="1102.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (103 samples, 0.22%)</title><rect x="107.2" y="1075.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="110.2" y="1086.0"></text>
</g>
<g>
<title>napi_gro_frags (42 samples, 0.09%)</title><rect x="107.5" y="1059.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="110.5" y="1070.0"></text>
</g>
<g>
<title>dev_gro_receive (37 samples, 0.08%)</title><rect x="107.5" y="1043.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="110.5" y="1054.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (32 samples, 0.07%)</title><rect x="107.7" y="1027.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="110.7" y="1038.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (32 samples, 0.07%)</title><rect x="107.7" y="1011.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="110.7" y="1022.0"></text>
</g>
<g>
<title>ip_rcv (32 samples, 0.07%)</title><rect x="107.7" y="995.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="110.7" y="1006.0"></text>
</g>
<g>
<title>ip_local_deliver (32 samples, 0.07%)</title><rect x="107.7" y="979.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="110.7" y="990.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (32 samples, 0.07%)</title><rect x="107.7" y="963.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="110.7" y="974.0"></text>
</g>
<g>
<title>tcp_v4_rcv (32 samples, 0.07%)</title><rect x="107.7" y="947.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="110.7" y="958.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (31 samples, 0.07%)</title><rect x="107.7" y="931.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="110.7" y="942.0"></text>
</g>
<g>
<title>tcp_rcv_established (31 samples, 0.07%)</title><rect x="107.7" y="915.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="110.7" y="926.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (21 samples, 0.05%)</title><rect x="107.7" y="899.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="110.7" y="910.0"></text>
</g>
<g>
<title>ip_output (17 samples, 0.04%)</title><rect x="107.8" y="883.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="110.8" y="894.0"></text>
</g>
<g>
<title>ip_finish_output2 (17 samples, 0.04%)</title><rect x="107.8" y="867.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="110.8" y="878.0"></text>
</g>
<g>
<title>__dev_queue_xmit (15 samples, 0.03%)</title><rect x="107.8" y="851.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="110.8" y="862.0"></text>
</g>
<g>
<title>sch_direct_xmit (13 samples, 0.03%)</title><rect x="107.9" y="835.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="110.9" y="846.0"></text>
</g>
<g>
<title>_raw_spin_lock (10 samples, 0.02%)</title><rect x="107.9" y="819.0" width="0.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="110.9" y="830.0"></text>
</g>
<g>
<title>napi_gro_receive (45 samples, 0.10%)</title><rect x="108.6" y="1059.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="111.6" y="1070.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (43 samples, 0.09%)</title><rect x="108.6" y="1043.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="111.6" y="1054.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (43 samples, 0.09%)</title><rect x="108.6" y="1027.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="111.6" y="1038.0"></text>
</g>
<g>
<title>ip_rcv (41 samples, 0.09%)</title><rect x="108.7" y="1011.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="111.7" y="1022.0"></text>
</g>
<g>
<title>ip_local_deliver (39 samples, 0.08%)</title><rect x="108.7" y="995.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="111.7" y="1006.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (39 samples, 0.08%)</title><rect x="108.7" y="979.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="111.7" y="990.0"></text>
</g>
<g>
<title>tcp_v4_rcv (39 samples, 0.08%)</title><rect x="108.7" y="963.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="111.7" y="974.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (36 samples, 0.08%)</title><rect x="108.7" y="947.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="111.7" y="958.0"></text>
</g>
<g>
<title>tcp_rcv_established (35 samples, 0.08%)</title><rect x="108.8" y="931.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="111.8" y="942.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (12 samples, 0.03%)</title><rect x="108.8" y="915.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="111.8" y="926.0"></text>
</g>
<g>
<title>tcp_write_xmit (12 samples, 0.03%)</title><rect x="108.8" y="899.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="111.8" y="910.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (11 samples, 0.02%)</title><rect x="108.8" y="883.0" width="0.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="111.8" y="894.0"></text>
</g>
<g>
<title>ip_output (10 samples, 0.02%)</title><rect x="108.8" y="867.0" width="0.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="111.8" y="878.0"></text>
</g>
<g>
<title>ip_finish_output2 (10 samples, 0.02%)</title><rect x="108.8" y="851.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="111.8" y="862.0"></text>
</g>
<g>
<title>__dev_queue_xmit (10 samples, 0.02%)</title><rect x="108.8" y="835.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="111.8" y="846.0"></text>
</g>
<g>
<title>tcp_ack (15 samples, 0.03%)</title><rect x="109.3" y="915.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="112.3" y="926.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (10 samples, 0.02%)</title><rect x="109.3" y="899.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="112.3" y="910.0"></text>
</g>
<g>
<title>tasklet_action (10 samples, 0.02%)</title><rect x="110.0" y="1107.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="113.0" y="1118.0"></text>
</g>
<g>
<title>tcp_tasklet_func (10 samples, 0.02%)</title><rect x="110.0" y="1091.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="113.0" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioThread.run (18,872 samples, 40.65%)</title><rect x="110.5" y="1187.0" width="479.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="113.5" y="1198.0">com/hazelcast/internal/networking/nio/NioThread.run</text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioThread.selectLoop (18,872 samples, 40.65%)</title><rect x="110.5" y="1171.0" width="479.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="113.5" y="1182.0">com/hazelcast/internal/networking/nio/NioThread.selectLoop</text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioThread.processSelectionKeys (11,924 samples, 25.68%)</title><rect x="110.8" y="1155.0" width="303.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.8" y="1166.0">com/hazelcast/internal/networking/nio/Nio..</text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioThread.processSelectionKey (11,798 samples, 25.41%)</title><rect x="111.8" y="1139.0" width="299.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="114.8" y="1150.0">com/hazelcast/internal/networking/nio/Ni..</text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioInboundPipeline.process (6,846 samples, 14.75%)</title><rect x="112.2" y="1123.0" width="174.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="115.2" y="1134.0">com/hazelcast/internal..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/util/ClientMessageDecoder.onRead (2,085 samples, 4.49%)</title><rect x="112.4" y="1107.0" width="53.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="115.4" y="1118.0">com/h..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessageReader.readFrom (550 samples, 1.18%)</title><rect x="112.6" y="1091.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="115.6" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessageReader.readFrame (544 samples, 1.17%)</title><rect x="112.8" y="1075.0" width="13.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="115.8" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessage.add (15 samples, 0.03%)</title><rect x="122.0" y="1059.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="125.0" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessage.createForDecode (36 samples, 0.08%)</title><rect x="122.3" y="1059.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="125.3" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (27 samples, 0.06%)</title><rect x="122.5" y="1043.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="125.5" y="1054.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (27 samples, 0.06%)</title><rect x="122.5" y="1027.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="125.5" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (22 samples, 0.05%)</title><rect x="122.6" y="1011.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="125.6" y="1022.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (22 samples, 0.05%)</title><rect x="122.6" y="995.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="125.6" y="1006.0"></text>
</g>
<g>
<title>JfrTraceEvent&lt;EventAllocObjectInNewTLAB&gt;::writeEvent() (22 samples, 0.05%)</title><rect x="122.6" y="979.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="125.6" y="990.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::record(int) (21 samples, 0.05%)</title><rect x="122.6" y="963.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="125.6" y="974.0"></text>
</g>
<g>
<title>JfrStackTrace::record(JavaThread*, int) (10 samples, 0.02%)</title><rect x="122.6" y="947.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="125.6" y="958.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::add(JfrStackTrace const&amp;) (10 samples, 0.02%)</title><rect x="122.8" y="947.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="125.8" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessageReader.accumulate (29 samples, 0.06%)</title><rect x="123.3" y="1059.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="126.3" y="1070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (19 samples, 0.04%)</title><rect x="123.5" y="1043.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="126.5" y="1054.0"></text>
</g>
<g>
<title>ret_from_intr (82 samples, 0.18%)</title><rect x="124.5" y="1059.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="127.5" y="1070.0"></text>
</g>
<g>
<title>do_IRQ (82 samples, 0.18%)</title><rect x="124.5" y="1043.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="127.5" y="1054.0"></text>
</g>
<g>
<title>irq_exit (82 samples, 0.18%)</title><rect x="124.5" y="1027.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="127.5" y="1038.0"></text>
</g>
<g>
<title>__softirqentry_text_start (82 samples, 0.18%)</title><rect x="124.5" y="1011.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="127.5" y="1022.0"></text>
</g>
<g>
<title>net_rx_action (43 samples, 0.09%)</title><rect x="125.2" y="995.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="128.2" y="1006.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (43 samples, 0.09%)</title><rect x="125.2" y="979.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="128.2" y="990.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (30 samples, 0.06%)</title><rect x="125.5" y="963.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="128.5" y="974.0"></text>
</g>
<g>
<title>napi_gro_receive (15 samples, 0.03%)</title><rect x="125.8" y="947.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="128.8" y="958.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (13 samples, 0.03%)</title><rect x="125.9" y="931.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="128.9" y="942.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (13 samples, 0.03%)</title><rect x="125.9" y="915.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="128.9" y="926.0"></text>
</g>
<g>
<title>ip_rcv (12 samples, 0.03%)</title><rect x="125.9" y="899.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="128.9" y="910.0"></text>
</g>
<g>
<title>tasklet_action (11 samples, 0.02%)</title><rect x="126.3" y="995.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="129.3" y="1006.0"></text>
</g>
<g>
<title>tcp_tasklet_func (10 samples, 0.02%)</title><rect x="126.3" y="979.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="129.3" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/util/ClientMessageDecoder.handleMessage (1,519 samples, 3.27%)</title><rect x="126.6" y="1091.0" width="38.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="129.6" y="1102.0">com..</text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEngineImpl.accept (1,517 samples, 3.27%)</title><rect x="126.6" y="1075.0" width="38.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.6" y="1086.0">com..</text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEngineImpl.accept (1,517 samples, 3.27%)</title><rect x="126.6" y="1059.0" width="38.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="129.6" y="1070.0">com..</text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEngineImpl.isUrgent (30 samples, 0.06%)</title><rect x="126.8" y="1043.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="129.8" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/CompositeMessageTaskFactory.create (111 samples, 0.24%)</title><rect x="127.5" y="1043.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="130.5" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/DefaultMessageTaskFactoryProvider$$Lambda$722/914942811.create (29 samples, 0.06%)</title><rect x="128.2" y="1027.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="131.2" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/DefaultMessageTaskFactoryProvider.lambda$initializeMapTaskFactories$212 (28 samples, 0.06%)</title><rect x="128.2" y="1011.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.2" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapPutMessageTask.&lt;init&gt; (25 samples, 0.05%)</title><rect x="128.3" y="995.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="131.3" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/AbstractMapPutMessageTask.&lt;init&gt; (25 samples, 0.05%)</title><rect x="128.3" y="979.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="131.3" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/AbstractMapPartitionMessageTask.&lt;init&gt; (25 samples, 0.05%)</title><rect x="128.3" y="963.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="131.3" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractPartitionMessageTask.&lt;init&gt; (25 samples, 0.05%)</title><rect x="128.3" y="947.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="131.3" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask.&lt;init&gt; (25 samples, 0.05%)</title><rect x="128.3" y="931.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="131.3" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.&lt;init&gt; (25 samples, 0.05%)</title><rect x="128.3" y="915.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="131.3" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.initEndpoint (13 samples, 0.03%)</title><rect x="128.3" y="899.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="131.3" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEndpointManagerImpl.getEndpoint (10 samples, 0.02%)</title><rect x="128.4" y="883.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="131.4" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/Node.getLogger (11 samples, 0.02%)</title><rect x="128.7" y="899.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="131.7" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/logging/impl/LoggingServiceImpl.getLogger (11 samples, 0.02%)</title><rect x="128.7" y="883.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="131.7" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/DefaultMessageTaskFactoryProvider$$Lambda$750/919446210.create (34 samples, 0.07%)</title><rect x="129.0" y="1027.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="132.0" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/DefaultMessageTaskFactoryProvider.lambda$initializeMapTaskFactories$240 (34 samples, 0.07%)</title><rect x="129.0" y="1011.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.0" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapGetMessageTask.&lt;init&gt; (28 samples, 0.06%)</title><rect x="129.1" y="995.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="132.1" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/AbstractMapPartitionMessageTask.&lt;init&gt; (28 samples, 0.06%)</title><rect x="129.1" y="979.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="132.1" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractPartitionMessageTask.&lt;init&gt; (28 samples, 0.06%)</title><rect x="129.1" y="963.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="132.1" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask.&lt;init&gt; (28 samples, 0.06%)</title><rect x="129.1" y="947.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.1" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.&lt;init&gt; (28 samples, 0.06%)</title><rect x="129.1" y="931.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="132.1" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/Node.getLogger (18 samples, 0.04%)</title><rect x="129.4" y="915.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="132.4" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/logging/impl/LoggingServiceImpl.getLogger (18 samples, 0.04%)</title><rect x="129.4" y="899.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="132.4" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutIfAbsent (12 samples, 0.03%)</title><rect x="129.5" y="883.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 0.02%)</title><rect x="129.5" y="867.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="132.5" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/Int2ObjectHashMap.get (14 samples, 0.03%)</title><rect x="129.8" y="1027.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.8" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/Int2ObjectHashMap.get (14 samples, 0.03%)</title><rect x="129.8" y="1011.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.8" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl.execute (1,369 samples, 2.95%)</title><rect x="130.3" y="1043.0" width="34.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="133.3" y="1054.0">co..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.execute (1,362 samples, 2.93%)</title><rect x="130.5" y="1027.0" width="34.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="133.5" y="1038.0">co..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.execute (1,352 samples, 2.91%)</title><rect x="130.7" y="1011.0" width="34.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="133.7" y="1022.0">co..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationQueueImpl.add (1,264 samples, 2.72%)</title><rect x="132.5" y="995.0" width="32.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="135.5" y="1006.0">co..</text>
</g>
<g>
<title>java/util/AbstractQueue.add (1,250 samples, 2.69%)</title><rect x="132.8" y="979.0" width="31.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="135.8" y="990.0">ja..</text>
</g>
<g>
<title>com/hazelcast/internal/util/concurrent/MPSCQueue.offer (1,244 samples, 2.68%)</title><rect x="132.8" y="963.0" width="31.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="135.8" y="974.0">co..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.compareAndSet (37 samples, 0.08%)</title><rect x="133.5" y="947.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="136.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1,168 samples, 2.52%)</title><rect x="134.5" y="947.0" width="29.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="137.5" y="958.0">ja..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1,167 samples, 2.51%)</title><rect x="134.5" y="931.0" width="29.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="137.5" y="942.0">su..</text>
</g>
<g>
<title>Unsafe_Unpark (117 samples, 0.25%)</title><rect x="134.8" y="915.0" width="3.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="137.8" y="926.0"></text>
</g>
<g>
<title>__pthread_cond_signal (10 samples, 0.02%)</title><rect x="135.4" y="899.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="138.4" y="910.0"></text>
</g>
<g>
<title>pthread_mutex_lock (77 samples, 0.17%)</title><rect x="135.8" y="899.0" width="2.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="138.8" y="910.0"></text>
</g>
<g>
<title>__lll_unlock_wake (15 samples, 0.03%)</title><rect x="137.8" y="915.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="140.8" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (14 samples, 0.03%)</title><rect x="137.8" y="899.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="140.8" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (14 samples, 0.03%)</title><rect x="137.8" y="883.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="140.8" y="894.0"></text>
</g>
<g>
<title>sys_futex (13 samples, 0.03%)</title><rect x="137.9" y="867.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="140.9" y="878.0"></text>
</g>
<g>
<title>do_futex (13 samples, 0.03%)</title><rect x="137.9" y="851.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="140.9" y="862.0"></text>
</g>
<g>
<title>futex_wake (13 samples, 0.03%)</title><rect x="137.9" y="835.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="140.9" y="846.0"></text>
</g>
<g>
<title>wake_up_q (10 samples, 0.02%)</title><rect x="137.9" y="819.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="140.9" y="830.0"></text>
</g>
<g>
<title>try_to_wake_up (10 samples, 0.02%)</title><rect x="137.9" y="803.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="140.9" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1,002 samples, 2.16%)</title><rect x="138.2" y="915.0" width="25.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="141.2" y="926.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (869 samples, 1.87%)</title><rect x="141.1" y="899.0" width="22.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="144.1" y="910.0">e..</text>
</g>
<g>
<title>do_syscall_64 (869 samples, 1.87%)</title><rect x="141.1" y="883.0" width="22.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="144.1" y="894.0">d..</text>
</g>
<g>
<title>ret_from_intr (10 samples, 0.02%)</title><rect x="143.2" y="867.0" width="0.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="146.2" y="878.0"></text>
</g>
<g>
<title>do_IRQ (10 samples, 0.02%)</title><rect x="143.2" y="851.0" width="0.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="146.2" y="862.0"></text>
</g>
<g>
<title>irq_exit (10 samples, 0.02%)</title><rect x="143.2" y="835.0" width="0.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="146.2" y="846.0"></text>
</g>
<g>
<title>__softirqentry_text_start (10 samples, 0.02%)</title><rect x="143.2" y="819.0" width="0.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="146.2" y="830.0"></text>
</g>
<g>
<title>sys_futex (744 samples, 1.60%)</title><rect x="143.4" y="867.0" width="18.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="146.4" y="878.0"></text>
</g>
<g>
<title>do_futex (735 samples, 1.58%)</title><rect x="143.6" y="851.0" width="18.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="146.6" y="862.0"></text>
</g>
<g>
<title>futex_wake (723 samples, 1.56%)</title><rect x="143.9" y="835.0" width="18.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="146.9" y="846.0"></text>
</g>
<g>
<title>_raw_spin_lock (47 samples, 0.10%)</title><rect x="145.7" y="819.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="148.7" y="830.0"></text>
</g>
<g>
<title>get_futex_key (19 samples, 0.04%)</title><rect x="146.9" y="819.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="149.9" y="830.0"></text>
</g>
<g>
<title>mark_wake_futex (101 samples, 0.22%)</title><rect x="147.7" y="819.0" width="2.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="150.7" y="830.0"></text>
</g>
<g>
<title>__unqueue_futex (28 samples, 0.06%)</title><rect x="147.7" y="803.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="150.7" y="814.0"></text>
</g>
<g>
<title>wake_q_add (72 samples, 0.16%)</title><rect x="148.4" y="803.0" width="1.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="151.4" y="814.0"></text>
</g>
<g>
<title>ret_from_intr (14 samples, 0.03%)</title><rect x="149.9" y="787.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="152.9" y="798.0"></text>
</g>
<g>
<title>do_IRQ (14 samples, 0.03%)</title><rect x="149.9" y="771.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="152.9" y="782.0"></text>
</g>
<g>
<title>irq_exit (14 samples, 0.03%)</title><rect x="149.9" y="755.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="152.9" y="766.0"></text>
</g>
<g>
<title>__softirqentry_text_start (14 samples, 0.03%)</title><rect x="149.9" y="739.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="152.9" y="750.0"></text>
</g>
<g>
<title>ret_from_intr (13 samples, 0.03%)</title><rect x="150.2" y="819.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="153.2" y="830.0"></text>
</g>
<g>
<title>do_IRQ (13 samples, 0.03%)</title><rect x="150.2" y="803.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="153.2" y="814.0"></text>
</g>
<g>
<title>irq_exit (13 samples, 0.03%)</title><rect x="150.2" y="787.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="153.2" y="798.0"></text>
</g>
<g>
<title>__softirqentry_text_start (13 samples, 0.03%)</title><rect x="150.2" y="771.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="153.2" y="782.0"></text>
</g>
<g>
<title>wake_up_q (460 samples, 0.99%)</title><rect x="150.6" y="819.0" width="11.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="153.6" y="830.0"></text>
</g>
<g>
<title>try_to_wake_up (451 samples, 0.97%)</title><rect x="150.8" y="803.0" width="11.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="153.8" y="814.0"></text>
</g>
<g>
<title>__lock_text_start (446 samples, 0.96%)</title><rect x="150.9" y="787.0" width="11.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="153.9" y="798.0"></text>
</g>
<g>
<title>ret_from_intr (49 samples, 0.11%)</title><rect x="160.9" y="771.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="163.9" y="782.0"></text>
</g>
<g>
<title>do_IRQ (49 samples, 0.11%)</title><rect x="160.9" y="755.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="163.9" y="766.0"></text>
</g>
<g>
<title>irq_exit (49 samples, 0.11%)</title><rect x="160.9" y="739.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="163.9" y="750.0"></text>
</g>
<g>
<title>__softirqentry_text_start (49 samples, 0.11%)</title><rect x="160.9" y="723.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="163.9" y="734.0"></text>
</g>
<g>
<title>net_rx_action (41 samples, 0.09%)</title><rect x="161.1" y="707.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="164.1" y="718.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (41 samples, 0.09%)</title><rect x="161.1" y="691.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="164.1" y="702.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (33 samples, 0.07%)</title><rect x="161.2" y="675.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="164.2" y="686.0"></text>
</g>
<g>
<title>napi_gro_frags (13 samples, 0.03%)</title><rect x="161.3" y="659.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="164.3" y="670.0"></text>
</g>
<g>
<title>dev_gro_receive (11 samples, 0.02%)</title><rect x="161.3" y="643.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="164.3" y="654.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (10 samples, 0.02%)</title><rect x="161.4" y="627.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="164.4" y="638.0"></text>
</g>
<g>
<title>napi_gro_receive (16 samples, 0.03%)</title><rect x="161.7" y="659.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="164.7" y="670.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (14 samples, 0.03%)</title><rect x="161.7" y="643.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="164.7" y="654.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (14 samples, 0.03%)</title><rect x="161.7" y="627.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="164.7" y="638.0"></text>
</g>
<g>
<title>ip_rcv (14 samples, 0.03%)</title><rect x="161.7" y="611.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="164.7" y="622.0"></text>
</g>
<g>
<title>ip_local_deliver (13 samples, 0.03%)</title><rect x="161.7" y="595.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="164.7" y="606.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (12 samples, 0.03%)</title><rect x="161.7" y="579.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="164.7" y="590.0"></text>
</g>
<g>
<title>tcp_v4_rcv (12 samples, 0.03%)</title><rect x="161.7" y="563.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="164.7" y="574.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (11 samples, 0.02%)</title><rect x="161.7" y="547.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="164.7" y="558.0"></text>
</g>
<g>
<title>tcp_rcv_established (11 samples, 0.02%)</title><rect x="161.7" y="531.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="164.7" y="542.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (14 samples, 0.03%)</title><rect x="162.3" y="867.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="165.3" y="878.0"></text>
</g>
<g>
<title>__audit_syscall_exit (12 samples, 0.03%)</title><rect x="162.4" y="851.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="165.4" y="862.0"></text>
</g>
<g>
<title>syscall_trace_enter (22 samples, 0.05%)</title><rect x="162.7" y="867.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="165.7" y="878.0"></text>
</g>
<g>
<title>__audit_syscall_entry (17 samples, 0.04%)</title><rect x="162.7" y="851.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="165.7" y="862.0"></text>
</g>
<g>
<title>ret_from_intr (17 samples, 0.04%)</title><rect x="163.2" y="899.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="166.2" y="910.0"></text>
</g>
<g>
<title>do_IRQ (17 samples, 0.04%)</title><rect x="163.2" y="883.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="166.2" y="894.0"></text>
</g>
<g>
<title>irq_exit (17 samples, 0.04%)</title><rect x="163.2" y="867.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="166.2" y="878.0"></text>
</g>
<g>
<title>__softirqentry_text_start (17 samples, 0.04%)</title><rect x="163.2" y="851.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="166.2" y="862.0"></text>
</g>
<g>
<title>net_rx_action (11 samples, 0.02%)</title><rect x="163.4" y="835.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="166.4" y="846.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (11 samples, 0.02%)</title><rect x="163.4" y="819.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="166.4" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (13 samples, 0.03%)</title><rect x="163.7" y="915.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="166.7" y="926.0"></text>
</g>
<g>
<title>ret_from_intr (16 samples, 0.03%)</title><rect x="164.7" y="995.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="167.7" y="1006.0"></text>
</g>
<g>
<title>do_IRQ (16 samples, 0.03%)</title><rect x="164.7" y="979.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="167.7" y="990.0"></text>
</g>
<g>
<title>irq_exit (16 samples, 0.03%)</title><rect x="164.7" y="963.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="167.7" y="974.0"></text>
</g>
<g>
<title>__softirqentry_text_start (16 samples, 0.03%)</title><rect x="164.7" y="947.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="167.7" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/PacketDecoder.onRead (1,328 samples, 2.86%)</title><rect x="165.4" y="1107.0" width="33.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.4" y="1118.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/nio/PacketIOHelper.readFrom (496 samples, 1.07%)</title><rect x="166.1" y="1091.0" width="12.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="169.1" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (12 samples, 0.03%)</title><rect x="166.4" y="1075.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="169.4" y="1086.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (12 samples, 0.03%)</title><rect x="166.4" y="1059.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="169.4" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/PacketIOHelper.readValue (451 samples, 0.97%)</title><rect x="166.7" y="1075.0" width="11.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="169.7" y="1086.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (28 samples, 0.06%)</title><rect x="175.7" y="1059.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="178.7" y="1070.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (16 samples, 0.03%)</title><rect x="176.0" y="1043.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="179.0" y="1054.0"></text>
</g>
<g>
<title>ret_from_intr (69 samples, 0.15%)</title><rect x="176.5" y="1059.0" width="1.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="179.5" y="1070.0"></text>
</g>
<g>
<title>do_IRQ (69 samples, 0.15%)</title><rect x="176.5" y="1043.0" width="1.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="179.5" y="1054.0"></text>
</g>
<g>
<title>irq_exit (69 samples, 0.15%)</title><rect x="176.5" y="1027.0" width="1.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="179.5" y="1038.0"></text>
</g>
<g>
<title>__softirqentry_text_start (69 samples, 0.15%)</title><rect x="176.5" y="1011.0" width="1.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="179.5" y="1022.0"></text>
</g>
<g>
<title>net_rx_action (46 samples, 0.10%)</title><rect x="177.0" y="995.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="180.0" y="1006.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (43 samples, 0.09%)</title><rect x="177.1" y="979.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="180.1" y="990.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (26 samples, 0.06%)</title><rect x="177.4" y="963.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="180.4" y="974.0"></text>
</g>
<g>
<title>napi_gro_frags (14 samples, 0.03%)</title><rect x="177.6" y="947.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="180.6" y="958.0"></text>
</g>
<g>
<title>dev_gro_receive (11 samples, 0.02%)</title><rect x="177.6" y="931.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="180.6" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (12 samples, 0.03%)</title><rect x="178.2" y="1075.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="181.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (11 samples, 0.02%)</title><rect x="178.2" y="1059.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="181.2" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/PacketDecoder.onPacketComplete (792 samples, 1.71%)</title><rect x="178.7" y="1091.0" width="20.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.7" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/PacketDispatcher.accept (722 samples, 1.56%)</title><rect x="179.9" y="1075.0" width="18.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="182.9" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/PacketDispatcher.accept (722 samples, 1.56%)</title><rect x="179.9" y="1059.0" width="18.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="182.9" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.accept (700 samples, 1.51%)</title><rect x="180.4" y="1043.0" width="17.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="183.4" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.accept (700 samples, 1.51%)</title><rect x="180.4" y="1027.0" width="17.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="183.4" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.execute (700 samples, 1.51%)</title><rect x="180.4" y="1011.0" width="17.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="183.4" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationQueueImpl.add (678 samples, 1.46%)</title><rect x="180.9" y="995.0" width="17.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="183.9" y="1006.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.add (670 samples, 1.44%)</title><rect x="181.1" y="979.0" width="17.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="184.1" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/concurrent/MPSCQueue.offer (666 samples, 1.43%)</title><rect x="181.1" y="963.0" width="16.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="184.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.compareAndSet (18 samples, 0.04%)</title><rect x="181.4" y="947.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="184.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (631 samples, 1.36%)</title><rect x="181.9" y="947.0" width="16.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="184.9" y="958.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (630 samples, 1.36%)</title><rect x="181.9" y="931.0" width="16.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.9" y="942.0"></text>
</g>
<g>
<title>Unsafe_Unpark (57 samples, 0.12%)</title><rect x="182.1" y="915.0" width="1.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="185.1" y="926.0"></text>
</g>
<g>
<title>pthread_mutex_lock (36 samples, 0.08%)</title><rect x="182.6" y="899.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="185.6" y="910.0"></text>
</g>
<g>
<title>__lll_unlock_wake (11 samples, 0.02%)</title><rect x="183.5" y="915.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="186.5" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.02%)</title><rect x="183.5" y="899.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="186.5" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (11 samples, 0.02%)</title><rect x="183.5" y="883.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="186.5" y="894.0"></text>
</g>
<g>
<title>sys_futex (11 samples, 0.02%)</title><rect x="183.5" y="867.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="186.5" y="878.0"></text>
</g>
<g>
<title>do_futex (11 samples, 0.02%)</title><rect x="183.5" y="851.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="186.5" y="862.0"></text>
</g>
<g>
<title>futex_wake (11 samples, 0.02%)</title><rect x="183.5" y="835.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="186.5" y="846.0"></text>
</g>
<g>
<title>__pthread_cond_signal (548 samples, 1.18%)</title><rect x="183.8" y="915.0" width="13.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="186.8" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (466 samples, 1.00%)</title><rect x="185.6" y="899.0" width="11.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="188.6" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (466 samples, 1.00%)</title><rect x="185.6" y="883.0" width="11.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="188.6" y="894.0"></text>
</g>
<g>
<title>sys_futex (402 samples, 0.87%)</title><rect x="186.7" y="867.0" width="10.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="189.7" y="878.0"></text>
</g>
<g>
<title>do_futex (397 samples, 0.86%)</title><rect x="186.8" y="851.0" width="10.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="189.8" y="862.0"></text>
</g>
<g>
<title>futex_wake (392 samples, 0.84%)</title><rect x="186.9" y="835.0" width="10.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="189.9" y="846.0"></text>
</g>
<g>
<title>_raw_spin_lock (23 samples, 0.05%)</title><rect x="188.1" y="819.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="191.1" y="830.0"></text>
</g>
<g>
<title>mark_wake_futex (58 samples, 0.12%)</title><rect x="189.0" y="819.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="192.0" y="830.0"></text>
</g>
<g>
<title>__unqueue_futex (24 samples, 0.05%)</title><rect x="189.0" y="803.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="192.0" y="814.0"></text>
</g>
<g>
<title>wake_q_add (33 samples, 0.07%)</title><rect x="189.6" y="803.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="192.6" y="814.0"></text>
</g>
<g>
<title>ret_from_intr (11 samples, 0.02%)</title><rect x="190.5" y="819.0" width="0.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="193.5" y="830.0"></text>
</g>
<g>
<title>do_IRQ (11 samples, 0.02%)</title><rect x="190.5" y="803.0" width="0.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="193.5" y="814.0"></text>
</g>
<g>
<title>irq_exit (11 samples, 0.02%)</title><rect x="190.5" y="787.0" width="0.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="193.5" y="798.0"></text>
</g>
<g>
<title>__softirqentry_text_start (11 samples, 0.02%)</title><rect x="190.5" y="771.0" width="0.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="193.5" y="782.0"></text>
</g>
<g>
<title>net_rx_action (10 samples, 0.02%)</title><rect x="190.5" y="755.0" width="0.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="193.5" y="766.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (10 samples, 0.02%)</title><rect x="190.5" y="739.0" width="0.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="193.5" y="750.0"></text>
</g>
<g>
<title>wake_up_q (242 samples, 0.52%)</title><rect x="190.7" y="819.0" width="6.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="193.7" y="830.0"></text>
</g>
<g>
<title>try_to_wake_up (240 samples, 0.52%)</title><rect x="190.8" y="803.0" width="6.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="193.8" y="814.0"></text>
</g>
<g>
<title>__lock_text_start (239 samples, 0.51%)</title><rect x="190.8" y="787.0" width="6.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="193.8" y="798.0"></text>
</g>
<g>
<title>ret_from_intr (31 samples, 0.07%)</title><rect x="196.1" y="771.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="199.1" y="782.0"></text>
</g>
<g>
<title>do_IRQ (31 samples, 0.07%)</title><rect x="196.1" y="755.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="199.1" y="766.0"></text>
</g>
<g>
<title>irq_exit (31 samples, 0.07%)</title><rect x="196.1" y="739.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="199.1" y="750.0"></text>
</g>
<g>
<title>__softirqentry_text_start (31 samples, 0.07%)</title><rect x="196.1" y="723.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="199.1" y="734.0"></text>
</g>
<g>
<title>net_rx_action (24 samples, 0.05%)</title><rect x="196.2" y="707.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="199.2" y="718.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (22 samples, 0.05%)</title><rect x="196.2" y="691.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="199.2" y="702.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (12 samples, 0.03%)</title><rect x="196.5" y="675.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="199.5" y="686.0"></text>
</g>
<g>
<title>syscall_trace_enter (11 samples, 0.02%)</title><rect x="197.1" y="867.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="200.1" y="878.0"></text>
</g>
<g>
<title>ret_from_intr (12 samples, 0.03%)</title><rect x="197.4" y="899.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="200.4" y="910.0"></text>
</g>
<g>
<title>do_IRQ (12 samples, 0.03%)</title><rect x="197.4" y="883.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="200.4" y="894.0"></text>
</g>
<g>
<title>irq_exit (12 samples, 0.03%)</title><rect x="197.4" y="867.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="200.4" y="878.0"></text>
</g>
<g>
<title>__softirqentry_text_start (12 samples, 0.03%)</title><rect x="197.4" y="851.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="200.4" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (20 samples, 0.04%)</title><rect x="198.2" y="1075.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="201.2" y="1086.0"></text>
</g>
<g>
<title>gettimeofday (20 samples, 0.04%)</title><rect x="198.2" y="1059.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="201.2" y="1070.0"></text>
</g>
<g>
<title>[vdso] (14 samples, 0.03%)</title><rect x="198.3" y="1043.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="201.3" y="1054.0"></text>
</g>
<g>
<title>ret_from_intr (11 samples, 0.02%)</title><rect x="198.8" y="1091.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="201.8" y="1102.0"></text>
</g>
<g>
<title>do_IRQ (11 samples, 0.02%)</title><rect x="198.8" y="1075.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="201.8" y="1086.0"></text>
</g>
<g>
<title>irq_exit (11 samples, 0.02%)</title><rect x="198.8" y="1059.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="201.8" y="1070.0"></text>
</g>
<g>
<title>__softirqentry_text_start (11 samples, 0.02%)</title><rect x="198.8" y="1043.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="201.8" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3,415 samples, 7.36%)</title><rect x="199.4" y="1107.0" width="86.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="202.4" y="1118.0">sun/nio/ch..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*) (14 samples, 0.03%)</title><rect x="201.0" y="1091.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="204.0" y="1102.0"></text>
</g>
<g>
<title>com/oracle/jrockit/jfr/DurationEvent.begin (16 samples, 0.03%)</title><rect x="201.4" y="1091.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="204.4" y="1102.0"></text>
</g>
<g>
<title>com/oracle/jrockit/jfr/DurationEvent.end (19 samples, 0.04%)</title><rect x="201.8" y="1091.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.8" y="1102.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/events/EventHandlerImpl.counterTime (19 samples, 0.04%)</title><rect x="201.8" y="1075.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.8" y="1086.0"></text>
</g>
<g>
<title>os::ft_or_os_elapsed_counter() (18 samples, 0.04%)</title><rect x="201.8" y="1059.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="204.8" y="1070.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (50 samples, 0.11%)</title><rect x="202.4" y="1091.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="205.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (14 samples, 0.03%)</title><rect x="202.6" y="1075.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.6" y="1086.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (23 samples, 0.05%)</title><rect x="202.9" y="1075.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.9" y="1086.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (44 samples, 0.09%)</title><rect x="203.6" y="1091.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="206.6" y="1102.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (44 samples, 0.09%)</title><rect x="203.6" y="1075.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="206.6" y="1086.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (212 samples, 0.46%)</title><rect x="204.8" y="1091.0" width="5.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="207.8" y="1102.0"></text>
</g>
<g>
<title>ret_from_intr (27 samples, 0.06%)</title><rect x="209.5" y="1075.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="212.5" y="1086.0"></text>
</g>
<g>
<title>do_IRQ (27 samples, 0.06%)</title><rect x="209.5" y="1059.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="212.5" y="1070.0"></text>
</g>
<g>
<title>irq_exit (27 samples, 0.06%)</title><rect x="209.5" y="1043.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="212.5" y="1054.0"></text>
</g>
<g>
<title>__softirqentry_text_start (27 samples, 0.06%)</title><rect x="209.5" y="1027.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="212.5" y="1038.0"></text>
</g>
<g>
<title>net_rx_action (13 samples, 0.03%)</title><rect x="209.8" y="1011.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="212.8" y="1022.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (12 samples, 0.03%)</title><rect x="209.8" y="995.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="212.8" y="1006.0"></text>
</g>
<g>
<title>jdk/jfr/events/SocketReadEvent.&lt;init&gt; (11 samples, 0.02%)</title><rect x="210.2" y="1091.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="213.2" y="1102.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (60 samples, 0.13%)</title><rect x="210.5" y="1091.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="213.5" y="1102.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (20 samples, 0.04%)</title><rect x="212.0" y="1091.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="215.0" y="1102.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (81 samples, 0.17%)</title><rect x="212.5" y="1091.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="215.5" y="1102.0"></text>
</g>
<g>
<title>ret_from_intr (13 samples, 0.03%)</title><rect x="214.2" y="1075.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="217.2" y="1086.0"></text>
</g>
<g>
<title>do_IRQ (13 samples, 0.03%)</title><rect x="214.2" y="1059.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="217.2" y="1070.0"></text>
</g>
<g>
<title>irq_exit (13 samples, 0.03%)</title><rect x="214.2" y="1043.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="217.2" y="1054.0"></text>
</g>
<g>
<title>__softirqentry_text_start (13 samples, 0.03%)</title><rect x="214.2" y="1027.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="217.2" y="1038.0"></text>
</g>
<g>
<title>ret_from_intr (11 samples, 0.02%)</title><rect x="214.6" y="1091.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="217.6" y="1102.0"></text>
</g>
<g>
<title>do_IRQ (11 samples, 0.02%)</title><rect x="214.6" y="1075.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="217.6" y="1086.0"></text>
</g>
<g>
<title>irq_exit (11 samples, 0.02%)</title><rect x="214.6" y="1059.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="217.6" y="1070.0"></text>
</g>
<g>
<title>__softirqentry_text_start (11 samples, 0.02%)</title><rect x="214.6" y="1043.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="217.6" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2,746 samples, 5.91%)</title><rect x="214.9" y="1091.0" width="69.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.9" y="1102.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2,510 samples, 5.41%)</title><rect x="215.7" y="1075.0" width="63.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.7" y="1086.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (2,506 samples, 5.40%)</title><rect x="215.8" y="1059.0" width="63.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.8" y="1070.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (2,506 samples, 5.40%)</title><rect x="215.8" y="1043.0" width="63.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.8" y="1054.0">sun/nio..</text>
</g>
<g>
<title>__pthread_enable_asynccancel (12 samples, 0.03%)</title><rect x="216.4" y="1027.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="219.4" y="1038.0"></text>
</g>
<g>
<title>read (2,457 samples, 5.29%)</title><rect x="216.9" y="1027.0" width="62.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="219.9" y="1038.0">read</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2,365 samples, 5.09%)</title><rect x="219.0" y="1011.0" width="60.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="222.0" y="1022.0">entry_..</text>
</g>
<g>
<title>do_syscall_64 (2,365 samples, 5.09%)</title><rect x="219.0" y="995.0" width="60.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="222.0" y="1006.0">do_sys..</text>
</g>
<g>
<title>ret_from_intr (13 samples, 0.03%)</title><rect x="221.2" y="979.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="224.2" y="990.0"></text>
</g>
<g>
<title>do_IRQ (13 samples, 0.03%)</title><rect x="221.2" y="963.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="224.2" y="974.0"></text>
</g>
<g>
<title>irq_exit (13 samples, 0.03%)</title><rect x="221.2" y="947.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="224.2" y="958.0"></text>
</g>
<g>
<title>__softirqentry_text_start (13 samples, 0.03%)</title><rect x="221.2" y="931.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="224.2" y="942.0"></text>
</g>
<g>
<title>sys_read (2,238 samples, 4.82%)</title><rect x="221.5" y="979.0" width="56.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="224.5" y="990.0">sys_read</text>
</g>
<g>
<title>__fdget_pos (59 samples, 0.13%)</title><rect x="221.6" y="963.0" width="1.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="224.6" y="974.0"></text>
</g>
<g>
<title>__fget_light (57 samples, 0.12%)</title><rect x="221.7" y="947.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="224.7" y="958.0"></text>
</g>
<g>
<title>__fget (43 samples, 0.09%)</title><rect x="222.0" y="931.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="225.0" y="942.0"></text>
</g>
<g>
<title>fput (26 samples, 0.06%)</title><rect x="223.1" y="963.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="226.1" y="974.0"></text>
</g>
<g>
<title>vfs_read (2,147 samples, 4.62%)</title><rect x="223.8" y="963.0" width="54.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="226.8" y="974.0">vfs_r..</text>
</g>
<g>
<title>__vfs_read (2,107 samples, 4.54%)</title><rect x="224.5" y="947.0" width="53.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="227.5" y="958.0">__vfs..</text>
</g>
<g>
<title>sock_read_iter (2,095 samples, 4.51%)</title><rect x="224.8" y="931.0" width="53.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="227.8" y="942.0">sock_..</text>
</g>
<g>
<title>inet_recvmsg (2,065 samples, 4.45%)</title><rect x="225.2" y="915.0" width="52.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="228.2" y="926.0">inet_..</text>
</g>
<g>
<title>tcp_recvmsg (2,055 samples, 4.43%)</title><rect x="225.5" y="899.0" width="52.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="228.5" y="910.0">tcp_r..</text>
</g>
<g>
<title>__kfree_skb (405 samples, 0.87%)</title><rect x="226.7" y="883.0" width="10.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="229.7" y="894.0"></text>
</g>
<g>
<title>page_frag_free (30 samples, 0.06%)</title><rect x="226.9" y="867.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="229.9" y="878.0"></text>
</g>
<g>
<title>skb_release_all (54 samples, 0.12%)</title><rect x="227.6" y="867.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="230.6" y="878.0"></text>
</g>
<g>
<title>skb_release_head_state (53 samples, 0.11%)</title><rect x="227.7" y="851.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="230.7" y="862.0"></text>
</g>
<g>
<title>sock_rfree (40 samples, 0.09%)</title><rect x="228.0" y="835.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="231.0" y="846.0"></text>
</g>
<g>
<title>skb_release_data (316 samples, 0.68%)</title><rect x="229.0" y="867.0" width="8.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="232.0" y="878.0"></text>
</g>
<g>
<title>__put_page (17 samples, 0.04%)</title><rect x="231.2" y="851.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="234.2" y="862.0"></text>
</g>
<g>
<title>free_hot_cold_page (201 samples, 0.43%)</title><rect x="231.6" y="851.0" width="5.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="234.6" y="862.0"></text>
</g>
<g>
<title>ret_from_intr (15 samples, 0.03%)</title><rect x="236.4" y="835.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="239.4" y="846.0"></text>
</g>
<g>
<title>do_IRQ (15 samples, 0.03%)</title><rect x="236.4" y="819.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="239.4" y="830.0"></text>
</g>
<g>
<title>irq_exit (15 samples, 0.03%)</title><rect x="236.4" y="803.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="239.4" y="814.0"></text>
</g>
<g>
<title>__softirqentry_text_start (15 samples, 0.03%)</title><rect x="236.4" y="787.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="239.4" y="798.0"></text>
</g>
<g>
<title>net_rx_action (10 samples, 0.02%)</title><rect x="236.4" y="771.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="239.4" y="782.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (10 samples, 0.02%)</title><rect x="236.4" y="755.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="239.4" y="766.0"></text>
</g>
<g>
<title>ret_from_intr (11 samples, 0.02%)</title><rect x="236.8" y="851.0" width="0.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="239.8" y="862.0"></text>
</g>
<g>
<title>do_IRQ (11 samples, 0.02%)</title><rect x="236.8" y="835.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="239.8" y="846.0"></text>
</g>
<g>
<title>irq_exit (11 samples, 0.02%)</title><rect x="236.8" y="819.0" width="0.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="239.8" y="830.0"></text>
</g>
<g>
<title>__softirqentry_text_start (11 samples, 0.02%)</title><rect x="236.8" y="803.0" width="0.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="239.8" y="814.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (17 samples, 0.04%)</title><rect x="237.0" y="883.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="240.0" y="894.0"></text>
</g>
<g>
<title>do_softirq.part.17 (10 samples, 0.02%)</title><rect x="237.2" y="867.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="240.2" y="878.0"></text>
</g>
<g>
<title>do_softirq_own_stack (10 samples, 0.02%)</title><rect x="237.2" y="851.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="240.2" y="862.0"></text>
</g>
<g>
<title>__softirqentry_text_start (10 samples, 0.02%)</title><rect x="237.2" y="835.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="240.2" y="846.0"></text>
</g>
<g>
<title>net_rx_action (10 samples, 0.02%)</title><rect x="237.2" y="819.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="240.2" y="830.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (10 samples, 0.02%)</title><rect x="237.2" y="803.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="240.2" y="814.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.32 (12 samples, 0.03%)</title><rect x="237.5" y="883.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="240.5" y="894.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (72 samples, 0.16%)</title><rect x="237.8" y="883.0" width="1.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="240.8" y="894.0"></text>
</g>
<g>
<title>ip_output (50 samples, 0.11%)</title><rect x="238.1" y="867.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="241.1" y="878.0"></text>
</g>
<g>
<title>ip_finish_output2 (49 samples, 0.11%)</title><rect x="238.1" y="851.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="241.1" y="862.0"></text>
</g>
<g>
<title>__dev_queue_xmit (44 samples, 0.09%)</title><rect x="238.1" y="835.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="241.1" y="846.0"></text>
</g>
<g>
<title>sch_direct_xmit (33 samples, 0.07%)</title><rect x="238.4" y="819.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="241.4" y="830.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (25 samples, 0.05%)</title><rect x="238.6" y="803.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="241.6" y="814.0"></text>
</g>
<g>
<title>ena_start_xmit	[ena] (15 samples, 0.03%)</title><rect x="238.8" y="787.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="241.8" y="798.0"></text>
</g>
<g>
<title>kmem_cache_free (36 samples, 0.08%)</title><rect x="239.7" y="883.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="242.7" y="894.0"></text>
</g>
<g>
<title>__slab_free (24 samples, 0.05%)</title><rect x="239.9" y="867.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="242.9" y="878.0"></text>
</g>
<g>
<title>cmpxchg_double_slab.isra.61 (20 samples, 0.04%)</title><rect x="240.0" y="851.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="243.0" y="862.0"></text>
</g>
<g>
<title>lock_sock_nested (105 samples, 0.23%)</title><rect x="240.6" y="883.0" width="2.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="243.6" y="894.0"></text>
</g>
<g>
<title>__lock_sock (61 samples, 0.13%)</title><rect x="240.6" y="867.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="243.6" y="878.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (11 samples, 0.02%)</title><rect x="240.7" y="851.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="243.7" y="862.0"></text>
</g>
<g>
<title>schedule (47 samples, 0.10%)</title><rect x="241.0" y="851.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="244.0" y="862.0"></text>
</g>
<g>
<title>__sched_text_start (47 samples, 0.10%)</title><rect x="241.0" y="835.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="244.0" y="846.0"></text>
</g>
<g>
<title>finish_task_switch (45 samples, 0.10%)</title><rect x="241.0" y="819.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="244.0" y="830.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (43 samples, 0.09%)</title><rect x="242.2" y="867.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="245.2" y="878.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (20 samples, 0.04%)</title><rect x="242.8" y="851.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="245.8" y="862.0"></text>
</g>
<g>
<title>release_sock (155 samples, 0.33%)</title><rect x="243.3" y="883.0" width="3.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="246.3" y="894.0"></text>
</g>
<g>
<title>__release_sock (65 samples, 0.14%)</title><rect x="243.3" y="867.0" width="1.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="246.3" y="878.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (63 samples, 0.14%)</title><rect x="243.4" y="851.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="246.4" y="862.0"></text>
</g>
<g>
<title>tcp_rcv_established (60 samples, 0.13%)</title><rect x="243.4" y="835.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="246.4" y="846.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (11 samples, 0.02%)</title><rect x="243.5" y="819.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="246.5" y="830.0"></text>
</g>
<g>
<title>tcp_write_xmit (11 samples, 0.02%)</title><rect x="243.5" y="803.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="246.5" y="814.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (11 samples, 0.02%)</title><rect x="243.5" y="787.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="246.5" y="798.0"></text>
</g>
<g>
<title>ip_output (11 samples, 0.02%)</title><rect x="243.5" y="771.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="246.5" y="782.0"></text>
</g>
<g>
<title>ip_finish_output2 (11 samples, 0.02%)</title><rect x="243.5" y="755.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="246.5" y="766.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (25 samples, 0.05%)</title><rect x="243.9" y="819.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="246.9" y="830.0"></text>
</g>
<g>
<title>ip_output (20 samples, 0.04%)</title><rect x="243.9" y="803.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="246.9" y="814.0"></text>
</g>
<g>
<title>ip_finish_output2 (20 samples, 0.04%)</title><rect x="243.9" y="787.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="246.9" y="798.0"></text>
</g>
<g>
<title>__dev_queue_xmit (20 samples, 0.04%)</title><rect x="243.9" y="771.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="246.9" y="782.0"></text>
</g>
<g>
<title>sch_direct_xmit (15 samples, 0.03%)</title><rect x="244.0" y="755.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="247.0" y="766.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (11 samples, 0.02%)</title><rect x="244.1" y="739.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="247.1" y="750.0"></text>
</g>
<g>
<title>tcp_ack (10 samples, 0.02%)</title><rect x="244.7" y="819.0" width="0.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="247.7" y="830.0"></text>
</g>
<g>
<title>__wake_up_common_lock (43 samples, 0.09%)</title><rect x="245.0" y="867.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="248.0" y="878.0"></text>
</g>
<g>
<title>__lock_text_start (42 samples, 0.09%)</title><rect x="245.0" y="851.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="248.0" y="862.0"></text>
</g>
<g>
<title>tcp_release_cb (38 samples, 0.08%)</title><rect x="246.2" y="867.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="249.2" y="878.0"></text>
</g>
<g>
<title>tcp_write_xmit (30 samples, 0.06%)</title><rect x="246.4" y="851.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="249.4" y="862.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (25 samples, 0.05%)</title><rect x="246.5" y="835.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="249.5" y="846.0"></text>
</g>
<g>
<title>ip_output (20 samples, 0.04%)</title><rect x="246.5" y="819.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="249.5" y="830.0"></text>
</g>
<g>
<title>ip_finish_output2 (19 samples, 0.04%)</title><rect x="246.6" y="803.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="249.6" y="814.0"></text>
</g>
<g>
<title>__dev_queue_xmit (19 samples, 0.04%)</title><rect x="246.6" y="787.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="249.6" y="798.0"></text>
</g>
<g>
<title>sch_direct_xmit (18 samples, 0.04%)</title><rect x="246.6" y="771.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="249.6" y="782.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (1,123 samples, 2.42%)</title><rect x="247.3" y="883.0" width="28.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="250.3" y="894.0">sk..</text>
</g>
<g>
<title>_copy_to_iter (26 samples, 0.06%)</title><rect x="249.0" y="867.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="252.0" y="878.0"></text>
</g>
<g>
<title>copyout (25 samples, 0.05%)</title><rect x="249.0" y="851.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="252.0" y="862.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (19 samples, 0.04%)</title><rect x="249.1" y="835.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="252.1" y="846.0"></text>
</g>
<g>
<title>copy_page_to_iter (1,025 samples, 2.21%)</title><rect x="249.6" y="867.0" width="26.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="252.6" y="878.0">c..</text>
</g>
<g>
<title>copyout (897 samples, 1.93%)</title><rect x="252.7" y="851.0" width="22.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="255.7" y="862.0">c..</text>
</g>
<g>
<title>copy_user_enhanced_fast_string (887 samples, 1.91%)</title><rect x="252.9" y="835.0" width="22.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="255.9" y="846.0">c..</text>
</g>
<g>
<title>ret_from_intr (98 samples, 0.21%)</title><rect x="273.0" y="819.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="276.0" y="830.0"></text>
</g>
<g>
<title>do_IRQ (98 samples, 0.21%)</title><rect x="273.0" y="803.0" width="2.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="276.0" y="814.0"></text>
</g>
<g>
<title>irq_exit (98 samples, 0.21%)</title><rect x="273.0" y="787.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="276.0" y="798.0"></text>
</g>
<g>
<title>__softirqentry_text_start (98 samples, 0.21%)</title><rect x="273.0" y="771.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="276.0" y="782.0"></text>
</g>
<g>
<title>net_rx_action (48 samples, 0.10%)</title><rect x="274.2" y="755.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="277.2" y="766.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (45 samples, 0.10%)</title><rect x="274.2" y="739.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="277.2" y="750.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (31 samples, 0.07%)</title><rect x="274.5" y="723.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="277.5" y="734.0"></text>
</g>
<g>
<title>napi_gro_frags (13 samples, 0.03%)</title><rect x="274.7" y="707.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="277.7" y="718.0"></text>
</g>
<g>
<title>dev_gro_receive (12 samples, 0.03%)</title><rect x="274.7" y="691.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="277.7" y="702.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (11 samples, 0.02%)</title><rect x="274.7" y="675.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="277.7" y="686.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (11 samples, 0.02%)</title><rect x="274.7" y="659.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="277.7" y="670.0"></text>
</g>
<g>
<title>ip_rcv (11 samples, 0.02%)</title><rect x="274.7" y="643.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="277.7" y="654.0"></text>
</g>
<g>
<title>ip_local_deliver (11 samples, 0.02%)</title><rect x="274.7" y="627.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="277.7" y="638.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (11 samples, 0.02%)</title><rect x="274.7" y="611.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="277.7" y="622.0"></text>
</g>
<g>
<title>tcp_v4_rcv (11 samples, 0.02%)</title><rect x="274.7" y="595.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="277.7" y="606.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (11 samples, 0.02%)</title><rect x="274.7" y="579.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="277.7" y="590.0"></text>
</g>
<g>
<title>tcp_rcv_established (11 samples, 0.02%)</title><rect x="274.7" y="563.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="277.7" y="574.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (63 samples, 0.14%)</title><rect x="276.1" y="883.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="279.1" y="894.0"></text>
</g>
<g>
<title>sched_clock_cpu (59 samples, 0.13%)</title><rect x="276.2" y="867.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="279.2" y="878.0"></text>
</g>
<g>
<title>sched_clock (58 samples, 0.12%)</title><rect x="276.2" y="851.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="279.2" y="862.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (58 samples, 0.12%)</title><rect x="276.2" y="835.0" width="1.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="279.2" y="846.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (54 samples, 0.12%)</title><rect x="276.3" y="819.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="279.3" y="830.0"></text>
</g>
<g>
<title>sock_recvmsg (10 samples, 0.02%)</title><rect x="277.8" y="915.0" width="0.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="280.8" y="926.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (13 samples, 0.03%)</title><rect x="278.4" y="979.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="281.4" y="990.0"></text>
</g>
<g>
<title>__audit_syscall_exit (11 samples, 0.02%)</title><rect x="278.4" y="963.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="281.4" y="974.0"></text>
</g>
<g>
<title>syscall_trace_enter (15 samples, 0.03%)</title><rect x="278.7" y="979.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="281.7" y="990.0"></text>
</g>
<g>
<title>ret_from_intr (11 samples, 0.02%)</title><rect x="279.1" y="1011.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="282.1" y="1022.0"></text>
</g>
<g>
<title>do_IRQ (11 samples, 0.02%)</title><rect x="279.1" y="995.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="282.1" y="1006.0"></text>
</g>
<g>
<title>irq_exit (11 samples, 0.02%)</title><rect x="279.1" y="979.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="282.1" y="990.0"></text>
</g>
<g>
<title>__softirqentry_text_start (11 samples, 0.02%)</title><rect x="279.1" y="963.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="282.1" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (110 samples, 0.24%)</title><rect x="279.5" y="1075.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (85 samples, 0.18%)</title><rect x="279.8" y="1059.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="282.8" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (97 samples, 0.21%)</title><rect x="282.3" y="1075.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (21 samples, 0.05%)</title><rect x="282.4" y="1059.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="285.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (21 samples, 0.05%)</title><rect x="282.4" y="1043.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (17 samples, 0.04%)</title><rect x="282.5" y="1027.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.5" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (71 samples, 0.15%)</title><rect x="282.9" y="1059.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.9" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.access$000 (21 samples, 0.05%)</title><rect x="284.2" y="1043.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.2" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (18 samples, 0.04%)</title><rect x="284.7" y="1091.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="287.7" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.readerCleanup (27 samples, 0.06%)</title><rect x="285.4" y="1091.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.4" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.process (4,934 samples, 10.63%)</title><rect x="286.2" y="1123.0" width="125.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="289.2" y="1134.0">com/hazelcast/i..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/util/ClientMessageEncoder.onWrite (257 samples, 0.55%)</title><rect x="286.2" y="1107.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.2" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessageWriter.writeTo (81 samples, 0.17%)</title><rect x="286.6" y="1091.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="289.6" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessageWriter.writeFrame (71 samples, 0.15%)</title><rect x="286.8" y="1075.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.8" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.writeIntL (10 samples, 0.02%)</title><rect x="287.7" y="1059.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.7" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.writeIntL (10 samples, 0.02%)</title><rect x="287.7" y="1043.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.7" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteBufferAccessStrategy.putByte (10 samples, 0.02%)</title><rect x="287.7" y="1027.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="290.7" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteBufferAccessStrategy.putByte (10 samples, 0.02%)</title><rect x="287.7" y="1011.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.7" y="1022.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (13 samples, 0.03%)</title><rect x="288.3" y="1059.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="291.3" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.get (159 samples, 0.34%)</title><rect x="288.6" y="1091.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.6" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.get (159 samples, 0.34%)</title><rect x="288.6" y="1075.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (143 samples, 0.31%)</title><rect x="289.0" y="1059.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.casItem (115 samples, 0.25%)</title><rect x="289.5" y="1043.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="292.5" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.flushToSocket (4,256 samples, 9.17%)</title><rect x="292.8" y="1107.0" width="108.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="295.8" y="1118.0">com/hazelcast..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (4,233 samples, 9.12%)</title><rect x="293.4" y="1091.0" width="107.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.4" y="1102.0">sun/nio/ch/So..</text>
</g>
<g>
<title>com/oracle/jrockit/jfr/DurationEvent.begin (52 samples, 0.11%)</title><rect x="296.1" y="1075.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="299.1" y="1086.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/events/EventHandlerImpl.counterTime (12 samples, 0.03%)</title><rect x="296.9" y="1059.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.9" y="1070.0"></text>
</g>
<g>
<title>com/oracle/jrockit/jfr/DurationEvent.end (19 samples, 0.04%)</title><rect x="297.4" y="1075.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.4" y="1086.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/events/EventHandlerImpl.counterTime (17 samples, 0.04%)</title><rect x="297.5" y="1059.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="300.5" y="1070.0"></text>
</g>
<g>
<title>os::ft_or_os_elapsed_counter() (17 samples, 0.04%)</title><rect x="297.5" y="1043.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="300.5" y="1054.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (22 samples, 0.05%)</title><rect x="298.1" y="1075.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="301.1" y="1086.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (21 samples, 0.05%)</title><rect x="298.1" y="1059.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="301.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (12 samples, 0.03%)</title><rect x="298.3" y="1043.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="301.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (12 samples, 0.03%)</title><rect x="298.3" y="1027.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.3" y="1038.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (26 samples, 0.06%)</title><rect x="298.7" y="1075.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="301.7" y="1086.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (10 samples, 0.02%)</title><rect x="299.1" y="1059.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.1" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (3,866 samples, 8.33%)</title><rect x="299.5" y="1075.0" width="98.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="302.5" y="1086.0">sun/nio/ch/I..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (224 samples, 0.48%)</title><rect x="299.8" y="1059.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.8" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (223 samples, 0.48%)</title><rect x="299.9" y="1043.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="302.9" y="1054.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (217 samples, 0.47%)</title><rect x="300.0" y="1027.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="303.0" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (114 samples, 0.25%)</title><rect x="300.2" y="1011.0" width="2.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="303.2" y="1022.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (19 samples, 0.04%)</title><rect x="303.1" y="1011.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="306.1" y="1022.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (12 samples, 0.03%)</title><rect x="303.6" y="1011.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="306.6" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (59 samples, 0.13%)</title><rect x="303.9" y="1011.0" width="1.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="306.9" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (3,546 samples, 7.64%)</title><rect x="305.6" y="1059.0" width="90.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="308.6" y="1070.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (3,531 samples, 7.61%)</title><rect x="305.9" y="1043.0" width="89.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.9" y="1054.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (3,530 samples, 7.60%)</title><rect x="306.0" y="1027.0" width="89.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="309.0" y="1038.0">sun/nio/ch..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (13 samples, 0.03%)</title><rect x="306.8" y="1011.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="309.8" y="1022.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (11 samples, 0.02%)</title><rect x="307.1" y="1011.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="310.1" y="1022.0"></text>
</g>
<g>
<title>write (3,466 samples, 7.47%)</title><rect x="307.6" y="1011.0" width="88.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="310.6" y="1022.0">write</text>
</g>
<g>
<title>cleanup_module	[dm_mirror] (14 samples, 0.03%)</title><rect x="310.2" y="995.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="313.2" y="1006.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3,347 samples, 7.21%)</title><rect x="310.6" y="995.0" width="85.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="313.6" y="1006.0">entry_SYSC..</text>
</g>
<g>
<title>do_syscall_64 (3,347 samples, 7.21%)</title><rect x="310.6" y="979.0" width="85.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="313.6" y="990.0">do_syscall..</text>
</g>
<g>
<title>sys_write (3,198 samples, 6.89%)</title><rect x="313.4" y="963.0" width="81.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="316.4" y="974.0">sys_write</text>
</g>
<g>
<title>__fdget_pos (32 samples, 0.07%)</title><rect x="313.5" y="947.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="316.5" y="958.0"></text>
</g>
<g>
<title>__fget_light (32 samples, 0.07%)</title><rect x="313.5" y="931.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="316.5" y="942.0"></text>
</g>
<g>
<title>__fget (26 samples, 0.06%)</title><rect x="313.7" y="915.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="316.7" y="926.0"></text>
</g>
<g>
<title>fput (16 samples, 0.03%)</title><rect x="314.4" y="947.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="317.4" y="958.0"></text>
</g>
<g>
<title>vfs_write (3,144 samples, 6.77%)</title><rect x="314.8" y="947.0" width="79.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="317.8" y="958.0">vfs_write</text>
</g>
<g>
<title>__vfs_write (3,109 samples, 6.70%)</title><rect x="315.3" y="931.0" width="79.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="318.3" y="942.0">__vfs_write</text>
</g>
<g>
<title>sock_write_iter (3,094 samples, 6.66%)</title><rect x="315.7" y="915.0" width="78.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="318.7" y="926.0">sock_writ..</text>
</g>
<g>
<title>sock_sendmsg (3,073 samples, 6.62%)</title><rect x="316.2" y="899.0" width="78.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="319.2" y="910.0">sock_send..</text>
</g>
<g>
<title>inet_sendmsg (30 samples, 0.06%)</title><rect x="316.4" y="883.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="319.4" y="894.0"></text>
</g>
<g>
<title>tcp_sendmsg (3,026 samples, 6.52%)</title><rect x="317.4" y="883.0" width="76.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="320.4" y="894.0">tcp_send..</text>
</g>
<g>
<title>__local_bh_enable_ip (13 samples, 0.03%)</title><rect x="317.7" y="867.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="320.7" y="878.0"></text>
</g>
<g>
<title>lock_sock_nested (152 samples, 0.33%)</title><rect x="318.0" y="867.0" width="3.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="321.0" y="878.0"></text>
</g>
<g>
<title>__lock_sock (28 samples, 0.06%)</title><rect x="318.1" y="851.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="321.1" y="862.0"></text>
</g>
<g>
<title>schedule (24 samples, 0.05%)</title><rect x="318.2" y="835.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="321.2" y="846.0"></text>
</g>
<g>
<title>__sched_text_start (23 samples, 0.05%)</title><rect x="318.2" y="819.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="321.2" y="830.0"></text>
</g>
<g>
<title>finish_task_switch (23 samples, 0.05%)</title><rect x="318.2" y="803.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="321.2" y="814.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (122 samples, 0.26%)</title><rect x="318.8" y="851.0" width="3.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="321.8" y="862.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (82 samples, 0.18%)</title><rect x="319.8" y="835.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="322.8" y="846.0"></text>
</g>
<g>
<title>release_sock (237 samples, 0.51%)</title><rect x="321.9" y="867.0" width="6.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="324.9" y="878.0"></text>
</g>
<g>
<title>__release_sock (147 samples, 0.32%)</title><rect x="322.0" y="851.0" width="3.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="325.0" y="862.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (135 samples, 0.29%)</title><rect x="322.3" y="835.0" width="3.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="325.3" y="846.0"></text>
</g>
<g>
<title>tcp_rcv_established (132 samples, 0.28%)</title><rect x="322.4" y="819.0" width="3.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="325.4" y="830.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (22 samples, 0.05%)</title><rect x="322.8" y="803.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="325.8" y="814.0"></text>
</g>
<g>
<title>tcp_write_xmit (22 samples, 0.05%)</title><rect x="322.8" y="787.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="325.8" y="798.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (20 samples, 0.04%)</title><rect x="322.8" y="771.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="325.8" y="782.0"></text>
</g>
<g>
<title>ip_output (19 samples, 0.04%)</title><rect x="322.8" y="755.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="325.8" y="766.0"></text>
</g>
<g>
<title>ip_finish_output2 (19 samples, 0.04%)</title><rect x="322.8" y="739.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="325.8" y="750.0"></text>
</g>
<g>
<title>__dev_queue_xmit (19 samples, 0.04%)</title><rect x="322.8" y="723.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="325.8" y="734.0"></text>
</g>
<g>
<title>sch_direct_xmit (18 samples, 0.04%)</title><rect x="322.8" y="707.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="325.8" y="718.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (10 samples, 0.02%)</title><rect x="322.8" y="691.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="325.8" y="702.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (14 samples, 0.03%)</title><rect x="323.4" y="803.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="326.4" y="814.0"></text>
</g>
<g>
<title>ip_output (11 samples, 0.02%)</title><rect x="323.4" y="787.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="326.4" y="798.0"></text>
</g>
<g>
<title>ip_finish_output2 (11 samples, 0.02%)</title><rect x="323.4" y="771.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="326.4" y="782.0"></text>
</g>
<g>
<title>__dev_queue_xmit (10 samples, 0.02%)</title><rect x="323.5" y="755.0" width="0.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="326.5" y="766.0"></text>
</g>
<g>
<title>sock_def_readable (27 samples, 0.06%)</title><rect x="323.8" y="803.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="326.8" y="814.0"></text>
</g>
<g>
<title>__wake_up_common_lock (26 samples, 0.06%)</title><rect x="323.9" y="787.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="326.9" y="798.0"></text>
</g>
<g>
<title>__lock_text_start (26 samples, 0.06%)</title><rect x="323.9" y="771.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="326.9" y="782.0"></text>
</g>
<g>
<title>tcp_ack (42 samples, 0.09%)</title><rect x="324.5" y="803.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="327.5" y="814.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (36 samples, 0.08%)</title><rect x="324.6" y="787.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="327.6" y="798.0"></text>
</g>
<g>
<title>__kfree_skb (16 samples, 0.03%)</title><rect x="324.7" y="771.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="327.7" y="782.0"></text>
</g>
<g>
<title>skb_release_data (15 samples, 0.03%)</title><rect x="324.8" y="755.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="327.8" y="766.0"></text>
</g>
<g>
<title>__wake_up_common_lock (42 samples, 0.09%)</title><rect x="325.8" y="851.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="328.8" y="862.0"></text>
</g>
<g>
<title>__lock_text_start (42 samples, 0.09%)</title><rect x="325.8" y="835.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="328.8" y="846.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (13 samples, 0.03%)</title><rect x="326.8" y="851.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="329.8" y="862.0"></text>
</g>
<g>
<title>tcp_release_cb (30 samples, 0.06%)</title><rect x="327.2" y="851.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="330.2" y="862.0"></text>
</g>
<g>
<title>tcp_write_xmit (21 samples, 0.05%)</title><rect x="327.4" y="835.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="330.4" y="846.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (19 samples, 0.04%)</title><rect x="327.4" y="819.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="330.4" y="830.0"></text>
</g>
<g>
<title>ip_output (17 samples, 0.04%)</title><rect x="327.4" y="803.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="330.4" y="814.0"></text>
</g>
<g>
<title>ip_finish_output2 (17 samples, 0.04%)</title><rect x="327.4" y="787.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="330.4" y="798.0"></text>
</g>
<g>
<title>__dev_queue_xmit (17 samples, 0.04%)</title><rect x="327.4" y="771.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="330.4" y="782.0"></text>
</g>
<g>
<title>sch_direct_xmit (17 samples, 0.04%)</title><rect x="327.4" y="755.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="330.4" y="766.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (2,611 samples, 5.62%)</title><rect x="327.9" y="867.0" width="66.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="330.9" y="878.0">tcp_sen..</text>
</g>
<g>
<title>__tcp_push_pending_frames (1,414 samples, 3.05%)</title><rect x="332.4" y="851.0" width="35.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="335.4" y="862.0">__t..</text>
</g>
<g>
<title>tcp_write_xmit (1,413 samples, 3.04%)</title><rect x="332.4" y="835.0" width="35.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="335.4" y="846.0">tcp..</text>
</g>
<g>
<title>__tcp_transmit_skb (1,251 samples, 2.69%)</title><rect x="333.0" y="819.0" width="31.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="336.0" y="830.0">__..</text>
</g>
<g>
<title>__skb_clone (32 samples, 0.07%)</title><rect x="334.1" y="803.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="337.1" y="814.0"></text>
</g>
<g>
<title>ip_local_out (12 samples, 0.03%)</title><rect x="335.2" y="803.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="338.2" y="814.0"></text>
</g>
<g>
<title>__ip_local_out (11 samples, 0.02%)</title><rect x="335.2" y="787.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="338.2" y="798.0"></text>
</g>
<g>
<title>ip_send_check (11 samples, 0.02%)</title><rect x="335.2" y="771.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="338.2" y="782.0"></text>
</g>
<g>
<title>ip_output (1,113 samples, 2.40%)</title><rect x="335.5" y="803.0" width="28.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="338.5" y="814.0">ip..</text>
</g>
<g>
<title>ip_finish_output2 (1,091 samples, 2.35%)</title><rect x="335.6" y="787.0" width="27.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="338.6" y="798.0">i..</text>
</g>
<g>
<title>__dev_queue_xmit (1,039 samples, 2.24%)</title><rect x="336.2" y="771.0" width="26.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="339.2" y="782.0">_..</text>
</g>
<g>
<title>__qdisc_run (23 samples, 0.05%)</title><rect x="336.9" y="755.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="339.9" y="766.0"></text>
</g>
<g>
<title>sch_direct_xmit (21 samples, 0.05%)</title><rect x="337.0" y="739.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="340.0" y="750.0"></text>
</g>
<g>
<title>_raw_spin_lock (15 samples, 0.03%)</title><rect x="337.5" y="755.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="340.5" y="766.0"></text>
</g>
<g>
<title>netdev_pick_tx (38 samples, 0.08%)</title><rect x="337.9" y="755.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="340.9" y="766.0"></text>
</g>
<g>
<title>__netdev_pick_tx (17 samples, 0.04%)</title><rect x="338.2" y="739.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="341.2" y="750.0"></text>
</g>
<g>
<title>sch_direct_xmit (934 samples, 2.01%)</title><rect x="338.9" y="755.0" width="23.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="341.9" y="766.0">s..</text>
</g>
<g>
<title>_raw_spin_lock (101 samples, 0.22%)</title><rect x="338.9" y="739.0" width="2.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="341.9" y="750.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (520 samples, 1.12%)</title><rect x="341.5" y="739.0" width="13.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="344.5" y="750.0"></text>
</g>
<g>
<title>dev_queue_xmit_nit (97 samples, 0.21%)</title><rect x="341.6" y="723.0" width="2.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="344.6" y="734.0"></text>
</g>
<g>
<title>__skb_clone (62 samples, 0.13%)</title><rect x="341.9" y="707.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="344.9" y="718.0"></text>
</g>
<g>
<title>skb_clone (25 samples, 0.05%)</title><rect x="343.5" y="707.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="346.5" y="718.0"></text>
</g>
<g>
<title>kmem_cache_alloc (15 samples, 0.03%)</title><rect x="343.7" y="691.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="346.7" y="702.0"></text>
</g>
<g>
<title>ena_start_xmit	[ena] (382 samples, 0.82%)</title><rect x="344.1" y="723.0" width="9.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="347.1" y="734.0"></text>
</g>
<g>
<title>ena_com_prepare_tx	[ena] (106 samples, 0.23%)</title><rect x="349.7" y="707.0" width="2.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="352.7" y="718.0"></text>
</g>
<g>
<title>__iowrite64_copy (15 samples, 0.03%)</title><rect x="351.6" y="691.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="354.6" y="702.0"></text>
</g>
<g>
<title>skb_copy_bits (31 samples, 0.07%)</title><rect x="352.5" y="707.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="355.5" y="718.0"></text>
</g>
<g>
<title>memcpy_erms (23 samples, 0.05%)</title><rect x="352.7" y="691.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="355.7" y="702.0"></text>
</g>
<g>
<title>swiotlb_dma_mapping_error (12 samples, 0.03%)</title><rect x="353.3" y="707.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="356.3" y="718.0"></text>
</g>
<g>
<title>packet_rcv (35 samples, 0.08%)</title><rect x="353.8" y="723.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="356.8" y="734.0"></text>
</g>
<g>
<title>consume_skb (19 samples, 0.04%)</title><rect x="354.1" y="707.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="357.1" y="718.0"></text>
</g>
<g>
<title>skb_release_data (11 samples, 0.02%)</title><rect x="354.3" y="691.0" width="0.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="357.3" y="702.0"></text>
</g>
<g>
<title>validate_xmit_skb_list (311 samples, 0.67%)</title><rect x="354.7" y="739.0" width="7.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="357.7" y="750.0"></text>
</g>
<g>
<title>validate_xmit_skb (311 samples, 0.67%)</title><rect x="354.7" y="723.0" width="7.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="357.7" y="734.0"></text>
</g>
<g>
<title>__skb_gso_segment (283 samples, 0.61%)</title><rect x="354.8" y="707.0" width="7.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="357.8" y="718.0"></text>
</g>
<g>
<title>skb_mac_gso_segment (282 samples, 0.61%)</title><rect x="354.8" y="691.0" width="7.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="357.8" y="702.0"></text>
</g>
<g>
<title>inet_gso_segment (276 samples, 0.59%)</title><rect x="354.9" y="675.0" width="7.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="357.9" y="686.0"></text>
</g>
<g>
<title>tcp_gso_segment (251 samples, 0.54%)</title><rect x="355.6" y="659.0" width="6.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="358.6" y="670.0"></text>
</g>
<g>
<title>skb_segment (243 samples, 0.52%)</title><rect x="355.8" y="643.0" width="6.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="358.8" y="654.0"></text>
</g>
<g>
<title>__alloc_skb (85 samples, 0.18%)</title><rect x="358.0" y="627.0" width="2.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="361.0" y="638.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.42 (32 samples, 0.07%)</title><rect x="358.5" y="611.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="361.5" y="622.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (29 samples, 0.06%)</title><rect x="358.6" y="595.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="361.6" y="606.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (25 samples, 0.05%)</title><rect x="359.3" y="611.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="362.3" y="622.0"></text>
</g>
<g>
<title>ksize (10 samples, 0.02%)</title><rect x="359.9" y="611.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="362.9" y="622.0"></text>
</g>
<g>
<title>__copy_skb_header (16 samples, 0.03%)</title><rect x="360.2" y="627.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="363.2" y="638.0"></text>
</g>
<g>
<title>memcpy_erms (42 samples, 0.09%)</title><rect x="360.6" y="627.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="363.6" y="638.0"></text>
</g>
<g>
<title>netif_skb_features (10 samples, 0.02%)</title><rect x="362.3" y="707.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="365.3" y="718.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (28 samples, 0.06%)</title><rect x="362.6" y="771.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="365.6" y="782.0"></text>
</g>
<g>
<title>do_softirq.part.17 (26 samples, 0.06%)</title><rect x="362.7" y="755.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="365.7" y="766.0"></text>
</g>
<g>
<title>do_softirq_own_stack (25 samples, 0.05%)</title><rect x="362.7" y="739.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="365.7" y="750.0"></text>
</g>
<g>
<title>__softirqentry_text_start (25 samples, 0.05%)</title><rect x="362.7" y="723.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="365.7" y="734.0"></text>
</g>
<g>
<title>net_rx_action (22 samples, 0.05%)</title><rect x="362.7" y="707.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="365.7" y="718.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (22 samples, 0.05%)</title><rect x="362.7" y="691.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="365.7" y="702.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (15 samples, 0.03%)</title><rect x="362.8" y="675.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="365.8" y="686.0"></text>
</g>
<g>
<title>ip_finish_output (17 samples, 0.04%)</title><rect x="363.3" y="787.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="366.3" y="798.0"></text>
</g>
<g>
<title>ip_queue_xmit (25 samples, 0.05%)</title><rect x="363.8" y="803.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="366.8" y="814.0"></text>
</g>
<g>
<title>ip_copy_addrs (10 samples, 0.02%)</title><rect x="364.2" y="787.0" width="0.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="367.2" y="798.0"></text>
</g>
<g>
<title>sched_clock_cpu (26 samples, 0.06%)</title><rect x="364.8" y="819.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="367.8" y="830.0"></text>
</g>
<g>
<title>sched_clock (23 samples, 0.05%)</title><rect x="364.9" y="803.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="367.9" y="814.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (23 samples, 0.05%)</title><rect x="364.9" y="787.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="367.9" y="798.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (23 samples, 0.05%)</title><rect x="364.9" y="771.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="367.9" y="782.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (69 samples, 0.15%)</title><rect x="365.5" y="819.0" width="1.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="368.5" y="830.0"></text>
</g>
<g>
<title>sk_reset_timer (42 samples, 0.09%)</title><rect x="365.8" y="803.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="368.8" y="814.0"></text>
</g>
<g>
<title>mod_timer (42 samples, 0.09%)</title><rect x="365.8" y="787.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="368.8" y="798.0"></text>
</g>
<g>
<title>__lock_text_start (30 samples, 0.06%)</title><rect x="366.0" y="771.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="369.0" y="782.0"></text>
</g>
<g>
<title>tcp_rearm_rto.part.60 (14 samples, 0.03%)</title><rect x="366.8" y="803.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="369.8" y="814.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (40 samples, 0.09%)</title><rect x="367.3" y="819.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="370.3" y="830.0"></text>
</g>
<g>
<title>sk_reset_timer (33 samples, 0.07%)</title><rect x="367.5" y="803.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="370.5" y="814.0"></text>
</g>
<g>
<title>mod_timer (29 samples, 0.06%)</title><rect x="367.6" y="787.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="370.6" y="798.0"></text>
</g>
<g>
<title>__lock_text_start (26 samples, 0.06%)</title><rect x="367.6" y="771.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="370.6" y="782.0"></text>
</g>
<g>
<title>_copy_from_iter_full (634 samples, 1.37%)</title><rect x="368.3" y="851.0" width="16.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="371.3" y="862.0"></text>
</g>
<g>
<title>copyin (609 samples, 1.31%)</title><rect x="368.5" y="835.0" width="15.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="371.5" y="846.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (600 samples, 1.29%)</title><rect x="368.7" y="819.0" width="15.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="371.7" y="830.0"></text>
</g>
<g>
<title>ret_from_intr (25 samples, 0.05%)</title><rect x="383.3" y="803.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="386.3" y="814.0"></text>
</g>
<g>
<title>do_IRQ (25 samples, 0.05%)</title><rect x="383.3" y="787.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="386.3" y="798.0"></text>
</g>
<g>
<title>irq_exit (25 samples, 0.05%)</title><rect x="383.3" y="771.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="386.3" y="782.0"></text>
</g>
<g>
<title>__softirqentry_text_start (25 samples, 0.05%)</title><rect x="383.3" y="755.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="386.3" y="766.0"></text>
</g>
<g>
<title>net_rx_action (13 samples, 0.03%)</title><rect x="383.6" y="739.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="386.6" y="750.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (13 samples, 0.03%)</title><rect x="383.6" y="723.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="386.6" y="734.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (10 samples, 0.02%)</title><rect x="383.7" y="707.0" width="0.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="386.7" y="718.0"></text>
</g>
<g>
<title>iov_iter_advance (18 samples, 0.04%)</title><rect x="384.0" y="835.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="387.0" y="846.0"></text>
</g>
<g>
<title>sk_page_frag_refill (102 samples, 0.22%)</title><rect x="384.5" y="851.0" width="2.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="387.5" y="862.0"></text>
</g>
<g>
<title>skb_page_frag_refill (99 samples, 0.21%)</title><rect x="384.6" y="835.0" width="2.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="387.6" y="846.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (72 samples, 0.16%)</title><rect x="385.2" y="819.0" width="1.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="388.2" y="830.0"></text>
</g>
<g>
<title>get_page_from_freelist (69 samples, 0.15%)</title><rect x="385.3" y="803.0" width="1.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="388.3" y="814.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (124 samples, 0.27%)</title><rect x="387.1" y="851.0" width="3.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="390.1" y="862.0"></text>
</g>
<g>
<title>__alloc_skb (117 samples, 0.25%)</title><rect x="387.3" y="835.0" width="3.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="390.3" y="846.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.42 (27 samples, 0.06%)</title><rect x="388.0" y="819.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="391.0" y="830.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (26 samples, 0.06%)</title><rect x="388.0" y="803.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="391.0" y="814.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (45 samples, 0.10%)</title><rect x="388.7" y="819.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="391.7" y="830.0"></text>
</g>
<g>
<title>ksize (16 samples, 0.03%)</title><rect x="389.8" y="819.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="392.8" y="830.0"></text>
</g>
<g>
<title>skb_entail (18 samples, 0.04%)</title><rect x="390.3" y="851.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="393.3" y="862.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (28 samples, 0.06%)</title><rect x="391.0" y="851.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="394.0" y="862.0"></text>
</g>
<g>
<title>tcp_send_mss (71 samples, 0.15%)</title><rect x="391.7" y="851.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="394.7" y="862.0"></text>
</g>
<g>
<title>tcp_current_mss (55 samples, 0.12%)</title><rect x="392.1" y="835.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="395.1" y="846.0"></text>
</g>
<g>
<title>tcp_established_options (27 samples, 0.06%)</title><rect x="392.8" y="819.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="395.8" y="830.0"></text>
</g>
<g>
<title>tcp_write_xmit (27 samples, 0.06%)</title><rect x="393.6" y="851.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="396.6" y="862.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (25 samples, 0.05%)</title><rect x="393.6" y="835.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="396.6" y="846.0"></text>
</g>
<g>
<title>ip_output (21 samples, 0.05%)</title><rect x="393.6" y="819.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="396.6" y="830.0"></text>
</g>
<g>
<title>ip_finish_output2 (21 samples, 0.05%)</title><rect x="393.6" y="803.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="396.6" y="814.0"></text>
</g>
<g>
<title>__dev_queue_xmit (21 samples, 0.05%)</title><rect x="393.6" y="787.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="396.6" y="798.0"></text>
</g>
<g>
<title>sch_direct_xmit (20 samples, 0.04%)</title><rect x="393.7" y="771.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="396.7" y="782.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (11 samples, 0.02%)</title><rect x="393.7" y="755.0" width="0.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="396.7" y="766.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (23 samples, 0.05%)</title><rect x="394.7" y="963.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="397.7" y="974.0"></text>
</g>
<g>
<title>__audit_syscall_exit (18 samples, 0.04%)</title><rect x="394.8" y="947.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="397.8" y="958.0"></text>
</g>
<g>
<title>syscall_trace_enter (15 samples, 0.03%)</title><rect x="395.3" y="963.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="398.3" y="974.0"></text>
</g>
<g>
<title>__audit_syscall_entry (12 samples, 0.03%)</title><rect x="395.3" y="947.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="398.3" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (56 samples, 0.12%)</title><rect x="395.7" y="1059.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="398.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (32 samples, 0.07%)</title><rect x="395.8" y="1043.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="398.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (16 samples, 0.03%)</title><rect x="396.1" y="1027.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="399.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (16 samples, 0.03%)</title><rect x="396.1" y="1011.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="399.1" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (18 samples, 0.04%)</title><rect x="396.7" y="1043.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="399.7" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (26 samples, 0.06%)</title><rect x="397.1" y="1059.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="400.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (15 samples, 0.03%)</title><rect x="397.3" y="1043.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="400.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (11 samples, 0.02%)</title><rect x="397.4" y="1027.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="400.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (10 samples, 0.02%)</title><rect x="397.4" y="1011.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="400.4" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (28 samples, 0.06%)</title><rect x="397.8" y="1075.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="400.8" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureWriteOpen (72 samples, 0.16%)</title><rect x="398.5" y="1075.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="401.5" y="1086.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*) (12 samples, 0.03%)</title><rect x="399.5" y="1059.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="402.5" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.isConnected (15 samples, 0.03%)</title><rect x="399.9" y="1059.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.9" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.writerCleanup (25 samples, 0.05%)</title><rect x="400.3" y="1075.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="403.3" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.postProcessClean (109 samples, 0.23%)</title><rect x="401.0" y="1107.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="404.0" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioPipeline.unregisterOp (42 samples, 0.09%)</title><rect x="401.7" y="1091.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="404.7" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (40 samples, 0.09%)</title><rect x="401.7" y="1075.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="404.7" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (40 samples, 0.09%)</title><rect x="401.7" y="1059.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="404.7" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetInterestOps (39 samples, 0.08%)</title><rect x="401.8" y="1043.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.8" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.putEventOps (38 samples, 0.08%)</title><rect x="401.8" y="1027.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="404.8" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.setInterest (12 samples, 0.03%)</title><rect x="402.5" y="1011.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="405.5" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioThread.addTask (14 samples, 0.03%)</title><rect x="402.8" y="1091.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="405.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.add (14 samples, 0.03%)</title><rect x="402.8" y="1075.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="405.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.offer (14 samples, 0.03%)</title><rect x="402.8" y="1059.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="405.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.isEmpty (12 samples, 0.03%)</title><rect x="403.1" y="1091.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="406.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (12 samples, 0.03%)</title><rect x="403.1" y="1075.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="406.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.compareAndSet (12 samples, 0.03%)</title><rect x="403.4" y="1091.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.4" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/PacketEncoder.onWrite (310 samples, 0.67%)</title><rect x="403.7" y="1107.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="406.7" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.get (228 samples, 0.49%)</title><rect x="404.1" y="1091.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="407.1" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.get (226 samples, 0.49%)</title><rect x="404.2" y="1075.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="407.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (171 samples, 0.37%)</title><rect x="405.5" y="1059.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="408.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.casItem (43 samples, 0.09%)</title><rect x="407.4" y="1043.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="410.4" y="1054.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (43 samples, 0.09%)</title><rect x="407.4" y="1027.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="410.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (41 samples, 0.09%)</title><rect x="408.5" y="1043.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="411.5" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (18 samples, 0.04%)</title><rect x="409.0" y="1027.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="412.0" y="1038.0"></text>
</g>
<g>
<title>gettimeofday (18 samples, 0.04%)</title><rect x="409.0" y="1011.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="412.0" y="1022.0"></text>
</g>
<g>
<title>[vdso] (14 samples, 0.03%)</title><rect x="409.1" y="995.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="412.1" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/PacketIOHelper.writeTo (57 samples, 0.12%)</title><rect x="410.0" y="1091.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="413.0" y="1102.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putChar (15 samples, 0.03%)</title><rect x="410.3" y="1075.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="413.3" y="1086.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putInt (29 samples, 0.06%)</title><rect x="410.6" y="1075.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="413.6" y="1086.0"></text>
</g>
<g>
<title>java/nio/Bits.putInt (18 samples, 0.04%)</title><rect x="410.7" y="1059.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="413.7" y="1070.0"></text>
</g>
<g>
<title>java/nio/Bits.putIntB (18 samples, 0.04%)</title><rect x="410.7" y="1043.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="413.7" y="1054.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer._put (15 samples, 0.03%)</title><rect x="410.8" y="1027.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="413.8" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/SelectorOptimizer$IteratorImpl.hasNext (13 samples, 0.03%)</title><rect x="411.7" y="1139.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="414.7" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (50 samples, 0.11%)</title><rect x="412.4" y="1139.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="415.4" y="1150.0"></text>
</g>
<g>
<title>gettimeofday (47 samples, 0.10%)</title><rect x="412.5" y="1123.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="415.5" y="1134.0"></text>
</g>
<g>
<title>[vdso] (39 samples, 0.08%)</title><rect x="412.7" y="1107.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="415.7" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioThread.processTaskQueue (673 samples, 1.45%)</title><rect x="413.9" y="1155.0" width="17.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="416.9" y="1166.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioPipeline.run (640 samples, 1.38%)</title><rect x="414.1" y="1139.0" width="16.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="417.1" y="1150.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.process (635 samples, 1.37%)</title><rect x="414.2" y="1123.0" width="16.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="417.2" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/util/ClientMessageEncoder.onWrite (25 samples, 0.05%)</title><rect x="414.2" y="1107.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="417.2" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.get (14 samples, 0.03%)</title><rect x="414.4" y="1091.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="417.4" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.get (14 samples, 0.03%)</title><rect x="414.4" y="1075.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="417.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (14 samples, 0.03%)</title><rect x="414.4" y="1059.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="417.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.casItem (12 samples, 0.03%)</title><rect x="414.5" y="1043.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="417.5" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.flushToSocket (566 samples, 1.22%)</title><rect x="414.8" y="1107.0" width="14.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="417.8" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (566 samples, 1.22%)</title><rect x="414.8" y="1091.0" width="14.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="417.8" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (519 samples, 1.12%)</title><rect x="415.6" y="1075.0" width="13.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="418.6" y="1086.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (23 samples, 0.05%)</title><rect x="415.7" y="1059.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="418.7" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (23 samples, 0.05%)</title><rect x="415.7" y="1043.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="418.7" y="1054.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (23 samples, 0.05%)</title><rect x="415.7" y="1027.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="418.7" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (14 samples, 0.03%)</title><rect x="415.7" y="1011.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="418.7" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (481 samples, 1.04%)</title><rect x="416.3" y="1059.0" width="12.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="419.3" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (479 samples, 1.03%)</title><rect x="416.3" y="1043.0" width="12.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="419.3" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (479 samples, 1.03%)</title><rect x="416.3" y="1027.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.3" y="1038.0"></text>
</g>
<g>
<title>write (467 samples, 1.01%)</title><rect x="416.6" y="1011.0" width="11.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="419.6" y="1022.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (445 samples, 0.96%)</title><rect x="417.1" y="995.0" width="11.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="420.1" y="1006.0"></text>
</g>
<g>
<title>do_syscall_64 (445 samples, 0.96%)</title><rect x="417.1" y="979.0" width="11.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="420.1" y="990.0"></text>
</g>
<g>
<title>sys_write (427 samples, 0.92%)</title><rect x="417.5" y="963.0" width="10.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="420.5" y="974.0"></text>
</g>
<g>
<title>vfs_write (415 samples, 0.89%)</title><rect x="417.8" y="947.0" width="10.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="420.8" y="958.0"></text>
</g>
<g>
<title>__vfs_write (412 samples, 0.89%)</title><rect x="417.9" y="931.0" width="10.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="420.9" y="942.0"></text>
</g>
<g>
<title>sock_write_iter (409 samples, 0.88%)</title><rect x="417.9" y="915.0" width="10.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="420.9" y="926.0"></text>
</g>
<g>
<title>sock_sendmsg (405 samples, 0.87%)</title><rect x="418.0" y="899.0" width="10.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="421.0" y="910.0"></text>
</g>
<g>
<title>tcp_sendmsg (398 samples, 0.86%)</title><rect x="418.2" y="883.0" width="10.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="421.2" y="894.0"></text>
</g>
<g>
<title>lock_sock_nested (45 samples, 0.10%)</title><rect x="418.3" y="867.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="421.3" y="878.0"></text>
</g>
<g>
<title>__lock_sock (16 samples, 0.03%)</title><rect x="418.3" y="851.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="421.3" y="862.0"></text>
</g>
<g>
<title>schedule (12 samples, 0.03%)</title><rect x="418.4" y="835.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="421.4" y="846.0"></text>
</g>
<g>
<title>__sched_text_start (12 samples, 0.03%)</title><rect x="418.4" y="819.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="421.4" y="830.0"></text>
</g>
<g>
<title>finish_task_switch (12 samples, 0.03%)</title><rect x="418.4" y="803.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="421.4" y="814.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (28 samples, 0.06%)</title><rect x="418.7" y="851.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="421.7" y="862.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (16 samples, 0.03%)</title><rect x="419.0" y="835.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="422.0" y="846.0"></text>
</g>
<g>
<title>release_sock (36 samples, 0.08%)</title><rect x="419.5" y="867.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="422.5" y="878.0"></text>
</g>
<g>
<title>__release_sock (21 samples, 0.05%)</title><rect x="419.5" y="851.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="422.5" y="862.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (18 samples, 0.04%)</title><rect x="419.5" y="835.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="422.5" y="846.0"></text>
</g>
<g>
<title>tcp_rcv_established (18 samples, 0.04%)</title><rect x="419.5" y="819.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="422.5" y="830.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (313 samples, 0.67%)</title><rect x="420.4" y="867.0" width="7.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="423.4" y="878.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (103 samples, 0.22%)</title><rect x="420.9" y="851.0" width="2.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="423.9" y="862.0"></text>
</g>
<g>
<title>tcp_write_xmit (103 samples, 0.22%)</title><rect x="420.9" y="835.0" width="2.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="423.9" y="846.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (89 samples, 0.19%)</title><rect x="421.0" y="819.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="424.0" y="830.0"></text>
</g>
<g>
<title>ip_output (82 samples, 0.18%)</title><rect x="421.1" y="803.0" width="2.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="424.1" y="814.0"></text>
</g>
<g>
<title>ip_finish_output2 (80 samples, 0.17%)</title><rect x="421.1" y="787.0" width="2.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="424.1" y="798.0"></text>
</g>
<g>
<title>__dev_queue_xmit (78 samples, 0.17%)</title><rect x="421.1" y="771.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="424.1" y="782.0"></text>
</g>
<g>
<title>sch_direct_xmit (73 samples, 0.16%)</title><rect x="421.2" y="755.0" width="1.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="424.2" y="766.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (33 samples, 0.07%)</title><rect x="421.4" y="739.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="424.4" y="750.0"></text>
</g>
<g>
<title>ena_start_xmit	[ena] (21 samples, 0.05%)</title><rect x="421.6" y="723.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="424.6" y="734.0"></text>
</g>
<g>
<title>validate_xmit_skb_list (35 samples, 0.08%)</title><rect x="422.2" y="739.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="425.2" y="750.0"></text>
</g>
<g>
<title>validate_xmit_skb (35 samples, 0.08%)</title><rect x="422.2" y="723.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="425.2" y="734.0"></text>
</g>
<g>
<title>__skb_gso_segment (32 samples, 0.07%)</title><rect x="422.2" y="707.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="425.2" y="718.0"></text>
</g>
<g>
<title>skb_mac_gso_segment (32 samples, 0.07%)</title><rect x="422.2" y="691.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="425.2" y="702.0"></text>
</g>
<g>
<title>inet_gso_segment (32 samples, 0.07%)</title><rect x="422.2" y="675.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="425.2" y="686.0"></text>
</g>
<g>
<title>tcp_gso_segment (31 samples, 0.07%)</title><rect x="422.2" y="659.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="425.2" y="670.0"></text>
</g>
<g>
<title>skb_segment (28 samples, 0.06%)</title><rect x="422.3" y="643.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="425.3" y="654.0"></text>
</g>
<g>
<title>__alloc_skb (14 samples, 0.03%)</title><rect x="422.5" y="627.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="425.5" y="638.0"></text>
</g>
<g>
<title>_copy_from_iter_full (111 samples, 0.24%)</title><rect x="423.5" y="851.0" width="2.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="426.5" y="862.0"></text>
</g>
<g>
<title>copyin (108 samples, 0.23%)</title><rect x="423.6" y="835.0" width="2.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="426.6" y="846.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (106 samples, 0.23%)</title><rect x="423.6" y="819.0" width="2.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="426.6" y="830.0"></text>
</g>
<g>
<title>sk_page_frag_refill (23 samples, 0.05%)</title><rect x="426.4" y="851.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="429.4" y="862.0"></text>
</g>
<g>
<title>skb_page_frag_refill (23 samples, 0.05%)</title><rect x="426.4" y="835.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="429.4" y="846.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (18 samples, 0.04%)</title><rect x="426.5" y="819.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="429.5" y="830.0"></text>
</g>
<g>
<title>get_page_from_freelist (18 samples, 0.04%)</title><rect x="426.5" y="803.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="429.5" y="814.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (23 samples, 0.05%)</title><rect x="427.0" y="851.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="430.0" y="862.0"></text>
</g>
<g>
<title>__alloc_skb (22 samples, 0.05%)</title><rect x="427.0" y="835.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="430.0" y="846.0"></text>
</g>
<g>
<title>tcp_send_mss (12 samples, 0.03%)</title><rect x="427.7" y="851.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="430.7" y="862.0"></text>
</g>
<g>
<title>tcp_current_mss (11 samples, 0.02%)</title><rect x="427.7" y="835.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="430.7" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/PacketEncoder.onWrite (35 samples, 0.08%)</title><rect x="429.4" y="1107.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="432.4" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.get (24 samples, 0.05%)</title><rect x="429.4" y="1091.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="432.4" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.get (24 samples, 0.05%)</title><rect x="429.4" y="1075.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="432.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (17 samples, 0.04%)</title><rect x="429.6" y="1059.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="432.6" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/PacketIOHelper.writeTo (11 samples, 0.02%)</title><rect x="430.1" y="1091.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="433.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (16 samples, 0.03%)</title><rect x="430.5" y="1139.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="433.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.casItem (12 samples, 0.03%)</title><rect x="430.6" y="1123.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="433.6" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (6,256 samples, 13.47%)</title><rect x="431.2" y="1155.0" width="159.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="434.2" y="1166.0">sun/nio/ch/SelectorI..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (6,245 samples, 13.45%)</title><rect x="431.5" y="1139.0" width="158.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="434.5" y="1150.0">sun/nio/ch/SelectorI..</text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (6,056 samples, 13.04%)</title><rect x="436.3" y="1123.0" width="153.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="439.3" y="1134.0">sun/nio/ch/EPollSel..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (72 samples, 0.16%)</title><rect x="437.8" y="1107.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="440.8" y="1118.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (69 samples, 0.15%)</title><rect x="437.8" y="1091.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="440.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (21 samples, 0.05%)</title><rect x="438.9" y="1075.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="441.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (21 samples, 0.05%)</title><rect x="438.9" y="1059.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="441.9" y="1070.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (82 samples, 0.18%)</title><rect x="439.6" y="1107.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="442.6" y="1118.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (82 samples, 0.18%)</title><rect x="439.6" y="1091.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="442.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (77 samples, 0.17%)</title><rect x="439.7" y="1075.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="442.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (77 samples, 0.17%)</title><rect x="439.7" y="1059.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="442.7" y="1070.0"></text>
</g>
<g>
<title>ret_from_intr (10 samples, 0.02%)</title><rect x="441.4" y="1043.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="444.4" y="1054.0"></text>
</g>
<g>
<title>do_IRQ (10 samples, 0.02%)</title><rect x="441.4" y="1027.0" width="0.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="444.4" y="1038.0"></text>
</g>
<g>
<title>irq_exit (10 samples, 0.02%)</title><rect x="441.4" y="1011.0" width="0.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="444.4" y="1022.0"></text>
</g>
<g>
<title>__softirqentry_text_start (10 samples, 0.02%)</title><rect x="441.4" y="995.0" width="0.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="444.4" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (5,063 samples, 10.91%)</title><rect x="441.9" y="1107.0" width="128.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="444.9" y="1118.0">sun/nio/ch/EPoll..</text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (3,793 samples, 8.17%)</title><rect x="442.4" y="1091.0" width="96.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="445.4" y="1102.0">sun/nio/ch/..</text>
</g>
<g>
<title>Java_sun_nio_ch_EPollArrayWrapper_epollWait (94 samples, 0.20%)</title><rect x="443.1" y="1075.0" width="2.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="446.1" y="1086.0"></text>
</g>
<g>
<title>gettimeofday (68 samples, 0.15%)</title><rect x="443.7" y="1059.0" width="1.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="446.7" y="1070.0"></text>
</g>
<g>
<title>[vdso] (57 samples, 0.12%)</title><rect x="444.0" y="1043.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="447.0" y="1054.0"></text>
</g>
<g>
<title>[unknown] (3,647 samples, 7.86%)</title><rect x="445.5" y="1075.0" width="92.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="448.5" y="1086.0">[unknown]</text>
</g>
<g>
<title>__GI_epoll_pwait (3,598 samples, 7.75%)</title><rect x="445.5" y="1059.0" width="91.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="448.5" y="1070.0">__GI_epoll_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3,327 samples, 7.17%)</title><rect x="451.6" y="1043.0" width="84.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="454.6" y="1054.0">entry_SYSC..</text>
</g>
<g>
<title>do_syscall_64 (3,327 samples, 7.17%)</title><rect x="451.6" y="1027.0" width="84.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="454.6" y="1038.0">do_syscall..</text>
</g>
<g>
<title>ret_from_intr (22 samples, 0.05%)</title><rect x="456.6" y="1011.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="459.6" y="1022.0"></text>
</g>
<g>
<title>do_IRQ (22 samples, 0.05%)</title><rect x="456.6" y="995.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="459.6" y="1006.0"></text>
</g>
<g>
<title>irq_exit (22 samples, 0.05%)</title><rect x="456.6" y="979.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="459.6" y="990.0"></text>
</g>
<g>
<title>__softirqentry_text_start (22 samples, 0.05%)</title><rect x="456.6" y="963.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="459.6" y="974.0"></text>
</g>
<g>
<title>net_rx_action (20 samples, 0.04%)</title><rect x="456.7" y="947.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="459.7" y="958.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (19 samples, 0.04%)</title><rect x="456.7" y="931.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="459.7" y="942.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (12 samples, 0.03%)</title><rect x="456.9" y="915.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="459.9" y="926.0"></text>
</g>
<g>
<title>sys_epoll_pwait (3,013 samples, 6.49%)</title><rect x="457.2" y="1011.0" width="76.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="460.2" y="1022.0">sys_epol..</text>
</g>
<g>
<title>__fget_light (61 samples, 0.13%)</title><rect x="458.0" y="995.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="461.0" y="1006.0"></text>
</g>
<g>
<title>__fget (40 samples, 0.09%)</title><rect x="458.5" y="979.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="461.5" y="990.0"></text>
</g>
<g>
<title>ep_poll (2,891 samples, 6.23%)</title><rect x="459.6" y="995.0" width="73.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="462.6" y="1006.0">ep_poll</text>
</g>
<g>
<title>__lock_text_start (190 samples, 0.41%)</title><rect x="460.1" y="979.0" width="4.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="463.1" y="990.0"></text>
</g>
<g>
<title>ret_from_intr (10 samples, 0.02%)</title><rect x="464.6" y="963.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="467.6" y="974.0"></text>
</g>
<g>
<title>do_IRQ (10 samples, 0.02%)</title><rect x="464.6" y="947.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="467.6" y="958.0"></text>
</g>
<g>
<title>irq_exit (10 samples, 0.02%)</title><rect x="464.6" y="931.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="467.6" y="942.0"></text>
</g>
<g>
<title>__softirqentry_text_start (10 samples, 0.02%)</title><rect x="464.6" y="915.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="467.6" y="926.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.16 (1,066 samples, 2.30%)</title><rect x="465.0" y="979.0" width="27.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="468.0" y="990.0">e..</text>
</g>
<g>
<title>__lock_text_start (78 samples, 0.17%)</title><rect x="465.9" y="963.0" width="2.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="468.9" y="974.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (10 samples, 0.02%)</title><rect x="467.9" y="963.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="470.9" y="974.0"></text>
</g>
<g>
<title>ep_send_events_proc (856 samples, 1.84%)</title><rect x="468.2" y="963.0" width="21.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="471.2" y="974.0">e..</text>
</g>
<g>
<title>__list_del_entry_valid (11 samples, 0.02%)</title><rect x="477.3" y="947.0" width="0.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="480.3" y="958.0"></text>
</g>
<g>
<title>pipe_poll (173 samples, 0.37%)</title><rect x="477.5" y="947.0" width="4.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="480.5" y="958.0"></text>
</g>
<g>
<title>ret_from_intr (13 samples, 0.03%)</title><rect x="481.9" y="947.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="484.9" y="958.0"></text>
</g>
<g>
<title>do_IRQ (13 samples, 0.03%)</title><rect x="481.9" y="931.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="484.9" y="942.0"></text>
</g>
<g>
<title>irq_exit (13 samples, 0.03%)</title><rect x="481.9" y="915.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="484.9" y="926.0"></text>
</g>
<g>
<title>__softirqentry_text_start (13 samples, 0.03%)</title><rect x="481.9" y="899.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="484.9" y="910.0"></text>
</g>
<g>
<title>sock_poll (301 samples, 0.65%)</title><rect x="482.3" y="947.0" width="7.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="485.3" y="958.0"></text>
</g>
<g>
<title>tcp_poll (165 samples, 0.36%)</title><rect x="485.7" y="931.0" width="4.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="488.7" y="942.0"></text>
</g>
<g>
<title>ret_from_intr (11 samples, 0.02%)</title><rect x="488.1" y="915.0" width="0.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="491.1" y="926.0"></text>
</g>
<g>
<title>do_IRQ (11 samples, 0.02%)</title><rect x="488.1" y="899.0" width="0.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="491.1" y="910.0"></text>
</g>
<g>
<title>irq_exit (11 samples, 0.02%)</title><rect x="488.1" y="883.0" width="0.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="491.1" y="894.0"></text>
</g>
<g>
<title>__softirqentry_text_start (11 samples, 0.02%)</title><rect x="488.1" y="867.0" width="0.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="491.1" y="878.0"></text>
</g>
<g>
<title>tcp_stream_memory_free	[ipv6] (62 samples, 0.13%)</title><rect x="488.3" y="915.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="491.3" y="926.0"></text>
</g>
<g>
<title>mutex_lock (76 samples, 0.16%)</title><rect x="489.9" y="963.0" width="1.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="492.9" y="974.0"></text>
</g>
<g>
<title>ktime_get_ts64 (84 samples, 0.18%)</title><rect x="492.1" y="979.0" width="2.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="495.1" y="990.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (74 samples, 0.16%)</title><rect x="492.3" y="963.0" width="1.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="495.3" y="974.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (67 samples, 0.14%)</title><rect x="492.5" y="947.0" width="1.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="495.5" y="958.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (1,430 samples, 3.08%)</title><rect x="494.3" y="979.0" width="36.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="497.3" y="990.0">sch..</text>
</g>
<g>
<title>__hrtimer_init (24 samples, 0.05%)</title><rect x="494.7" y="963.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="497.7" y="974.0"></text>
</g>
<g>
<title>hrtimer_start_range_ns (96 samples, 0.21%)</title><rect x="495.3" y="963.0" width="2.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="498.3" y="974.0"></text>
</g>
<g>
<title>__lock_text_start (79 samples, 0.17%)</title><rect x="495.5" y="947.0" width="2.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="498.5" y="958.0"></text>
</g>
<g>
<title>hrtimer_try_to_cancel (68 samples, 0.15%)</title><rect x="497.8" y="963.0" width="1.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="500.8" y="974.0"></text>
</g>
<g>
<title>__lock_text_start (58 samples, 0.12%)</title><rect x="497.9" y="947.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="500.9" y="958.0"></text>
</g>
<g>
<title>schedule (1,225 samples, 2.64%)</title><rect x="499.5" y="963.0" width="31.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="502.5" y="974.0">sc..</text>
</g>
<g>
<title>__sched_text_start (1,216 samples, 2.62%)</title><rect x="499.8" y="947.0" width="30.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="502.8" y="958.0">__..</text>
</g>
<g>
<title>finish_task_switch (1,191 samples, 2.57%)</title><rect x="500.4" y="931.0" width="30.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="503.4" y="942.0">fi..</text>
</g>
<g>
<title>ret_from_intr (76 samples, 0.16%)</title><rect x="528.7" y="915.0" width="2.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="531.7" y="926.0"></text>
</g>
<g>
<title>do_IRQ (76 samples, 0.16%)</title><rect x="528.7" y="899.0" width="2.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="531.7" y="910.0"></text>
</g>
<g>
<title>irq_exit (76 samples, 0.16%)</title><rect x="528.7" y="883.0" width="2.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="531.7" y="894.0"></text>
</g>
<g>
<title>__softirqentry_text_start (76 samples, 0.16%)</title><rect x="528.7" y="867.0" width="2.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="531.7" y="878.0"></text>
</g>
<g>
<title>net_rx_action (53 samples, 0.11%)</title><rect x="529.1" y="851.0" width="1.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="532.1" y="862.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (52 samples, 0.11%)</title><rect x="529.1" y="835.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="532.1" y="846.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (33 samples, 0.07%)</title><rect x="529.4" y="819.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="532.4" y="830.0"></text>
</g>
<g>
<title>napi_gro_frags (12 samples, 0.03%)</title><rect x="529.6" y="803.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="532.6" y="814.0"></text>
</g>
<g>
<title>dev_gro_receive (11 samples, 0.02%)</title><rect x="529.6" y="787.0" width="0.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="532.6" y="798.0"></text>
</g>
<g>
<title>napi_gro_receive (14 samples, 0.03%)</title><rect x="529.9" y="803.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="532.9" y="814.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (12 samples, 0.03%)</title><rect x="529.9" y="787.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="532.9" y="798.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (12 samples, 0.03%)</title><rect x="529.9" y="771.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="532.9" y="782.0"></text>
</g>
<g>
<title>ip_rcv (12 samples, 0.03%)</title><rect x="529.9" y="755.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="532.9" y="766.0"></text>
</g>
<g>
<title>ip_local_deliver (11 samples, 0.02%)</title><rect x="529.9" y="739.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="532.9" y="750.0"></text>
</g>
<g>
<title>tasklet_action (10 samples, 0.02%)</title><rect x="530.4" y="851.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="533.4" y="862.0"></text>
</g>
<g>
<title>tcp_tasklet_func (10 samples, 0.02%)</title><rect x="530.4" y="835.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="533.4" y="846.0"></text>
</g>
<g>
<title>select_estimate_accuracy (90 samples, 0.19%)</title><rect x="530.7" y="979.0" width="2.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="533.7" y="990.0"></text>
</g>
<g>
<title>ktime_get_ts64 (44 samples, 0.09%)</title><rect x="531.7" y="963.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="534.7" y="974.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (38 samples, 0.08%)</title><rect x="531.9" y="947.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="534.9" y="958.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (34 samples, 0.07%)</title><rect x="532.0" y="931.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="535.0" y="942.0"></text>
</g>
<g>
<title>fput (24 samples, 0.05%)</title><rect x="533.0" y="995.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="536.0" y="1006.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (75 samples, 0.16%)</title><rect x="533.8" y="1011.0" width="1.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="536.8" y="1022.0"></text>
</g>
<g>
<title>__audit_syscall_exit (39 samples, 0.08%)</title><rect x="534.7" y="995.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="537.7" y="1006.0"></text>
</g>
<g>
<title>syscall_trace_enter (18 samples, 0.04%)</title><rect x="535.7" y="1011.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="538.7" y="1022.0"></text>
</g>
<g>
<title>__audit_syscall_entry (12 samples, 0.03%)</title><rect x="535.8" y="995.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="538.8" y="1006.0"></text>
</g>
<g>
<title>ep_send_events_proc (16 samples, 0.03%)</title><rect x="536.1" y="1043.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="539.1" y="1054.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (16 samples, 0.03%)</title><rect x="536.1" y="1027.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="539.1" y="1038.0"></text>
</g>
<g>
<title>ret_from_intr (14 samples, 0.03%)</title><rect x="536.5" y="1043.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="539.5" y="1054.0"></text>
</g>
<g>
<title>do_IRQ (14 samples, 0.03%)</title><rect x="536.5" y="1027.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="539.5" y="1038.0"></text>
</g>
<g>
<title>irq_exit (14 samples, 0.03%)</title><rect x="536.5" y="1011.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="539.5" y="1022.0"></text>
</g>
<g>
<title>__softirqentry_text_start (14 samples, 0.03%)</title><rect x="536.5" y="995.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="539.5" y="1006.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (28 samples, 0.06%)</title><rect x="536.9" y="1059.0" width="0.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="539.9" y="1070.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (20 samples, 0.04%)</title><rect x="537.6" y="1059.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="540.6" y="1070.0"></text>
</g>
<g>
<title>gettimeofday (13 samples, 0.03%)</title><rect x="538.5" y="1075.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="541.5" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.getDescriptor (52 samples, 0.11%)</title><rect x="538.8" y="1091.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="541.8" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeObject.getInt (30 samples, 0.06%)</title><rect x="539.4" y="1075.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="542.4" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.updateRegistrations (1,198 samples, 2.58%)</title><rect x="540.2" y="1091.0" width="30.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="543.2" y="1102.0">su..</text>
</g>
<g>
<title>java/util/BitSet.clear (11 samples, 0.02%)</title><rect x="542.2" y="1075.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="545.2" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollCtl (1,090 samples, 2.35%)</title><rect x="542.9" y="1075.0" width="27.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="545.9" y="1086.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_EPollArrayWrapper_epollCtl (11 samples, 0.02%)</title><rect x="543.3" y="1059.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="546.3" y="1070.0"></text>
</g>
<g>
<title>epoll_ctl (1,060 samples, 2.28%)</title><rect x="543.7" y="1059.0" width="26.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="546.7" y="1070.0">e..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (916 samples, 1.97%)</title><rect x="547.2" y="1043.0" width="23.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="550.2" y="1054.0">e..</text>
</g>
<g>
<title>do_syscall_64 (916 samples, 1.97%)</title><rect x="547.2" y="1027.0" width="23.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="550.2" y="1038.0">d..</text>
</g>
<g>
<title>sys_epoll_ctl (684 samples, 1.47%)</title><rect x="552.0" y="1011.0" width="17.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="555.0" y="1022.0"></text>
</g>
<g>
<title>__fget_light (92 samples, 0.20%)</title><rect x="554.8" y="995.0" width="2.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="557.8" y="1006.0"></text>
</g>
<g>
<title>__fget (80 samples, 0.17%)</title><rect x="555.1" y="979.0" width="2.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="558.1" y="990.0"></text>
</g>
<g>
<title>__lock_text_start (29 samples, 0.06%)</title><rect x="557.3" y="995.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="560.3" y="1006.0"></text>
</g>
<g>
<title>_copy_from_user (21 samples, 0.05%)</title><rect x="558.0" y="995.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="561.0" y="1006.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (11 samples, 0.02%)</title><rect x="558.3" y="979.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="561.3" y="990.0"></text>
</g>
<g>
<title>ep_remove (151 samples, 0.33%)</title><rect x="558.6" y="995.0" width="3.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="561.6" y="1006.0"></text>
</g>
<g>
<title>__call_rcu.constprop.68 (32 samples, 0.07%)</title><rect x="559.9" y="979.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="562.9" y="990.0"></text>
</g>
<g>
<title>__lock_text_start (12 samples, 0.03%)</title><rect x="560.7" y="979.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="563.7" y="990.0"></text>
</g>
<g>
<title>ep_unregister_pollwait.isra.9 (41 samples, 0.09%)</title><rect x="561.2" y="979.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="564.2" y="990.0"></text>
</g>
<g>
<title>__lock_text_start (18 samples, 0.04%)</title><rect x="561.5" y="963.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="564.5" y="974.0"></text>
</g>
<g>
<title>kmem_cache_free (10 samples, 0.02%)</title><rect x="562.0" y="963.0" width="0.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="565.0" y="974.0"></text>
</g>
<g>
<title>fput (13 samples, 0.03%)</title><rect x="562.5" y="995.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="565.5" y="1006.0"></text>
</g>
<g>
<title>kmem_cache_alloc (23 samples, 0.05%)</title><rect x="562.8" y="995.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="565.8" y="1006.0"></text>
</g>
<g>
<title>__slab_alloc (12 samples, 0.03%)</title><rect x="563.0" y="979.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="566.0" y="990.0"></text>
</g>
<g>
<title>mutex_unlock (16 samples, 0.03%)</title><rect x="563.6" y="995.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="566.6" y="1006.0"></text>
</g>
<g>
<title>sock_poll (205 samples, 0.44%)</title><rect x="564.2" y="995.0" width="5.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="567.2" y="1006.0"></text>
</g>
<g>
<title>tcp_poll (171 samples, 0.37%)</title><rect x="565.1" y="979.0" width="4.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="568.1" y="990.0"></text>
</g>
<g>
<title>ep_ptable_queue_proc (54 samples, 0.12%)</title><rect x="567.3" y="963.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="570.3" y="974.0"></text>
</g>
<g>
<title>__lock_text_start (36 samples, 0.08%)</title><rect x="567.5" y="947.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="570.5" y="958.0"></text>
</g>
<g>
<title>tcp_stream_memory_free	[ipv6] (24 samples, 0.05%)</title><rect x="568.8" y="963.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="571.8" y="974.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (21 samples, 0.05%)</title><rect x="569.4" y="1011.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="572.4" y="1022.0"></text>
</g>
<g>
<title>__audit_syscall_exit (21 samples, 0.05%)</title><rect x="569.4" y="995.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="572.4" y="1006.0"></text>
</g>
<g>
<title>syscall_trace_enter (23 samples, 0.05%)</title><rect x="569.9" y="1011.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="572.9" y="1022.0"></text>
</g>
<g>
<title>__audit_syscall_entry (13 samples, 0.03%)</title><rect x="570.2" y="995.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="573.2" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (120 samples, 0.26%)</title><rect x="570.6" y="1107.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="573.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (14 samples, 0.03%)</title><rect x="572.2" y="1091.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="575.2" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (21 samples, 0.05%)</title><rect x="572.5" y="1091.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="575.5" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (20 samples, 0.04%)</title><rect x="572.5" y="1075.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="575.5" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (20 samples, 0.04%)</title><rect x="573.1" y="1091.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="576.1" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateReadyOps (20 samples, 0.04%)</title><rect x="573.1" y="1075.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="576.1" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (556 samples, 1.20%)</title><rect x="573.7" y="1107.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="576.7" y="1118.0"></text>
</g>
<g>
<title>read (530 samples, 1.14%)</title><rect x="574.3" y="1091.0" width="13.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="577.3" y="1102.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (446 samples, 0.96%)</title><rect x="576.4" y="1075.0" width="11.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="579.4" y="1086.0"></text>
</g>
<g>
<title>do_syscall_64 (446 samples, 0.96%)</title><rect x="576.4" y="1059.0" width="11.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="579.4" y="1070.0"></text>
</g>
<g>
<title>sys_read (357 samples, 0.77%)</title><rect x="578.0" y="1043.0" width="9.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="581.0" y="1054.0"></text>
</g>
<g>
<title>__fdget_pos (30 samples, 0.06%)</title><rect x="578.4" y="1027.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="581.4" y="1038.0"></text>
</g>
<g>
<title>__fget_light (28 samples, 0.06%)</title><rect x="578.4" y="1011.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="581.4" y="1022.0"></text>
</g>
<g>
<title>__fget (19 samples, 0.04%)</title><rect x="578.6" y="995.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="581.6" y="1006.0"></text>
</g>
<g>
<title>vfs_read (310 samples, 0.67%)</title><rect x="579.2" y="1027.0" width="7.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="582.2" y="1038.0"></text>
</g>
<g>
<title>__vfs_read (280 samples, 0.60%)</title><rect x="579.7" y="1011.0" width="7.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="582.7" y="1022.0"></text>
</g>
<g>
<title>pipe_read (265 samples, 0.57%)</title><rect x="580.1" y="995.0" width="6.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="583.1" y="1006.0"></text>
</g>
<g>
<title>__wake_up_common_lock (52 samples, 0.11%)</title><rect x="581.7" y="979.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="584.7" y="990.0"></text>
</g>
<g>
<title>__lock_text_start (42 samples, 0.09%)</title><rect x="581.9" y="963.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="584.9" y="974.0"></text>
</g>
<g>
<title>anon_pipe_buf_release (17 samples, 0.04%)</title><rect x="583.0" y="979.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="586.0" y="990.0"></text>
</g>
<g>
<title>copy_page_to_iter (50 samples, 0.11%)</title><rect x="583.4" y="979.0" width="1.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="586.4" y="990.0"></text>
</g>
<g>
<title>copyout (41 samples, 0.09%)</title><rect x="583.6" y="963.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="586.6" y="974.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (37 samples, 0.08%)</title><rect x="583.7" y="947.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="586.7" y="958.0"></text>
</g>
<g>
<title>mutex_lock (38 samples, 0.08%)</title><rect x="584.8" y="979.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="587.8" y="990.0"></text>
</g>
<g>
<title>mutex_unlock (17 samples, 0.04%)</title><rect x="585.8" y="979.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="588.8" y="990.0"></text>
</g>
<g>
<title>touch_atime (23 samples, 0.05%)</title><rect x="586.2" y="979.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="589.2" y="990.0"></text>
</g>
<g>
<title>__atime_needs_update (18 samples, 0.04%)</title><rect x="586.3" y="963.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="589.3" y="974.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (13 samples, 0.03%)</title><rect x="587.1" y="1043.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="590.1" y="1054.0"></text>
</g>
<g>
<title>__audit_syscall_exit (12 samples, 0.03%)</title><rect x="587.1" y="1027.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="590.1" y="1038.0"></text>
</g>
<g>
<title>syscall_trace_enter (10 samples, 0.02%)</title><rect x="587.4" y="1043.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="590.4" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (94 samples, 0.20%)</title><rect x="587.8" y="1107.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="590.8" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/executor/HazelcastManagedThread.run (453 samples, 0.98%)</title><rect x="590.3" y="1187.0" width="11.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="593.3" y="1198.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/executor/HazelcastManagedThread.executeRun (453 samples, 0.98%)</title><rect x="590.3" y="1171.0" width="11.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="593.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/Thread.run (453 samples, 0.98%)</title><rect x="590.3" y="1155.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="593.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (453 samples, 0.98%)</title><rect x="590.3" y="1139.0" width="11.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="593.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (453 samples, 0.98%)</title><rect x="590.3" y="1123.0" width="11.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="593.3" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/executor/CachedExecutorServiceDelegate$Worker.run (437 samples, 0.94%)</title><rect x="590.4" y="1107.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="593.4" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/executionservice/impl/DelegateAndSkipOnConcurrentExecutionDecorator$DelegateDecorator.run (433 samples, 0.93%)</title><rect x="590.4" y="1091.0" width="11.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="593.4" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsService$$Lambda$972/720770771.run (423 samples, 0.91%)</title><rect x="590.6" y="1075.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="593.6" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsService.collectMetrics (423 samples, 0.91%)</title><rect x="590.6" y="1059.0" width="10.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="593.6" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsService.collectMetrics (421 samples, 0.91%)</title><rect x="590.6" y="1043.0" width="10.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="593.6" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsRegistryImpl.collect (421 samples, 0.91%)</title><rect x="590.6" y="1027.0" width="10.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="593.6" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsCollectionCycle.collectDynamicMetrics (406 samples, 0.87%)</title><rect x="590.6" y="1011.0" width="10.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="593.6" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEndpointManagerImpl.provideDynamicMetrics (11 samples, 0.02%)</title><rect x="590.6" y="995.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="593.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.forEach (11 samples, 0.02%)</title><rect x="590.6" y="979.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="593.6" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEndpointManagerImpl$$Lambda$995/1190268377.accept (11 samples, 0.02%)</title><rect x="590.6" y="963.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="593.6" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEndpointManagerImpl.lambda$provideDynamicMetrics$0 (10 samples, 0.02%)</title><rect x="590.6" y="947.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="593.6" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEndpointImpl.provideDynamicMetrics (10 samples, 0.02%)</title><rect x="590.6" y="931.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="593.6" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsCompressor.extractMetrics (10 samples, 0.02%)</title><rect x="590.6" y="915.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="593.6" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsCompressor.extractMetrics (10 samples, 0.02%)</title><rect x="590.6" y="899.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="593.6" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapService.provideDynamicMetrics (388 samples, 0.84%)</title><rect x="590.9" y="995.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="593.9" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapService.getStats (387 samples, 0.83%)</title><rect x="591.0" y="979.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="594.0" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapStatisticsAwareService.getStats (387 samples, 0.83%)</title><rect x="591.0" y="963.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="594.0" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/LocalMapStatsProvider.createAllLocalMapStats (386 samples, 0.83%)</title><rect x="591.0" y="947.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="594.0" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/InternalPartitionImpl.isLocal (28 samples, 0.06%)</title><rect x="591.6" y="931.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="594.6" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/PartitionReplica.equals (25 samples, 0.05%)</title><rect x="591.6" y="915.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="594.6" y="926.0"></text>
</g>
<g>
<title>java/util/UUID.equals (10 samples, 0.02%)</title><rect x="592.0" y="899.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="595.0" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/InternalPartitionServiceImpl.getPartition (81 samples, 0.17%)</title><rect x="592.3" y="931.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="595.3" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/InternalPartitionServiceImpl.getPartition (77 samples, 0.17%)</title><rect x="592.4" y="915.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="595.4" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionStateManager.getPartitionImpl (74 samples, 0.16%)</title><rect x="592.4" y="899.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="595.4" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/LocalMapStatsProvider.addIndexStats (18 samples, 0.04%)</title><rect x="594.5" y="931.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="597.5" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/LocalMapStatsProvider.addPrimaryStatsOf (22 samples, 0.05%)</title><rect x="595.0" y="931.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="598.0" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/LocalMapStatsProvider.getOrCreateOnDemandStats (40 samples, 0.09%)</title><rect x="595.6" y="931.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="598.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (35 samples, 0.08%)</title><rect x="595.7" y="915.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="598.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (27 samples, 0.06%)</title><rect x="595.9" y="899.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="598.9" y="910.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (27 samples, 0.06%)</title><rect x="595.9" y="883.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="598.9" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.getAllRecordStores (39 samples, 0.08%)</title><rect x="596.6" y="931.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="599.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.values (36 samples, 0.08%)</title><rect x="596.7" y="915.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="599.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.&lt;init&gt; (15 samples, 0.03%)</title><rect x="597.2" y="899.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="600.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$CollectionView.&lt;init&gt; (14 samples, 0.03%)</title><rect x="597.2" y="883.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="600.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.next (49 samples, 0.11%)</title><rect x="597.6" y="931.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="600.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (46 samples, 0.10%)</title><rect x="597.6" y="915.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="600.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (78 samples, 0.17%)</title><rect x="598.8" y="931.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="601.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.&lt;init&gt; (77 samples, 0.17%)</title><rect x="598.8" y="915.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="601.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (77 samples, 0.17%)</title><rect x="598.8" y="899.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="601.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (76 samples, 0.16%)</title><rect x="598.9" y="883.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="601.9" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsCollectionCycle.collectStaticMetrics (15 samples, 0.03%)</title><rect x="600.9" y="1011.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="603.9" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsCollectionCycle.collectLong (11 samples, 0.02%)</title><rect x="601.0" y="995.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="604.0" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/simulator/common/ShutdownThread.run (14 samples, 0.03%)</title><rect x="601.8" y="1187.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="604.8" y="1198.0"></text>
</g>
<g>
<title>com/hazelcast/simulator/worker/Worker$WorkerShutdownThread.doRun (13 samples, 0.03%)</title><rect x="601.8" y="1171.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="604.8" y="1182.0"></text>
</g>
<g>
<title>com/hazelcast/simulator/utils/CommonUtils.closeQuietly (13 samples, 0.03%)</title><rect x="601.8" y="1155.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="604.8" y="1166.0"></text>
</g>
<g>
<title>com/hazelcast/simulator/hazelcast4/Hazelcast4Driver.close (13 samples, 0.03%)</title><rect x="601.8" y="1139.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="604.8" y="1150.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/HazelcastInstanceProxy.shutdown (13 samples, 0.03%)</title><rect x="601.8" y="1123.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="604.8" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/LifecycleServiceImpl.shutdown (13 samples, 0.03%)</title><rect x="601.8" y="1107.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="604.8" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/LifecycleServiceImpl.shutdown (13 samples, 0.03%)</title><rect x="601.8" y="1091.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="604.8" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/simulator/worker/Worker.main (156 samples, 0.34%)</title><rect x="602.4" y="1187.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="605.4" y="1198.0"></text>
</g>
<g>
<title>com/hazelcast/simulator/worker/Worker.start (150 samples, 0.32%)</title><rect x="602.6" y="1171.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="605.6" y="1182.0"></text>
</g>
<g>
<title>com/hazelcast/simulator/hazelcast4/Hazelcast4Driver.startVendorInstance (140 samples, 0.30%)</title><rect x="602.6" y="1155.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="605.6" y="1166.0"></text>
</g>
<g>
<title>com/hazelcast/config/XmlConfigBuilder.build (20 samples, 0.04%)</title><rect x="602.6" y="1139.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="605.6" y="1150.0"></text>
</g>
<g>
<title>com/hazelcast/config/XmlConfigBuilder.build (17 samples, 0.04%)</title><rect x="602.7" y="1123.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="605.7" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/config/XmlConfigBuilder.parseAndBuildConfig (17 samples, 0.04%)</title><rect x="602.7" y="1107.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="605.7" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/config/AbstractXmlConfigHelper.schemaValidation (12 samples, 0.03%)</title><rect x="602.8" y="1091.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="605.8" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/core/Hazelcast.newHazelcastInstance (116 samples, 0.25%)</title><rect x="603.1" y="1139.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="606.1" y="1150.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/HazelcastInstanceFactory.newHazelcastInstance (115 samples, 0.25%)</title><rect x="603.1" y="1123.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="606.1" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/HazelcastInstanceFactory.newHazelcastInstance (115 samples, 0.25%)</title><rect x="603.1" y="1107.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="606.1" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/HazelcastInstanceFactory.constructHazelcastInstance (115 samples, 0.25%)</title><rect x="603.1" y="1091.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="606.1" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/HazelcastInstanceFactory.awaitMinimalClusterSize (21 samples, 0.05%)</title><rect x="603.1" y="1075.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="606.1" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/InternalPartitionServiceImpl.firstArrangement (21 samples, 0.05%)</title><rect x="603.1" y="1059.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="606.1" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionStateManager.initializePartitionAssignments (16 samples, 0.03%)</title><rect x="603.3" y="1043.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="606.3" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionStateGeneratorImpl.arrange (12 samples, 0.03%)</title><rect x="603.3" y="1027.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="606.3" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionStateGeneratorImpl.arrange (12 samples, 0.03%)</title><rect x="603.3" y="1011.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="606.3" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionStateGeneratorImpl.tryArrange (11 samples, 0.02%)</title><rect x="603.3" y="995.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="606.3" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/HazelcastInstanceImpl.&lt;init&gt; (92 samples, 0.20%)</title><rect x="603.7" y="1075.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="606.7" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/HazelcastInstanceImpl.createNode (52 samples, 0.11%)</title><rect x="603.7" y="1059.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="606.7" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/Node.&lt;init&gt; (52 samples, 0.11%)</title><rect x="603.7" y="1043.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="606.7" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/EnterpriseNodeExtension.createSerializationService (15 samples, 0.03%)</title><rect x="604.1" y="1027.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="607.1" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceBuilder.build (14 samples, 0.03%)</title><rect x="604.1" y="1011.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="607.1" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceBuilder.build (14 samples, 0.03%)</title><rect x="604.1" y="995.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="607.1" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/DefaultSerializationServiceBuilder.build (14 samples, 0.03%)</title><rect x="604.1" y="979.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="607.1" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceBuilder.createSerializationService (13 samples, 0.03%)</title><rect x="604.1" y="963.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="607.1" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceBuilder.createSerializationService (13 samples, 0.03%)</title><rect x="604.1" y="947.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="607.1" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1$Builder.build (13 samples, 0.03%)</title><rect x="604.1" y="931.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="607.1" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.&lt;init&gt; (13 samples, 0.03%)</title><rect x="604.1" y="915.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="607.1" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/SerializationServiceV1.&lt;init&gt; (13 samples, 0.03%)</title><rect x="604.1" y="899.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="607.1" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/DataSerializableSerializer.&lt;init&gt; (11 samples, 0.02%)</title><rect x="604.1" y="883.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="607.1" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/Node.start (40 samples, 0.09%)</title><rect x="605.0" y="1059.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="608.0" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.start (34 samples, 0.07%)</title><rect x="605.1" y="1043.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="608.1" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.start (28 samples, 0.06%)</title><rect x="605.3" y="1027.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="608.3" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.initServices (10 samples, 0.02%)</title><rect x="605.3" y="1011.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="608.3" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.initService (10 samples, 0.02%)</title><rect x="605.3" y="995.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="608.3" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.registerServices (18 samples, 0.04%)</title><rect x="605.6" y="1011.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="608.6" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.registerDefaultServices (18 samples, 0.04%)</title><rect x="605.6" y="995.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="608.6" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationThread.run (20,427 samples, 44.00%)</title><rect x="606.4" y="1187.0" width="519.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="609.4" y="1198.0">com/hazelcast/spi/impl/operationexecutor/impl/OperationThread.run</text>
</g>
<g>
<title>com/hazelcast/instance/impl/EnterpriseNodeExtension.onThreadStop (124 samples, 0.27%)</title><rect x="607.4" y="1171.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="610.4" y="1182.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/EnterpriseNodeExtension.deregisterThreadFromPoolingMemoryManager (124 samples, 0.27%)</title><rect x="607.4" y="1155.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="610.4" y="1166.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.deregisterThread (124 samples, 0.27%)</title><rect x="607.4" y="1139.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="610.4" y="1150.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.destroyPool (124 samples, 0.27%)</title><rect x="607.4" y="1123.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="610.4" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.dispose (124 samples, 0.27%)</title><rect x="607.4" y="1107.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="610.4" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.disposePageAllocations (124 samples, 0.27%)</title><rect x="607.4" y="1091.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="610.4" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.freePage (124 samples, 0.27%)</title><rect x="607.4" y="1075.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="610.4" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/StandardMemoryManager.free (124 samples, 0.27%)</title><rect x="607.4" y="1059.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="610.4" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/UnsafeMalloc.free (124 samples, 0.27%)</title><rect x="607.4" y="1043.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="610.4" y="1054.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.freeMemory (124 samples, 0.27%)</title><rect x="607.4" y="1027.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="610.4" y="1038.0"></text>
</g>
<g>
<title>__munmap (124 samples, 0.27%)</title><rect x="607.4" y="1011.0" width="3.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="610.4" y="1022.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (124 samples, 0.27%)</title><rect x="607.4" y="995.0" width="3.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="610.4" y="1006.0"></text>
</g>
<g>
<title>do_syscall_64 (124 samples, 0.27%)</title><rect x="607.4" y="979.0" width="3.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="610.4" y="990.0"></text>
</g>
<g>
<title>sys_munmap (123 samples, 0.26%)</title><rect x="607.5" y="963.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="610.5" y="974.0"></text>
</g>
<g>
<title>vm_munmap (123 samples, 0.26%)</title><rect x="607.5" y="947.0" width="3.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="610.5" y="958.0"></text>
</g>
<g>
<title>do_munmap (35 samples, 0.08%)</title><rect x="607.5" y="931.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="610.5" y="942.0"></text>
</g>
<g>
<title>unmap_region (34 samples, 0.07%)</title><rect x="607.5" y="915.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="610.5" y="926.0"></text>
</g>
<g>
<title>tlb_finish_mmu (21 samples, 0.05%)</title><rect x="607.5" y="899.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="610.5" y="910.0"></text>
</g>
<g>
<title>arch_tlb_finish_mmu (21 samples, 0.05%)</title><rect x="607.5" y="883.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="610.5" y="894.0"></text>
</g>
<g>
<title>tlb_flush_mmu_free (21 samples, 0.05%)</title><rect x="607.5" y="867.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="610.5" y="878.0"></text>
</g>
<g>
<title>release_pages (21 samples, 0.05%)</title><rect x="607.5" y="851.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="610.5" y="862.0"></text>
</g>
<g>
<title>free_hot_cold_page_list (11 samples, 0.02%)</title><rect x="607.7" y="835.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="610.7" y="846.0"></text>
</g>
<g>
<title>free_hot_cold_page (10 samples, 0.02%)</title><rect x="607.7" y="819.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="610.7" y="830.0"></text>
</g>
<g>
<title>unmap_vmas (12 samples, 0.03%)</title><rect x="608.0" y="899.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="611.0" y="910.0"></text>
</g>
<g>
<title>unmap_page_range (12 samples, 0.03%)</title><rect x="608.0" y="883.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="611.0" y="894.0"></text>
</g>
<g>
<title>down_write_killable (88 samples, 0.19%)</title><rect x="608.3" y="931.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="611.3" y="942.0"></text>
</g>
<g>
<title>call_rwsem_down_write_failed_killable (88 samples, 0.19%)</title><rect x="608.3" y="915.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="611.3" y="926.0"></text>
</g>
<g>
<title>rwsem_down_write_failed_killable (88 samples, 0.19%)</title><rect x="608.3" y="899.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="611.3" y="910.0"></text>
</g>
<g>
<title>osq_lock (63 samples, 0.14%)</title><rect x="608.3" y="883.0" width="1.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="611.3" y="894.0"></text>
</g>
<g>
<title>rwsem_spin_on_owner (25 samples, 0.05%)</title><rect x="610.0" y="883.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="613.0" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationQueueImpl.take (3,759 samples, 8.10%)</title><rect x="610.6" y="1171.0" width="95.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="613.6" y="1182.0">com/hazelca..</text>
</g>
<g>
<title>com/hazelcast/internal/util/concurrent/MPSCQueue.take (3,748 samples, 8.07%)</title><rect x="610.7" y="1155.0" width="95.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="613.7" y="1166.0">com/hazelca..</text>
</g>
<g>
<title>com/hazelcast/internal/util/concurrent/MPSCQueue.next (14 samples, 0.03%)</title><rect x="610.8" y="1139.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="613.8" y="1150.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/concurrent/MPSCQueue.peekNext (10 samples, 0.02%)</title><rect x="610.9" y="1123.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="613.9" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/concurrent/MPSCQueue.takeAll (3,733 samples, 8.04%)</title><rect x="611.1" y="1139.0" width="94.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="614.1" y="1150.0">com/hazelca..</text>
</g>
<g>
<title>com/hazelcast/internal/util/concurrent/MPSCQueue.copyIntoTakeStack (12 samples, 0.03%)</title><rect x="614.6" y="1123.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="617.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (23 samples, 0.05%)</title><rect x="614.9" y="1123.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="617.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.compareAndSet (34 samples, 0.07%)</title><rect x="615.5" y="1123.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="618.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3,523 samples, 7.59%)</title><rect x="616.3" y="1123.0" width="89.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="619.3" y="1134.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (3,523 samples, 7.59%)</title><rect x="616.3" y="1107.0" width="89.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="619.3" y="1118.0">sun/misc/U..</text>
</g>
<g>
<title>JavaThread::current_park_blocker() (10 samples, 0.02%)</title><rect x="617.0" y="1091.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="620.0" y="1102.0"></text>
</g>
<g>
<title>JfrBackend::time() (12 samples, 0.03%)</title><rect x="617.5" y="1091.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="620.5" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (12 samples, 0.03%)</title><rect x="617.8" y="1091.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="620.8" y="1102.0"></text>
</g>
<g>
<title>Unsafe_Park (759 samples, 1.63%)</title><rect x="618.1" y="1091.0" width="19.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="621.1" y="1102.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (17 samples, 0.04%)</title><rect x="619.1" y="1075.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="622.1" y="1086.0"></text>
</g>
<g>
<title>JavaThread::current_park_blocker() (11 samples, 0.02%)</title><rect x="619.6" y="1075.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="622.6" y="1086.0"></text>
</g>
<g>
<title>JfrBackend::time() (27 samples, 0.06%)</title><rect x="620.2" y="1075.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="623.2" y="1086.0"></text>
</g>
<g>
<title>os::ft_or_os_elapsed_counter() (27 samples, 0.06%)</title><rect x="620.2" y="1059.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="623.2" y="1070.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (175 samples, 0.38%)</title><rect x="620.9" y="1075.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="623.9" y="1086.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (70 samples, 0.15%)</title><rect x="622.2" y="1059.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="625.2" y="1070.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (26 samples, 0.06%)</title><rect x="622.6" y="1043.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="625.6" y="1054.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (21 samples, 0.05%)</title><rect x="622.8" y="1027.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="625.8" y="1038.0"></text>
</g>
<g>
<title>__GI___pthread_getspecific (20 samples, 0.04%)</title><rect x="623.4" y="1043.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="626.4" y="1054.0"></text>
</g>
<g>
<title>Monitor::unlock() (14 samples, 0.03%)</title><rect x="624.1" y="1059.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="627.1" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (27 samples, 0.06%)</title><rect x="624.5" y="1059.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="627.5" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (11 samples, 0.02%)</title><rect x="625.6" y="1075.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="628.6" y="1086.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (14 samples, 0.03%)</title><rect x="625.9" y="1075.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="628.9" y="1086.0"></text>
</g>
<g>
<title>__lll_unlock_wake (353 samples, 0.76%)</title><rect x="626.3" y="1075.0" width="9.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="629.3" y="1086.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (289 samples, 0.62%)</title><rect x="627.9" y="1059.0" width="7.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="630.9" y="1070.0"></text>
</g>
<g>
<title>do_syscall_64 (289 samples, 0.62%)</title><rect x="627.9" y="1043.0" width="7.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="630.9" y="1054.0"></text>
</g>
<g>
<title>sys_futex (120 samples, 0.26%)</title><rect x="631.2" y="1027.0" width="3.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="634.2" y="1038.0"></text>
</g>
<g>
<title>do_futex (106 samples, 0.23%)</title><rect x="631.5" y="1011.0" width="2.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="634.5" y="1022.0"></text>
</g>
<g>
<title>futex_wake (84 samples, 0.18%)</title><rect x="632.1" y="995.0" width="2.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="635.1" y="1006.0"></text>
</g>
<g>
<title>get_futex_key (50 samples, 0.11%)</title><rect x="632.6" y="979.0" width="1.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="635.6" y="990.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.10 (33 samples, 0.07%)</title><rect x="633.0" y="963.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="636.0" y="974.0"></text>
</g>
<g>
<title>hash_futex (13 samples, 0.03%)</title><rect x="633.9" y="979.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="636.9" y="990.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (15 samples, 0.03%)</title><rect x="634.2" y="1027.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="637.2" y="1038.0"></text>
</g>
<g>
<title>__audit_syscall_exit (15 samples, 0.03%)</title><rect x="634.2" y="1011.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="637.2" y="1022.0"></text>
</g>
<g>
<title>syscall_trace_enter (25 samples, 0.05%)</title><rect x="634.6" y="1027.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="637.6" y="1038.0"></text>
</g>
<g>
<title>__audit_syscall_entry (12 samples, 0.03%)</title><rect x="634.9" y="1011.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="637.9" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (26 samples, 0.06%)</title><rect x="635.4" y="1075.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="638.4" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::park_blocker(oopDesc*) (10 samples, 0.02%)</title><rect x="636.2" y="1075.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="639.2" y="1086.0"></text>
</g>
<g>
<title>os::ft_or_os_elapsed_counter() (11 samples, 0.02%)</title><rect x="636.5" y="1075.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="639.5" y="1086.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (21 samples, 0.05%)</title><rect x="636.8" y="1075.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="639.8" y="1086.0"></text>
</g>
<g>
<title>__condvar_confirm_wakeup (12 samples, 0.03%)</title><rect x="637.7" y="1091.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="640.7" y="1102.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (53 samples, 0.11%)</title><rect x="638.0" y="1091.0" width="1.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="641.0" y="1102.0"></text>
</g>
<g>
<title>__lll_lock_wait (33 samples, 0.07%)</title><rect x="639.3" y="1091.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="642.3" y="1102.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (19 samples, 0.04%)</title><rect x="639.7" y="1075.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="642.7" y="1086.0"></text>
</g>
<g>
<title>do_syscall_64 (19 samples, 0.04%)</title><rect x="639.7" y="1059.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="642.7" y="1070.0"></text>
</g>
<g>
<title>sys_futex (16 samples, 0.03%)</title><rect x="639.7" y="1043.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="642.7" y="1054.0"></text>
</g>
<g>
<title>do_futex (16 samples, 0.03%)</title><rect x="639.7" y="1027.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="642.7" y="1038.0"></text>
</g>
<g>
<title>futex_wait (16 samples, 0.03%)</title><rect x="639.7" y="1011.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="642.7" y="1022.0"></text>
</g>
<g>
<title>futex_wait_queue_me (13 samples, 0.03%)</title><rect x="639.7" y="995.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="642.7" y="1006.0"></text>
</g>
<g>
<title>schedule (12 samples, 0.03%)</title><rect x="639.8" y="979.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="642.8" y="990.0"></text>
</g>
<g>
<title>__sched_text_start (12 samples, 0.03%)</title><rect x="639.8" y="963.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="642.8" y="974.0"></text>
</g>
<g>
<title>finish_task_switch (12 samples, 0.03%)</title><rect x="639.8" y="947.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="642.8" y="958.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (46 samples, 0.10%)</title><rect x="640.2" y="1091.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="643.2" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (42 samples, 0.09%)</title><rect x="641.5" y="1091.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="644.5" y="1102.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (2,481 samples, 5.34%)</title><rect x="642.8" y="1091.0" width="63.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="645.8" y="1102.0">pthread..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2,020 samples, 4.35%)</title><rect x="654.5" y="1075.0" width="51.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="657.5" y="1086.0">entry..</text>
</g>
<g>
<title>do_syscall_64 (2,020 samples, 4.35%)</title><rect x="654.5" y="1059.0" width="51.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="657.5" y="1070.0">do_sy..</text>
</g>
<g>
<title>sys_futex (1,785 samples, 3.84%)</title><rect x="657.4" y="1043.0" width="45.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="660.4" y="1054.0">sys_..</text>
</g>
<g>
<title>do_futex (1,768 samples, 3.81%)</title><rect x="657.8" y="1027.0" width="44.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="660.8" y="1038.0">do_f..</text>
</g>
<g>
<title>futex_wait (1,749 samples, 3.77%)</title><rect x="658.2" y="1011.0" width="44.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="661.2" y="1022.0">fute..</text>
</g>
<g>
<title>futex_wait_queue_me (1,519 samples, 3.27%)</title><rect x="660.9" y="995.0" width="38.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="663.9" y="1006.0">fut..</text>
</g>
<g>
<title>schedule (1,438 samples, 3.10%)</title><rect x="662.9" y="979.0" width="36.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="665.9" y="990.0">sch..</text>
</g>
<g>
<title>__sched_text_start (1,430 samples, 3.08%)</title><rect x="663.1" y="963.0" width="36.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="666.1" y="974.0">__s..</text>
</g>
<g>
<title>finish_task_switch (1,382 samples, 2.98%)</title><rect x="664.3" y="947.0" width="35.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="667.3" y="958.0">fin..</text>
</g>
<g>
<title>ret_from_intr (52 samples, 0.11%)</title><rect x="698.1" y="931.0" width="1.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="701.1" y="942.0"></text>
</g>
<g>
<title>do_IRQ (52 samples, 0.11%)</title><rect x="698.1" y="915.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="701.1" y="926.0"></text>
</g>
<g>
<title>irq_exit (52 samples, 0.11%)</title><rect x="698.1" y="899.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="701.1" y="910.0"></text>
</g>
<g>
<title>__softirqentry_text_start (52 samples, 0.11%)</title><rect x="698.1" y="883.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="701.1" y="894.0"></text>
</g>
<g>
<title>net_rx_action (32 samples, 0.07%)</title><rect x="698.4" y="867.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="701.4" y="878.0"></text>
</g>
<g>
<title>ena_io_poll	[ena] (32 samples, 0.07%)</title><rect x="698.4" y="851.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="701.4" y="862.0"></text>
</g>
<g>
<title>ena_clean_rx_irq	[ena] (22 samples, 0.05%)</title><rect x="698.6" y="835.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="701.6" y="846.0"></text>
</g>
<g>
<title>napi_gro_receive (10 samples, 0.02%)</title><rect x="698.9" y="819.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="701.9" y="830.0"></text>
</g>
<g>
<title>netif_receive_skb_internal (10 samples, 0.02%)</title><rect x="698.9" y="803.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="701.9" y="814.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (10 samples, 0.02%)</title><rect x="698.9" y="787.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="701.9" y="798.0"></text>
</g>
<g>
<title>ip_rcv (10 samples, 0.02%)</title><rect x="698.9" y="771.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="701.9" y="782.0"></text>
</g>
<g>
<title>futex_wait_setup (125 samples, 0.27%)</title><rect x="699.5" y="995.0" width="3.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="702.5" y="1006.0"></text>
</g>
<g>
<title>get_futex_key (22 samples, 0.05%)</title><rect x="701.2" y="979.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="704.2" y="990.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.10 (10 samples, 0.02%)</title><rect x="701.5" y="963.0" width="0.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="704.5" y="974.0"></text>
</g>
<g>
<title>get_futex_value_locked (21 samples, 0.05%)</title><rect x="701.7" y="979.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="704.7" y="990.0"></text>
</g>
<g>
<title>hash_futex (13 samples, 0.03%)</title><rect x="702.3" y="979.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="705.3" y="990.0"></text>
</g>
<g>
<title>syscall_slow_exit_work (105 samples, 0.23%)</title><rect x="702.7" y="1043.0" width="2.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="705.7" y="1054.0"></text>
</g>
<g>
<title>__audit_syscall_exit (65 samples, 0.14%)</title><rect x="703.7" y="1027.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="706.7" y="1038.0"></text>
</g>
<g>
<title>syscall_trace_enter (16 samples, 0.03%)</title><rect x="705.4" y="1043.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="708.4" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationThread.process (16,502 samples, 35.54%)</title><rect x="706.1" y="1171.0" width="419.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="709.1" y="1182.0">com/hazelcast/spi/impl/operationexecutor/impl/OperationTh..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationThread.process (16,457 samples, 35.45%)</title><rect x="707.2" y="1155.0" width="418.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="710.2" y="1166.0">com/hazelcast/spi/impl/operationexecutor/impl/OperationTh..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractPartitionMessageTask.getPartitionId (60 samples, 0.13%)</title><rect x="708.0" y="1139.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="711.0" y="1150.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessage.getPartitionId (60 samples, 0.13%)</title><rect x="708.0" y="1123.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="711.0" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readIntL (30 samples, 0.06%)</title><rect x="708.7" y="1107.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="711.7" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readIntL (30 samples, 0.06%)</title><rect x="708.7" y="1091.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="711.7" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (29 samples, 0.06%)</title><rect x="708.8" y="1075.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="711.8" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (29 samples, 0.06%)</title><rect x="708.8" y="1059.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="711.8" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationThread.process (176 samples, 0.38%)</title><rect x="709.6" y="1139.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="712.6" y="1150.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionPrimaryReplicaAntiEntropyTask.run (176 samples, 0.38%)</title><rect x="709.6" y="1123.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="712.6" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/AbstractPartitionPrimaryReplicaAntiEntropyTask.invokePartitionBackupReplicaAntiEntropyOp (38 samples, 0.08%)</title><rect x="709.8" y="1107.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="712.8" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl.send (30 samples, 0.06%)</title><rect x="709.9" y="1091.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="712.9" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OutboundOperationHandler.send (30 samples, 0.06%)</title><rect x="709.9" y="1075.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="712.9" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OutboundOperationHandler.send (30 samples, 0.06%)</title><rect x="709.9" y="1059.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="712.9" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.toBytes (27 samples, 0.06%)</title><rect x="710.0" y="1043.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="713.0" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.toBytes (27 samples, 0.06%)</title><rect x="710.0" y="1027.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="713.0" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.toBytes (27 samples, 0.06%)</title><rect x="710.0" y="1011.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="713.0" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/StreamSerializerAdapter.write (14 samples, 0.03%)</title><rect x="710.2" y="995.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="713.2" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.write (14 samples, 0.03%)</title><rect x="710.2" y="979.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="713.2" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.write (14 samples, 0.03%)</title><rect x="710.2" y="963.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="713.2" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.writeData (13 samples, 0.03%)</title><rect x="710.2" y="947.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="713.2" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/operation/PartitionBackupReplicaAntiEntropyOperation.writeInternal (11 samples, 0.02%)</title><rect x="710.2" y="931.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="713.2" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeObject (10 samples, 0.02%)</title><rect x="710.3" y="915.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="713.3" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.writeObject (10 samples, 0.02%)</title><rect x="710.3" y="899.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="713.3" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/AbstractPartitionPrimaryReplicaAntiEntropyTask.retainAndGetNamespaces (115 samples, 0.25%)</title><rect x="710.8" y="1107.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="713.8" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapService.getAllServiceNamespaces (34 samples, 0.07%)</title><rect x="711.3" y="1091.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="714.3" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/CountingMigrationAwareService.getAllServiceNamespaces (34 samples, 0.07%)</title><rect x="711.3" y="1075.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="714.3" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapMigrationAwareService.getAllServiceNamespaces (34 samples, 0.07%)</title><rect x="711.3" y="1059.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="714.3" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.getAllNamespaces (34 samples, 0.07%)</title><rect x="711.3" y="1043.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="714.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.next (12 samples, 0.03%)</title><rect x="711.4" y="1027.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="714.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (12 samples, 0.03%)</title><rect x="711.4" y="1011.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="714.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (18 samples, 0.04%)</title><rect x="711.7" y="1027.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="714.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.&lt;init&gt; (18 samples, 0.04%)</title><rect x="711.7" y="1011.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="714.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (18 samples, 0.04%)</title><rect x="711.7" y="995.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="714.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (18 samples, 0.04%)</title><rect x="711.7" y="979.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="714.7" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.getServices (57 samples, 0.12%)</title><rect x="712.2" y="1091.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="715.2" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getServices (56 samples, 0.12%)</title><rect x="712.2" y="1075.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="715.2" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/ServiceInfo.isInstanceOf (21 samples, 0.05%)</title><rect x="712.8" y="1059.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="715.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/Class.isAssignableFrom (14 samples, 0.03%)</title><rect x="713.0" y="1043.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="716.0" y="1054.0"></text>
</g>
<g>
<title>java_lang_Class::as_Klass(oopDesc*) (11 samples, 0.02%)</title><rect x="713.0" y="1027.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="716.0" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/InternalPartitionImpl.isLocal (13 samples, 0.03%)</title><rect x="713.7" y="1107.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="716.7" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/PartitionReplica.equals (13 samples, 0.03%)</title><rect x="713.7" y="1091.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="716.7" y="1102.0"></text>
</g>
<g>
<title>java/util/UUID.equals (12 samples, 0.03%)</title><rect x="713.7" y="1075.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="716.7" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/TaskBatch.next (43 samples, 0.09%)</title><rect x="714.1" y="1139.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="717.1" y="1150.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/TaskBatch.nextPartitionId (37 samples, 0.08%)</title><rect x="714.3" y="1123.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="717.3" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.run (16,141 samples, 34.77%)</title><rect x="715.2" y="1139.0" width="410.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="718.2" y="1150.0">com/hazelcast/spi/impl/operationservice/impl/OperationRu..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.run (10,040 samples, 21.63%)</title><rect x="715.9" y="1123.0" width="255.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="718.9" y="1134.0">com/hazelcast/client/impl/protocol..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.initializeAndProcessMessage (10,024 samples, 21.59%)</title><rect x="716.0" y="1107.0" width="254.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="719.0" y="1118.0">com/hazelcast/client/impl/protocol..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask.processMessage (9,707 samples, 20.91%)</title><rect x="716.7" y="1091.0" width="246.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="719.7" y="1102.0">com/hazelcast/client/impl/protoco..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractPartitionMessageTask.processInternal (8,308 samples, 17.89%)</title><rect x="716.7" y="1075.0" width="211.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="719.7" y="1086.0">com/hazelcast/client/impl/pr..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessage.getCorrelationId (81 samples, 0.17%)</title><rect x="717.4" y="1059.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="720.4" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractPartitionMessageTask.getPartitionId (17 samples, 0.04%)</title><rect x="719.7" y="1059.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="722.7" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapGetMessageTask.prepareOperation (28 samples, 0.06%)</title><rect x="720.2" y="1059.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="723.2" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/AbstractMapPartitionMessageTask.getMapOperationProvider (23 samples, 0.05%)</title><rect x="720.2" y="1043.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="723.2" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.getService (21 samples, 0.05%)</title><rect x="720.3" y="1027.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="723.3" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.getService (20 samples, 0.04%)</title><rect x="720.3" y="1011.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="723.3" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getService (20 samples, 0.04%)</title><rect x="720.3" y="995.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="723.3" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getServiceInfo (20 samples, 0.04%)</title><rect x="720.3" y="979.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="723.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (15 samples, 0.03%)</title><rect x="720.4" y="963.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="723.4" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapPutMessageTask.prepareOperation (40 samples, 0.09%)</title><rect x="720.9" y="1059.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="723.9" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapPutMessageTask.newPutOperation (35 samples, 0.08%)</title><rect x="721.0" y="1043.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="724.0" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/AbstractMapPartitionMessageTask.getMapOperationProvider (31 samples, 0.07%)</title><rect x="721.0" y="1027.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="724.0" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.getService (23 samples, 0.05%)</title><rect x="721.2" y="1011.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="724.2" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.getService (23 samples, 0.05%)</title><rect x="721.2" y="995.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="724.2" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getService (23 samples, 0.05%)</title><rect x="721.2" y="979.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="724.2" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getServiceInfo (23 samples, 0.05%)</title><rect x="721.2" y="963.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="724.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (19 samples, 0.04%)</title><rect x="721.3" y="947.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="724.3" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapSetMessageTask.prepareOperation (13 samples, 0.03%)</title><rect x="721.9" y="1059.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="724.9" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/InvocationBuilderImpl.invoke (8,082 samples, 17.41%)</title><rect x="722.2" y="1059.0" width="205.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="725.2" y="1070.0">com/hazelcast/spi/impl/oper..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.setServiceName (12 samples, 0.03%)</title><rect x="722.3" y="1043.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="725.3" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.invoke (7,988 samples, 17.21%)</title><rect x="722.6" y="1043.0" width="203.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="725.6" y="1054.0">com/hazelcast/spi/impl/oper..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.invoke0 (7,988 samples, 17.21%)</title><rect x="722.6" y="1027.0" width="203.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="725.6" y="1038.0">com/hazelcast/spi/impl/oper..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.isInvocationAllowed (38 samples, 0.08%)</title><rect x="722.8" y="1011.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="725.8" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.doInvoke (7,935 samples, 17.09%)</title><rect x="723.9" y="1011.0" width="201.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="726.9" y="1022.0">com/hazelcast/spi/impl/ope..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.doInvokeLocal (7,454 samples, 16.06%)</title><rect x="725.1" y="995.0" width="189.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="728.1" y="1006.0">com/hazelcast/spi/impl/op..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.runOrExecute (7,452 samples, 16.05%)</title><rect x="725.2" y="979.0" width="189.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="728.2" y="990.0">com/hazelcast/spi/impl/op..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.run (7,450 samples, 16.05%)</title><rect x="725.2" y="963.0" width="189.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="728.2" y="974.0">com/hazelcast/spi/impl/op..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.run (7,446 samples, 16.04%)</title><rect x="725.3" y="947.0" width="189.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="728.3" y="958.0">com/hazelcast/spi/impl/op..</text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.beforeRun (804 samples, 1.73%)</title><rect x="725.7" y="931.0" width="20.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="728.7" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.getRecordStoreOrNull (763 samples, 1.64%)</title><rect x="726.4" y="915.0" width="19.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="729.4" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.getRecordStore (597 samples, 1.29%)</title><rect x="730.4" y="899.0" width="15.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="733.4" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutSynchronized (590 samples, 1.27%)</title><rect x="730.6" y="883.0" width="15.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="733.6" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer$$Lambda$976/762509150.createNew (66 samples, 0.14%)</title><rect x="731.9" y="867.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="734.9" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.lambda$new$0 (66 samples, 0.14%)</title><rect x="731.9" y="851.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="734.9" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.createRecordStore (66 samples, 0.14%)</title><rect x="731.9" y="835.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="734.9" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/EnterpriseMapServiceContextImpl.createRecordStore (23 samples, 0.05%)</title><rect x="731.9" y="819.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="734.9" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/EnterpriseRecordStore.&lt;init&gt; (19 samples, 0.04%)</title><rect x="732.0" y="803.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="735.0" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.&lt;init&gt; (17 samples, 0.04%)</title><rect x="732.0" y="787.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="735.0" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.&lt;init&gt; (15 samples, 0.03%)</title><rect x="732.0" y="771.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="735.0" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.&lt;init&gt; (12 samples, 0.03%)</title><rect x="732.1" y="755.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="735.1" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapContainer.createIndexes (11 samples, 0.02%)</title><rect x="732.5" y="819.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="735.5" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/EnterpriseRecordStore.init (26 samples, 0.06%)</title><rect x="732.9" y="819.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="735.9" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.init (26 samples, 0.06%)</title><rect x="732.9" y="803.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="735.9" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.init (26 samples, 0.06%)</title><rect x="732.9" y="787.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="735.9" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/EnterpriseRecordStore.addMutationObservers (13 samples, 0.03%)</title><rect x="732.9" y="771.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="735.9" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/EnterpriseRecordStore.createStorage (13 samples, 0.03%)</title><rect x="733.2" y="771.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="736.2" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.&lt;init&gt; (12 samples, 0.03%)</title><rect x="733.2" y="755.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="736.2" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageSCHM.&lt;init&gt; (11 samples, 0.02%)</title><rect x="733.2" y="739.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="736.2" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/SampleableElasticHashMap.&lt;init&gt; (11 samples, 0.02%)</title><rect x="733.2" y="723.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="736.2" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.&lt;init&gt; (11 samples, 0.02%)</title><rect x="733.2" y="707.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="736.2" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.allocateBuffer (10 samples, 0.02%)</title><rect x="733.2" y="691.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="736.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (471 samples, 1.01%)</title><rect x="733.6" y="867.0" width="11.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="736.6" y="878.0"></text>
</g>
<g>
<title>java/lang/String.equals (32 samples, 0.07%)</title><rect x="740.6" y="851.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="743.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (147 samples, 0.32%)</title><rect x="741.5" y="851.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="744.5" y="862.0"></text>
</g>
<g>
<title>ret_from_intr (11 samples, 0.02%)</title><rect x="745.2" y="851.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="748.2" y="862.0"></text>
</g>
<g>
<title>do_IRQ (11 samples, 0.02%)</title><rect x="745.2" y="835.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="748.2" y="846.0"></text>
</g>
<g>
<title>irq_exit (11 samples, 0.02%)</title><rect x="745.2" y="819.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="748.2" y="830.0"></text>
</g>
<g>
<title>__softirqentry_text_start (11 samples, 0.02%)</title><rect x="745.2" y="803.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="748.2" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.getService (13 samples, 0.03%)</title><rect x="745.7" y="915.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="748.7" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.getService (12 samples, 0.03%)</title><rect x="745.8" y="899.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="748.8" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getService (12 samples, 0.03%)</title><rect x="745.8" y="883.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="748.8" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getServiceInfo (11 samples, 0.02%)</title><rect x="745.8" y="867.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="748.8" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.call (6,433 samples, 13.86%)</title><rect x="746.1" y="931.0" width="163.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="749.1" y="942.0">com/hazelcast/spi/imp..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.call (3,308 samples, 7.13%)</title><rect x="746.4" y="915.0" width="84.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="749.4" y="926.0">com/hazelc..</text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/GetOperation.shouldWait (223 samples, 0.48%)</title><rect x="746.6" y="899.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="749.6" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.isTransactionallyLocked (223 samples, 0.48%)</title><rect x="746.6" y="883.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="749.6" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/locksupport/LockStoreProxy.shouldBlockReads (202 samples, 0.44%)</title><rect x="747.1" y="867.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="750.1" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/locksupport/LockStoreImpl.shouldBlockReads (28 samples, 0.06%)</title><rect x="747.2" y="851.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="750.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.02%)</title><rect x="747.6" y="835.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="750.6" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/locksupport/LockStoreProxy.getLockStoreOrNull (173 samples, 0.37%)</title><rect x="747.9" y="851.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="750.9" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/locksupport/LockStoreContainer.getLockStore (168 samples, 0.36%)</title><rect x="748.0" y="835.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="751.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (96 samples, 0.21%)</title><rect x="749.8" y="819.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="752.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (39 samples, 0.08%)</title><rect x="751.2" y="803.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="754.2" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/LockAwareOperation.shouldWait (234 samples, 0.50%)</title><rect x="752.3" y="899.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="755.3" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.canAcquireLock (233 samples, 0.50%)</title><rect x="752.3" y="883.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="755.3" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/locksupport/LockStoreProxy.canAcquireLock (206 samples, 0.44%)</title><rect x="753.0" y="867.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="756.0" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/locksupport/LockStoreImpl.canAcquireLock (37 samples, 0.08%)</title><rect x="753.0" y="851.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="756.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (22 samples, 0.05%)</title><rect x="753.4" y="835.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="756.4" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/locksupport/LockStoreProxy.getLockStoreOrNull (169 samples, 0.36%)</title><rect x="754.0" y="851.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="757.0" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/locksupport/LockStoreContainer.getLockStore (165 samples, 0.36%)</title><rect x="754.1" y="835.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="757.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (88 samples, 0.19%)</title><rect x="756.0" y="819.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="759.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (39 samples, 0.08%)</title><rect x="757.2" y="803.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="760.2" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.run (2,837 samples, 6.11%)</title><rect x="758.3" y="899.0" width="72.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="761.3" y="910.0">com/haze..</text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/GetOperation.runInternal (847 samples, 1.82%)</title><rect x="758.5" y="883.0" width="21.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="761.5" y="894.0">c..</text>
</g>
<g>
<title>com/hazelcast/map/impl/EnterpriseMapServiceContextImpl.toData (436 samples, 0.94%)</title><rect x="758.5" y="867.0" width="11.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="761.5" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toData (436 samples, 0.94%)</title><rect x="758.5" y="851.0" width="11.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="761.5" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toDataInternal (431 samples, 0.93%)</title><rect x="758.6" y="835.0" width="10.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="761.6" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertData (430 samples, 0.93%)</title><rect x="758.6" y="819.0" width="10.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="761.6" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (426 samples, 0.92%)</title><rect x="758.6" y="803.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="761.6" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryData.toByteArray (423 samples, 0.91%)</title><rect x="758.7" y="787.0" width="10.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="761.7" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (93 samples, 0.20%)</title><rect x="766.6" y="771.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="769.6" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (93 samples, 0.20%)</title><rect x="766.6" y="755.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="769.6" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (84 samples, 0.18%)</title><rect x="766.8" y="739.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="769.8" y="750.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (84 samples, 0.18%)</title><rect x="766.8" y="723.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="769.8" y="734.0"></text>
</g>
<g>
<title>JfrTraceEvent&lt;EventAllocObjectInNewTLAB&gt;::writeEvent() (84 samples, 0.18%)</title><rect x="766.8" y="707.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="769.8" y="718.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::record(int) (84 samples, 0.18%)</title><rect x="766.8" y="691.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="769.8" y="702.0"></text>
</g>
<g>
<title>JfrStackTrace::record(JavaThread*, int) (25 samples, 0.05%)</title><rect x="766.8" y="675.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="769.8" y="686.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::add(JfrStackTrace const&amp;) (52 samples, 0.11%)</title><rect x="767.5" y="675.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="770.5" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.copyTo (13 samples, 0.03%)</title><rect x="769.0" y="771.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="772.0" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/RecordStore.get (411 samples, 0.89%)</title><rect x="769.5" y="867.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="772.5" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.get (411 samples, 0.89%)</title><rect x="769.5" y="851.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="772.5" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.accessRecord (21 samples, 0.05%)</title><rect x="770.6" y="835.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="773.6" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/Record.onAccess (19 samples, 0.04%)</title><rect x="770.6" y="819.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="773.6" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.setHits (15 samples, 0.03%)</title><rect x="770.7" y="803.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="773.7" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.getRecordOrNull (345 samples, 0.74%)</title><rect x="771.2" y="835.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="774.2" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.getOrNullIfExpired (12 samples, 0.03%)</title><rect x="772.1" y="819.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="775.1" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.isRecordStoreExpirable (12 samples, 0.03%)</title><rect x="772.1" y="803.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="775.1" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (295 samples, 0.64%)</title><rect x="772.4" y="819.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="775.4" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (284 samples, 0.61%)</title><rect x="772.7" y="803.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="775.7" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get (228 samples, 0.49%)</title><rect x="774.1" y="787.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="777.1" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get0 (227 samples, 0.49%)</title><rect x="774.1" y="771.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="777.1" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BehmSlotAccessor.isAssigned (79 samples, 0.17%)</title><rect x="774.2" y="755.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="777.2" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.ensureMemory (19 samples, 0.04%)</title><rect x="776.3" y="755.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="779.3" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryDataUtil.equals (115 samples, 0.25%)</title><rect x="776.9" y="755.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="779.9" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryDataUtil.readType (109 samples, 0.23%)</title><rect x="777.1" y="739.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="780.1" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/PutOperation.runInternal (1,312 samples, 2.83%)</title><rect x="780.0" y="883.0" width="33.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="783.0" y="894.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/EnterpriseMapServiceContextImpl.toData (436 samples, 0.94%)</title><rect x="780.0" y="867.0" width="11.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="783.0" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toData (434 samples, 0.93%)</title><rect x="780.0" y="851.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="783.0" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toDataInternal (428 samples, 0.92%)</title><rect x="780.2" y="835.0" width="10.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="783.2" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertData (426 samples, 0.92%)</title><rect x="780.2" y="819.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="783.2" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (425 samples, 0.92%)</title><rect x="780.2" y="803.0" width="10.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="783.2" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryData.toByteArray (424 samples, 0.91%)</title><rect x="780.3" y="787.0" width="10.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="783.3" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (114 samples, 0.25%)</title><rect x="787.5" y="771.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="790.5" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (111 samples, 0.24%)</title><rect x="787.5" y="755.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="790.5" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (100 samples, 0.22%)</title><rect x="787.8" y="739.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="790.8" y="750.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (99 samples, 0.21%)</title><rect x="787.8" y="723.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="790.8" y="734.0"></text>
</g>
<g>
<title>JfrTraceEvent&lt;EventAllocObjectInNewTLAB&gt;::writeEvent() (98 samples, 0.21%)</title><rect x="787.8" y="707.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="790.8" y="718.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::record(int) (96 samples, 0.21%)</title><rect x="787.8" y="691.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="790.8" y="702.0"></text>
</g>
<g>
<title>JfrStackTrace::record(JavaThread*, int) (43 samples, 0.09%)</title><rect x="787.8" y="675.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="790.8" y="686.0"></text>
</g>
<g>
<title>JfrTypeIDs::jfr_use_methodID(Method*) (11 samples, 0.02%)</title><rect x="788.1" y="659.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="791.1" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (10 samples, 0.02%)</title><rect x="788.6" y="659.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="791.6" y="670.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (10 samples, 0.02%)</title><rect x="788.6" y="643.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="791.6" y="654.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::add(JfrStackTrace const&amp;) (47 samples, 0.10%)</title><rect x="788.9" y="675.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="791.9" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.copyTo (11 samples, 0.02%)</title><rect x="790.5" y="771.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="793.5" y="782.0"></text>
</g>
<g>
<title>ret_from_intr (11 samples, 0.02%)</title><rect x="790.8" y="771.0" width="0.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="793.8" y="782.0"></text>
</g>
<g>
<title>do_IRQ (11 samples, 0.02%)</title><rect x="790.8" y="755.0" width="0.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="793.8" y="766.0"></text>
</g>
<g>
<title>irq_exit (11 samples, 0.02%)</title><rect x="790.8" y="739.0" width="0.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="793.8" y="750.0"></text>
</g>
<g>
<title>__softirqentry_text_start (11 samples, 0.02%)</title><rect x="790.8" y="723.0" width="0.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="793.8" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.put (875 samples, 1.88%)</title><rect x="791.1" y="867.0" width="22.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="794.1" y="878.0">c..</text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.putInternal (874 samples, 1.88%)</title><rect x="791.1" y="851.0" width="22.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="794.1" y="862.0">c..</text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.getValue (80 samples, 0.17%)</title><rect x="791.2" y="835.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="794.2" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.getValue (80 samples, 0.17%)</title><rect x="791.2" y="819.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="794.2" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryData.reset (71 samples, 0.15%)</title><rect x="791.3" y="803.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="794.3" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.setSize (71 samples, 0.15%)</title><rect x="791.3" y="787.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="794.3" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.markRecordStoreExpirable (17 samples, 0.04%)</title><rect x="793.2" y="835.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.2" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (14 samples, 0.03%)</title><rect x="793.3" y="819.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="796.3" y="830.0"></text>
</g>
<g>
<title>gettimeofday (12 samples, 0.03%)</title><rect x="793.4" y="803.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="796.4" y="814.0"></text>
</g>
<g>
<title>[vdso] (11 samples, 0.02%)</title><rect x="793.4" y="787.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="796.4" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.updateRecord (487 samples, 1.05%)</title><rect x="793.7" y="835.0" width="12.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="796.7" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/Record.onAccess (26 samples, 0.06%)</title><rect x="793.7" y="819.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="796.7" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.setHits (18 samples, 0.04%)</title><rect x="793.9" y="803.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.9" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.writeInt (18 samples, 0.04%)</title><rect x="793.9" y="787.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="796.9" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/Record.onUpdate (17 samples, 0.04%)</title><rect x="794.4" y="819.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="797.4" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.setLastUpdateTime (14 samples, 0.03%)</title><rect x="794.5" y="803.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="797.5" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.writeInt (12 samples, 0.03%)</title><rect x="794.5" y="787.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="797.5" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/CompositeMutationObserver.onUpdateRecord (105 samples, 0.23%)</title><rect x="794.9" y="819.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="797.9" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/IndexingMutationObserver.onUpdateRecord (76 samples, 0.16%)</title><rect x="795.0" y="803.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="798.0" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/IndexingMutationObserver.saveIndex (76 samples, 0.16%)</title><rect x="795.0" y="787.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="798.0" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapContainer.getIndexes (76 samples, 0.16%)</title><rect x="795.0" y="771.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="798.0" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.getIndexes (74 samples, 0.16%)</title><rect x="795.0" y="755.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="798.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (61 samples, 0.13%)</title><rect x="795.3" y="739.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="798.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (21 samples, 0.05%)</title><rect x="796.3" y="723.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="799.3" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/JsonMetadataMutationObserver.onUpdateRecord (23 samples, 0.05%)</title><rect x="796.9" y="803.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="799.9" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/JsonMetadataMutationObserver.updateValueMetadataIfNecessary (21 samples, 0.05%)</title><rect x="796.9" y="787.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="799.9" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDJsonMetadataMutationObserver.getMetadata (19 samples, 0.04%)</title><rect x="797.0" y="771.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="800.0" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/MetadataStore.get (19 samples, 0.04%)</title><rect x="797.0" y="755.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="800.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (12 samples, 0.03%)</title><rect x="797.1" y="739.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="800.1" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.updateRecordValue (336 samples, 0.72%)</title><rect x="797.5" y="819.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="800.5" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.updateRecordValue (336 samples, 0.72%)</title><rect x="797.5" y="803.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="800.5" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/NativeMapEntryCostEstimator.adjustEstimateBy (30 samples, 0.06%)</title><rect x="797.5" y="787.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="800.5" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/NativeMapEntryCostEstimator.calculateValueCost (104 samples, 0.22%)</title><rect x="798.3" y="787.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="801.3" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/NativeMapEntryCostEstimator.calculateValueCost (104 samples, 0.22%)</title><rect x="798.3" y="771.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="801.3" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/NativeMapEntryCostEstimator.getSize (102 samples, 0.22%)</title><rect x="798.3" y="755.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="801.3" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.getSize (100 samples, 0.22%)</title><rect x="798.4" y="739.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="801.4" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.getSize (100 samples, 0.22%)</title><rect x="798.4" y="723.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="801.4" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getAllocatedSize (95 samples, 0.20%)</title><rect x="798.5" y="707.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.5" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.getAllocatedSize (69 samples, 0.15%)</title><rect x="798.5" y="691.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="801.5" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.getSizeInternal (69 samples, 0.15%)</title><rect x="798.5" y="675.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="801.5" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (65 samples, 0.14%)</title><rect x="798.6" y="659.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="801.6" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (65 samples, 0.14%)</title><rect x="798.6" y="643.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="801.6" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (63 samples, 0.14%)</title><rect x="798.6" y="627.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="801.6" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (58 samples, 0.12%)</title><rect x="798.7" y="611.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="801.7" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (57 samples, 0.12%)</title><rect x="798.7" y="595.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="801.7" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.isSlotAssigned (47 samples, 0.10%)</title><rect x="798.8" y="579.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="801.8" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.isAssigned (47 samples, 0.10%)</title><rect x="798.8" y="563.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="801.8" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getMemoryManager (25 samples, 0.05%)</title><rect x="800.3" y="691.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="803.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (21 samples, 0.05%)</title><rect x="800.4" y="675.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="803.4" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.addDeferredDispose (13 samples, 0.03%)</title><rect x="801.0" y="787.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="804.0" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.addDeferredDispose (13 samples, 0.03%)</title><rect x="801.0" y="771.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="804.0" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.add (12 samples, 0.03%)</title><rect x="801.0" y="755.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="804.0" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.addLast (12 samples, 0.03%)</title><rect x="801.0" y="739.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="804.0" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.toNative (186 samples, 0.40%)</title><rect x="801.3" y="787.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="804.3" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.toData (185 samples, 0.40%)</title><rect x="801.3" y="771.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="804.3" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.getSize (56 samples, 0.12%)</title><rect x="801.5" y="755.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="804.5" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getAllocatedSize (54 samples, 0.12%)</title><rect x="801.5" y="739.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="804.5" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.getAllocatedSize (40 samples, 0.09%)</title><rect x="801.5" y="723.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="804.5" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.getSizeInternal (40 samples, 0.09%)</title><rect x="801.5" y="707.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="804.5" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (39 samples, 0.08%)</title><rect x="801.5" y="691.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="804.5" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (39 samples, 0.08%)</title><rect x="801.5" y="675.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="804.5" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (39 samples, 0.08%)</title><rect x="801.5" y="659.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="804.5" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (38 samples, 0.08%)</title><rect x="801.6" y="643.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="804.6" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (35 samples, 0.08%)</title><rect x="801.6" y="627.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="804.6" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getMemoryManager (14 samples, 0.03%)</title><rect x="802.6" y="723.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="805.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 0.02%)</title><rect x="802.6" y="707.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="805.6" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toNativeData (123 samples, 0.26%)</title><rect x="802.9" y="755.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="805.9" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toDataInternal (122 samples, 0.26%)</title><rect x="802.9" y="739.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="805.9" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertData (122 samples, 0.26%)</title><rect x="802.9" y="723.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="805.9" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (116 samples, 0.25%)</title><rect x="802.9" y="707.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="805.9" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (112 samples, 0.24%)</title><rect x="803.0" y="691.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="806.0" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.allocate (108 samples, 0.23%)</title><rect x="803.0" y="675.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="806.0" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (108 samples, 0.23%)</title><rect x="803.0" y="659.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="806.0" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.acquire (11 samples, 0.02%)</title><rect x="803.0" y="643.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="806.0" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isValidAndAvailable (96 samples, 0.21%)</title><rect x="803.3" y="643.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="806.3" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (30 samples, 0.06%)</title><rect x="803.3" y="627.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="806.3" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (30 samples, 0.06%)</title><rect x="803.3" y="611.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="806.3" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (27 samples, 0.06%)</title><rect x="803.4" y="595.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="806.4" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (66 samples, 0.14%)</title><rect x="804.1" y="627.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="807.1" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (66 samples, 0.14%)</title><rect x="804.1" y="611.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="807.1" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (64 samples, 0.14%)</title><rect x="804.1" y="595.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="807.1" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (62 samples, 0.13%)</title><rect x="804.2" y="579.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="807.2" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (62 samples, 0.13%)</title><rect x="804.2" y="563.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="807.2" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.isSlotAssigned (10 samples, 0.02%)</title><rect x="804.7" y="547.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="807.7" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.isAssigned (10 samples, 0.02%)</title><rect x="804.7" y="531.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="807.7" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.mask (32 samples, 0.07%)</title><rect x="804.9" y="547.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="807.9" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.capacity (32 samples, 0.07%)</title><rect x="804.9" y="531.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="807.9" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.checkIfLoaded (57 samples, 0.12%)</title><rect x="806.1" y="835.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="809.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.isEmpty (17 samples, 0.04%)</title><rect x="807.1" y="819.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="810.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (17 samples, 0.04%)</title><rect x="807.1" y="803.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="810.1" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.getRecordOrNull (228 samples, 0.49%)</title><rect x="807.5" y="835.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="810.5" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (197 samples, 0.42%)</title><rect x="808.2" y="819.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="811.2" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (196 samples, 0.42%)</title><rect x="808.2" y="803.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="811.2" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get (193 samples, 0.42%)</title><rect x="808.3" y="787.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="811.3" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get0 (193 samples, 0.42%)</title><rect x="808.3" y="771.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="811.3" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BehmSlotAccessor.isAssigned (56 samples, 0.12%)</title><rect x="808.3" y="755.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="811.3" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.ensureMemory (24 samples, 0.05%)</title><rect x="809.7" y="755.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="812.7" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryDataUtil.equals (106 samples, 0.23%)</title><rect x="810.5" y="755.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="813.5" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryDataUtil.readType (102 samples, 0.22%)</title><rect x="810.6" y="739.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="813.6" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/SetOperation.runInternal (668 samples, 1.44%)</title><rect x="813.3" y="883.0" width="17.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="816.3" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.set (668 samples, 1.44%)</title><rect x="813.3" y="867.0" width="17.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="816.3" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.putInternal (668 samples, 1.44%)</title><rect x="813.3" y="851.0" width="17.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="816.3" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.putNewRecord (642 samples, 1.38%)</title><rect x="813.6" y="835.0" width="16.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="816.6" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.putIntoMapStore (11 samples, 0.02%)</title><rect x="813.6" y="819.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="816.6" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/CompositeMutationObserver.onPutRecord (22 samples, 0.05%)</title><rect x="813.9" y="819.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="816.9" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/IndexingMutationObserver.onPutRecord (11 samples, 0.02%)</title><rect x="814.0" y="803.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="817.0" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/IndexingMutationObserver.saveIndex (11 samples, 0.02%)</title><rect x="814.0" y="787.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="817.0" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapContainer.getIndexes (11 samples, 0.02%)</title><rect x="814.0" y="771.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="817.0" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/EnterpriseRecordStore.createRecord (559 samples, 1.20%)</title><rect x="814.4" y="819.0" width="14.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="817.4" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/EnterpriseRecordStore.createRecordInternal (558 samples, 1.20%)</title><rect x="814.4" y="803.0" width="14.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="817.4" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.createRecord (557 samples, 1.20%)</title><rect x="814.4" y="787.0" width="14.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="817.4" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.createRecord (557 samples, 1.20%)</title><rect x="814.4" y="771.0" width="14.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="817.4" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecordFactory.newRecord (550 samples, 1.18%)</title><rect x="814.6" y="755.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="817.6" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.allocate (126 samples, 0.27%)</title><rect x="814.7" y="739.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="817.7" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (125 samples, 0.27%)</title><rect x="814.7" y="723.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="817.7" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.allocate (124 samples, 0.27%)</title><rect x="814.7" y="707.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="817.7" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (123 samples, 0.26%)</title><rect x="814.7" y="691.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="817.7" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (113 samples, 0.24%)</title><rect x="814.7" y="675.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="817.7" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (104 samples, 0.22%)</title><rect x="814.7" y="659.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="817.7" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (104 samples, 0.22%)</title><rect x="814.7" y="643.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="817.7" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (94 samples, 0.20%)</title><rect x="814.7" y="627.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="817.7" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (93 samples, 0.20%)</title><rect x="814.7" y="611.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="817.7" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (90 samples, 0.19%)</title><rect x="814.7" y="595.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.7" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (88 samples, 0.19%)</title><rect x="814.7" y="579.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.7" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (87 samples, 0.19%)</title><rect x="814.7" y="563.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="817.7" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (85 samples, 0.18%)</title><rect x="814.7" y="547.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="817.7" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (82 samples, 0.18%)</title><rect x="814.7" y="531.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="817.7" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (81 samples, 0.17%)</title><rect x="814.7" y="515.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="817.7" y="526.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (80 samples, 0.17%)</title><rect x="814.7" y="499.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="817.7" y="510.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (80 samples, 0.17%)</title><rect x="814.7" y="483.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.7" y="494.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (69 samples, 0.15%)</title><rect x="814.7" y="467.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="817.7" y="478.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (69 samples, 0.15%)</title><rect x="814.7" y="451.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.7" y="462.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (62 samples, 0.13%)</title><rect x="814.7" y="435.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="817.7" y="446.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (62 samples, 0.13%)</title><rect x="814.7" y="419.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="817.7" y="430.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (51 samples, 0.11%)</title><rect x="814.7" y="403.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="817.7" y="414.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (51 samples, 0.11%)</title><rect x="814.7" y="387.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="817.7" y="398.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (50 samples, 0.11%)</title><rect x="814.7" y="371.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="817.7" y="382.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (50 samples, 0.11%)</title><rect x="814.7" y="355.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="817.7" y="366.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (47 samples, 0.10%)</title><rect x="814.7" y="339.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="817.7" y="350.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (47 samples, 0.10%)</title><rect x="814.7" y="323.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="817.7" y="334.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (44 samples, 0.09%)</title><rect x="814.7" y="307.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="817.7" y="318.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (44 samples, 0.09%)</title><rect x="814.7" y="291.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.7" y="302.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (42 samples, 0.09%)</title><rect x="814.7" y="275.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="817.7" y="286.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (42 samples, 0.09%)</title><rect x="814.7" y="259.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="817.7" y="270.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (40 samples, 0.09%)</title><rect x="814.7" y="243.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="817.7" y="254.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (40 samples, 0.09%)</title><rect x="814.7" y="227.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="817.7" y="238.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (30 samples, 0.06%)</title><rect x="814.7" y="211.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="817.7" y="222.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (30 samples, 0.06%)</title><rect x="814.7" y="195.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.7" y="206.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (24 samples, 0.05%)</title><rect x="814.7" y="179.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="817.7" y="190.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (24 samples, 0.05%)</title><rect x="814.7" y="163.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="817.7" y="174.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/StandardMemoryManager.allocate (14 samples, 0.03%)</title><rect x="815.0" y="147.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="818.0" y="158.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.setMemory (13 samples, 0.03%)</title><rect x="815.0" y="131.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="818.0" y="142.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (13 samples, 0.03%)</title><rect x="815.0" y="115.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="818.0" y="126.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (13 samples, 0.03%)</title><rect x="815.0" y="99.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="818.0" y="110.0"></text>
</g>
<g>
<title>Unsafe_SetMemory2 (13 samples, 0.03%)</title><rect x="815.0" y="83.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="818.0" y="94.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (13 samples, 0.03%)</title><rect x="815.0" y="67.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="818.0" y="78.0"></text>
</g>
<g>
<title>async_page_fault (10 samples, 0.02%)</title><rect x="815.1" y="51.0" width="0.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="818.1" y="62.0"></text>
</g>
<g>
<title>__do_page_fault (10 samples, 0.02%)</title><rect x="815.1" y="35.0" width="0.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="818.1" y="46.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.release (10 samples, 0.02%)</title><rect x="815.5" y="211.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="818.5" y="222.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.resizeQueue (10 samples, 0.02%)</title><rect x="815.5" y="195.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="818.5" y="206.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/queue/LongArrayQueue.&lt;init&gt; (10 samples, 0.02%)</title><rect x="815.5" y="179.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="818.5" y="190.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/queue/LongArrayQueue.clear (10 samples, 0.02%)</title><rect x="815.5" y="163.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="818.5" y="174.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.release (11 samples, 0.02%)</title><rect x="816.0" y="403.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="819.0" y="414.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.resizeQueue (11 samples, 0.02%)</title><rect x="816.0" y="387.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="819.0" y="398.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/queue/LongArrayQueue.&lt;init&gt; (11 samples, 0.02%)</title><rect x="816.0" y="371.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="819.0" y="382.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/queue/LongArrayQueue.clear (11 samples, 0.02%)</title><rect x="816.0" y="355.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="819.0" y="366.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.release (11 samples, 0.02%)</title><rect x="816.5" y="467.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="819.5" y="478.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.resizeQueue (11 samples, 0.02%)</title><rect x="816.5" y="451.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="819.5" y="462.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/queue/LongArrayQueue.&lt;init&gt; (11 samples, 0.02%)</title><rect x="816.5" y="435.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="819.5" y="446.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/queue/LongArrayQueue.clear (11 samples, 0.02%)</title><rect x="816.5" y="419.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="819.5" y="430.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.release (10 samples, 0.02%)</title><rect x="817.1" y="627.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="820.1" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.toData (419 samples, 0.90%)</title><rect x="817.9" y="739.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="820.9" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toNativeData (409 samples, 0.88%)</title><rect x="818.1" y="723.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="821.1" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toDataInternal (409 samples, 0.88%)</title><rect x="818.1" y="707.0" width="10.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="821.1" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertData (409 samples, 0.88%)</title><rect x="818.1" y="691.0" width="10.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="821.1" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (407 samples, 0.88%)</title><rect x="818.1" y="675.0" width="10.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="821.1" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (405 samples, 0.87%)</title><rect x="818.2" y="659.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="821.2" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.allocate (405 samples, 0.87%)</title><rect x="818.2" y="643.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="821.2" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (404 samples, 0.87%)</title><rect x="818.2" y="627.0" width="10.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="821.2" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (346 samples, 0.75%)</title><rect x="818.2" y="611.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="821.2" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (345 samples, 0.74%)</title><rect x="818.2" y="595.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="821.2" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (342 samples, 0.74%)</title><rect x="818.2" y="579.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="821.2" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (340 samples, 0.73%)</title><rect x="818.3" y="563.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="821.3" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (336 samples, 0.72%)</title><rect x="818.3" y="547.0" width="8.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="821.3" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (336 samples, 0.72%)</title><rect x="818.3" y="531.0" width="8.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="821.3" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (336 samples, 0.72%)</title><rect x="818.3" y="515.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="821.3" y="526.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (336 samples, 0.72%)</title><rect x="818.3" y="499.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="821.3" y="510.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (333 samples, 0.72%)</title><rect x="818.3" y="483.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="821.3" y="494.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (333 samples, 0.72%)</title><rect x="818.3" y="467.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="821.3" y="478.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (333 samples, 0.72%)</title><rect x="818.3" y="451.0" width="8.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="821.3" y="462.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (333 samples, 0.72%)</title><rect x="818.3" y="435.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="821.3" y="446.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (333 samples, 0.72%)</title><rect x="818.3" y="419.0" width="8.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="821.3" y="430.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (333 samples, 0.72%)</title><rect x="818.3" y="403.0" width="8.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="821.3" y="414.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (333 samples, 0.72%)</title><rect x="818.3" y="387.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="821.3" y="398.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (333 samples, 0.72%)</title><rect x="818.3" y="371.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="821.3" y="382.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (333 samples, 0.72%)</title><rect x="818.3" y="355.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="821.3" y="366.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.zeroOut (51 samples, 0.11%)</title><rect x="818.3" y="339.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="821.3" y="350.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.setMemory (51 samples, 0.11%)</title><rect x="818.3" y="323.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="821.3" y="334.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (51 samples, 0.11%)</title><rect x="818.3" y="307.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="821.3" y="318.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (51 samples, 0.11%)</title><rect x="818.3" y="291.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="821.3" y="302.0"></text>
</g>
<g>
<title>Unsafe_SetMemory2 (51 samples, 0.11%)</title><rect x="818.3" y="275.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="821.3" y="286.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (51 samples, 0.11%)</title><rect x="818.3" y="259.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="821.3" y="270.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/StandardMemoryManager.allocate (282 samples, 0.61%)</title><rect x="819.6" y="339.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="822.6" y="350.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.setMemory (280 samples, 0.60%)</title><rect x="819.6" y="323.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="822.6" y="334.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (280 samples, 0.60%)</title><rect x="819.6" y="307.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="822.6" y="318.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (280 samples, 0.60%)</title><rect x="819.6" y="291.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="822.6" y="302.0"></text>
</g>
<g>
<title>Unsafe_SetMemory2 (280 samples, 0.60%)</title><rect x="819.6" y="275.0" width="7.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="822.6" y="286.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (280 samples, 0.60%)</title><rect x="819.6" y="259.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="822.6" y="270.0"></text>
</g>
<g>
<title>async_page_fault (222 samples, 0.48%)</title><rect x="821.1" y="243.0" width="5.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="824.1" y="254.0"></text>
</g>
<g>
<title>__do_page_fault (222 samples, 0.48%)</title><rect x="821.1" y="227.0" width="5.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="824.1" y="238.0"></text>
</g>
<g>
<title>handle_mm_fault (155 samples, 0.33%)</title><rect x="822.6" y="211.0" width="3.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="825.6" y="222.0"></text>
</g>
<g>
<title>__handle_mm_fault (152 samples, 0.33%)</title><rect x="822.6" y="195.0" width="3.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="825.6" y="206.0"></text>
</g>
<g>
<title>_raw_spin_lock (55 samples, 0.12%)</title><rect x="823.0" y="179.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="826.0" y="190.0"></text>
</g>
<g>
<title>alloc_pages_vma (49 samples, 0.11%)</title><rect x="824.4" y="179.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="827.4" y="190.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (45 samples, 0.10%)</title><rect x="824.4" y="163.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="827.4" y="174.0"></text>
</g>
<g>
<title>get_page_from_freelist (45 samples, 0.10%)</title><rect x="824.4" y="147.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="827.4" y="158.0"></text>
</g>
<g>
<title>clear_page_erms (34 samples, 0.07%)</title><rect x="824.7" y="131.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="827.7" y="142.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge (24 samples, 0.05%)</title><rect x="825.8" y="179.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="828.8" y="190.0"></text>
</g>
<g>
<title>try_charge (15 samples, 0.03%)</title><rect x="826.0" y="163.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="829.0" y="174.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isValidAndAvailable (58 samples, 0.12%)</title><rect x="827.0" y="611.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="830.0" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (51 samples, 0.11%)</title><rect x="827.2" y="595.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="830.2" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (51 samples, 0.11%)</title><rect x="827.2" y="579.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="830.2" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (50 samples, 0.11%)</title><rect x="827.2" y="563.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="830.2" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (49 samples, 0.11%)</title><rect x="827.2" y="547.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="830.2" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (49 samples, 0.11%)</title><rect x="827.2" y="531.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="830.2" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.isSlotAssigned (49 samples, 0.11%)</title><rect x="827.2" y="515.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="830.2" y="526.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (47 samples, 0.10%)</title><rect x="827.2" y="499.0" width="1.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="830.2" y="510.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.put (49 samples, 0.11%)</title><rect x="828.6" y="819.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="831.6" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.put (49 samples, 0.11%)</title><rect x="828.6" y="803.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="831.6" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.toNative (28 samples, 0.06%)</title><rect x="829.2" y="787.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="832.2" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.convertData (28 samples, 0.06%)</title><rect x="829.2" y="771.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="832.2" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertToNativeData (27 samples, 0.06%)</title><rect x="829.2" y="755.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="832.2" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (27 samples, 0.06%)</title><rect x="829.2" y="739.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="832.2" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (26 samples, 0.06%)</title><rect x="829.2" y="723.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="832.2" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.allocate (25 samples, 0.05%)</title><rect x="829.2" y="707.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="832.2" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (25 samples, 0.05%)</title><rect x="829.2" y="691.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="832.2" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (19 samples, 0.04%)</title><rect x="829.2" y="675.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="832.2" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (15 samples, 0.03%)</title><rect x="829.2" y="659.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="832.2" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (11 samples, 0.02%)</title><rect x="829.2" y="643.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="832.2" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.getRecordOrNull (17 samples, 0.04%)</title><rect x="829.9" y="835.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="832.9" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (16 samples, 0.03%)</title><rect x="829.9" y="819.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="832.9" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (15 samples, 0.03%)</title><rect x="829.9" y="803.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="832.9" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get (14 samples, 0.03%)</title><rect x="830.0" y="787.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="833.0" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get0 (14 samples, 0.03%)</title><rect x="830.0" y="771.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="833.0" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BehmSlotAccessor.isAssigned (10 samples, 0.02%)</title><rect x="830.0" y="755.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="833.0" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.sendResponse (198 samples, 0.43%)</title><rect x="830.5" y="915.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="833.5" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.sendResponse (198 samples, 0.43%)</title><rect x="830.5" y="899.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="833.5" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.complete (79 samples, 0.17%)</title><rect x="830.5" y="883.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="833.5" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.complete (11 samples, 0.02%)</title><rect x="830.8" y="867.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="833.8" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.complete0 (11 samples, 0.02%)</title><rect x="830.8" y="851.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="833.8" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/InvocationRegistry.deregister (57 samples, 0.12%)</title><rect x="831.1" y="867.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="834.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.remove (52 samples, 0.11%)</title><rect x="831.2" y="851.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="834.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.replaceNode (52 samples, 0.11%)</title><rect x="831.2" y="835.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="834.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.addCount (19 samples, 0.04%)</title><rect x="832.0" y="819.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="835.0" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.notifyNormalResponse (114 samples, 0.25%)</title><rect x="832.5" y="883.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="835.5" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.complete (101 samples, 0.22%)</title><rect x="832.9" y="867.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="835.9" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/InvocationRegistry.deregister (88 samples, 0.19%)</title><rect x="833.2" y="851.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="836.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.remove (79 samples, 0.17%)</title><rect x="833.4" y="835.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="836.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.replaceNode (78 samples, 0.17%)</title><rect x="833.4" y="819.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="836.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.addCount (33 samples, 0.07%)</title><rect x="834.6" y="803.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="837.6" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.sendBackups (2,482 samples, 5.35%)</title><rect x="835.5" y="915.0" width="63.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="838.5" y="926.0">com/haz..</text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/BasePutOperation.shouldBackup (23 samples, 0.05%)</title><rect x="835.5" y="899.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="838.5" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.getRecord (22 samples, 0.05%)</title><rect x="835.6" y="883.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="838.6" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (22 samples, 0.05%)</title><rect x="835.6" y="867.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="838.6" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (22 samples, 0.05%)</title><rect x="835.6" y="851.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="838.6" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get (20 samples, 0.04%)</title><rect x="835.6" y="835.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="838.6" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get0 (20 samples, 0.04%)</title><rect x="835.6" y="819.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="838.6" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.sendBackups0 (2,457 samples, 5.29%)</title><rect x="836.1" y="899.0" width="62.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="839.1" y="910.0">com/ha..</text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionReplicaManager.getServiceNamespace (60 samples, 0.13%)</title><rect x="837.2" y="883.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="840.2" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.getServiceNamespace (60 samples, 0.13%)</title><rect x="837.2" y="867.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="840.2" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.getServiceNamespace (60 samples, 0.13%)</title><rect x="837.2" y="851.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="840.2" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.getService (44 samples, 0.09%)</title><rect x="837.7" y="835.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="840.7" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.getService (24 samples, 0.05%)</title><rect x="838.1" y="819.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="841.1" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getService (19 samples, 0.04%)</title><rect x="838.2" y="803.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="841.2" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getServiceInfo (10 samples, 0.02%)</title><rect x="838.4" y="787.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="841.4" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionReplicaManager.incrementPartitionReplicaVersions (169 samples, 0.36%)</title><rect x="838.8" y="883.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="841.8" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionReplicaVersions.incrementAndGet (169 samples, 0.36%)</title><rect x="838.8" y="867.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="841.8" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionReplicaVersions.getFragmentVersions (164 samples, 0.35%)</title><rect x="838.9" y="851.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="841.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (114 samples, 0.25%)</title><rect x="840.0" y="835.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="843.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (42 samples, 0.09%)</title><rect x="840.0" y="819.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="843.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (72 samples, 0.16%)</title><rect x="841.1" y="819.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="844.1" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.makeBackups (2,146 samples, 4.62%)</title><rect x="843.1" y="883.0" width="54.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="846.1" y="894.0">com/h..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.sendSingleBackup (2,133 samples, 4.59%)</title><rect x="843.4" y="867.0" width="54.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="846.4" y="878.0">com/h..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.sendSingleBackup (2,133 samples, 4.59%)</title><rect x="843.4" y="851.0" width="54.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="846.4" y="862.0">com/h..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.getBackupOperation (70 samples, 0.15%)</title><rect x="843.6" y="835.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="846.6" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/BasePutOperation.getBackupOperation (61 samples, 0.13%)</title><rect x="843.8" y="819.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="846.8" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.getValueOrPostProcessedValue (31 samples, 0.07%)</title><rect x="844.2" y="803.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="847.2" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.isPostProcessing (28 samples, 0.06%)</title><rect x="844.3" y="787.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="847.3" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.getRecord (14 samples, 0.03%)</title><rect x="845.0" y="803.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="848.0" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (14 samples, 0.03%)</title><rect x="845.0" y="787.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="848.0" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (10 samples, 0.02%)</title><rect x="845.1" y="771.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="848.1" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get (10 samples, 0.02%)</title><rect x="845.1" y="755.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="848.1" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get0 (10 samples, 0.02%)</title><rect x="845.1" y="739.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="848.1" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.skipSendingBackupToTarget (24 samples, 0.05%)</title><rect x="845.4" y="835.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="848.4" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/ClusterServiceImpl.getMember (24 samples, 0.05%)</title><rect x="845.4" y="819.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="848.4" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/MembershipManager.getMember (24 samples, 0.05%)</title><rect x="845.4" y="803.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="848.4" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/MemberMap.getMember (13 samples, 0.03%)</title><rect x="845.7" y="787.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="848.7" y="798.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (10 samples, 0.02%)</title><rect x="845.8" y="771.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="848.8" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OutboundOperationHandler.send (2,030 samples, 4.37%)</title><rect x="846.0" y="835.0" width="51.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="849.0" y="846.0">com/h..</text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/MemberViewUnifiedEndpointManager.getOrConnect (59 samples, 0.13%)</title><rect x="846.1" y="819.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="849.1" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/MemberViewUnifiedEndpointManager.getOrConnect (59 samples, 0.13%)</title><rect x="846.1" y="803.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="849.1" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/TcpIpEndpointManager.getOrConnect (59 samples, 0.13%)</title><rect x="846.1" y="787.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="849.1" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/TcpIpEndpointManager.getOrConnect (59 samples, 0.13%)</title><rect x="846.1" y="771.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="849.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (59 samples, 0.13%)</title><rect x="846.1" y="755.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="849.1" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/cluster/Address.equals (16 samples, 0.03%)</title><rect x="847.0" y="739.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="850.0" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/TcpIpNetworkingService.getEndpointManager (13 samples, 0.03%)</title><rect x="847.6" y="819.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="850.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (13 samples, 0.03%)</title><rect x="847.6" y="803.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="850.6" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OutboundOperationHandler.send (1,957 samples, 4.22%)</title><rect x="847.9" y="819.0" width="49.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="850.9" y="830.0">com/h..</text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/MemberViewUnifiedEndpointManager.transmit (699 samples, 1.51%)</title><rect x="848.0" y="803.0" width="17.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="851.0" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/MemberViewUnifiedEndpointManager.transmit (699 samples, 1.51%)</title><rect x="848.0" y="787.0" width="17.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="851.0" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/TcpIpEndpointManager.transmit (699 samples, 1.51%)</title><rect x="848.0" y="771.0" width="17.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="851.0" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/TcpIpConnection.write (697 samples, 1.50%)</title><rect x="848.1" y="755.0" width="17.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="851.1" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioChannel.write (696 samples, 1.50%)</title><rect x="848.1" y="739.0" width="17.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="851.1" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.write (687 samples, 1.48%)</title><rect x="848.3" y="723.0" width="17.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="851.3" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.executePipeline (591 samples, 1.27%)</title><rect x="849.2" y="707.0" width="15.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="852.2" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioPipeline.registerOp (79 samples, 0.17%)</title><rect x="849.7" y="691.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="852.7" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (75 samples, 0.16%)</title><rect x="849.8" y="675.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="852.8" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (66 samples, 0.14%)</title><rect x="850.0" y="659.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="853.0" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetInterestOps (66 samples, 0.14%)</title><rect x="850.0" y="643.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="853.0" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.putEventOps (66 samples, 0.14%)</title><rect x="850.0" y="627.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="853.0" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.setInterest (23 samples, 0.05%)</title><rect x="851.1" y="611.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="854.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (486 samples, 1.05%)</title><rect x="851.8" y="691.0" width="12.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="854.8" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (450 samples, 0.97%)</title><rect x="852.7" y="675.0" width="11.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="855.7" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (450 samples, 0.97%)</title><rect x="852.7" y="659.0" width="11.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="855.7" y="670.0"></text>
</g>
<g>
<title>write (439 samples, 0.95%)</title><rect x="853.0" y="643.0" width="11.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="856.0" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (401 samples, 0.86%)</title><rect x="853.9" y="627.0" width="10.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="856.9" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (401 samples, 0.86%)</title><rect x="853.9" y="611.0" width="10.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="856.9" y="622.0"></text>
</g>
<g>
<title>sys_write (353 samples, 0.76%)</title><rect x="854.8" y="595.0" width="8.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="857.8" y="606.0"></text>
</g>
<g>
<title>__fdget_pos (43 samples, 0.09%)</title><rect x="854.8" y="579.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="857.8" y="590.0"></text>
</g>
<g>
<title>__fget_light (42 samples, 0.09%)</title><rect x="854.9" y="563.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="857.9" y="574.0"></text>
</g>
<g>
<title>__fget (32 samples, 0.07%)</title><rect x="855.1" y="547.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="858.1" y="558.0"></text>
</g>
<g>
<title>fput (12 samples, 0.03%)</title><rect x="855.9" y="579.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="858.9" y="590.0"></text>
</g>
<g>
<title>vfs_write (295 samples, 0.64%)</title><rect x="856.2" y="579.0" width="7.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="859.2" y="590.0"></text>
</g>
<g>
<title>__vfs_write (271 samples, 0.58%)</title><rect x="856.6" y="563.0" width="6.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="859.6" y="574.0"></text>
</g>
<g>
<title>pipe_write (271 samples, 0.58%)</title><rect x="856.6" y="547.0" width="6.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="859.6" y="558.0"></text>
</g>
<g>
<title>__wake_up_common_lock (206 samples, 0.44%)</title><rect x="857.2" y="531.0" width="5.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="860.2" y="542.0"></text>
</g>
<g>
<title>__lock_text_start (205 samples, 0.44%)</title><rect x="857.2" y="515.0" width="5.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="860.2" y="526.0"></text>
</g>
<g>
<title>copy_page_from_iter (12 samples, 0.03%)</title><rect x="862.4" y="531.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="865.4" y="542.0"></text>
</g>
<g>
<title>mutex_lock (15 samples, 0.03%)</title><rect x="862.8" y="531.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="865.8" y="542.0"></text>
</g>
<g>
<title>mutex_unlock (10 samples, 0.02%)</title><rect x="863.2" y="531.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="866.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.offer (54 samples, 0.12%)</title><rect x="864.2" y="707.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="867.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.casNext (50 samples, 0.11%)</title><rect x="864.3" y="691.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="867.3" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.toBytes (1,252 samples, 2.70%)</title><rect x="865.8" y="803.0" width="31.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="868.8" y="814.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.toBytes (1,252 samples, 2.70%)</title><rect x="865.8" y="787.0" width="31.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="868.8" y="798.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.toBytes (1,251 samples, 2.69%)</title><rect x="865.8" y="771.0" width="31.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="868.8" y="782.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.serializerFor (20 samples, 0.04%)</title><rect x="865.9" y="755.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="868.9" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.lookupDefaultSerializer (20 samples, 0.04%)</title><rect x="865.9" y="739.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="868.9" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.toByteArray (727 samples, 1.57%)</title><rect x="866.5" y="755.0" width="18.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="869.5" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.toByteArray (720 samples, 1.55%)</title><rect x="866.5" y="739.0" width="18.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="869.5" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (147 samples, 0.32%)</title><rect x="874.3" y="723.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="877.3" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (145 samples, 0.31%)</title><rect x="874.3" y="707.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="877.3" y="718.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab_event(KlassHandle, unsigned long) (13 samples, 0.03%)</title><rect x="874.6" y="691.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="877.6" y="702.0"></text>
</g>
<g>
<title>JfrTraceEvent&lt;EventAllocObjectOutsideTLAB&gt;::writeEvent() (13 samples, 0.03%)</title><rect x="874.6" y="675.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="877.6" y="686.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::record(int) (12 samples, 0.03%)</title><rect x="874.6" y="659.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="877.6" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (121 samples, 0.26%)</title><rect x="874.9" y="691.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="877.9" y="702.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (121 samples, 0.26%)</title><rect x="874.9" y="675.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="877.9" y="686.0"></text>
</g>
<g>
<title>JfrTraceEvent&lt;EventAllocObjectInNewTLAB&gt;::writeEvent() (121 samples, 0.26%)</title><rect x="874.9" y="659.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="877.9" y="670.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::record(int) (117 samples, 0.25%)</title><rect x="874.9" y="643.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="877.9" y="654.0"></text>
</g>
<g>
<title>JfrStackTrace::record(JavaThread*, int) (33 samples, 0.07%)</title><rect x="875.0" y="627.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="878.0" y="638.0"></text>
</g>
<g>
<title>JfrTypeIDs::jfr_use_methodID(Method*) (10 samples, 0.02%)</title><rect x="875.0" y="611.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="878.0" y="622.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::add(JfrStackTrace const&amp;) (72 samples, 0.16%)</title><rect x="875.8" y="627.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="878.8" y="638.0"></text>
</g>
<g>
<title>JfrTypeIDs::jfr_use_methodID(Method*) (10 samples, 0.02%)</title><rect x="877.6" y="627.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="880.6" y="638.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (249 samples, 0.54%)</title><rect x="878.2" y="723.0" width="6.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="881.2" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeInt (11 samples, 0.02%)</title><rect x="884.9" y="755.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="887.9" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/StreamSerializerAdapter.write (469 samples, 1.01%)</title><rect x="885.2" y="755.0" width="12.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="888.2" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.write (467 samples, 1.01%)</title><rect x="885.3" y="739.0" width="11.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="888.3" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.write (467 samples, 1.01%)</title><rect x="885.3" y="723.0" width="11.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="888.3" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.writeIdentifiedDataSerializable (36 samples, 0.08%)</title><rect x="885.7" y="707.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="888.7" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeInt (28 samples, 0.06%)</title><rect x="885.8" y="691.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="888.8" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.ensureAvailable (24 samples, 0.05%)</title><rect x="885.9" y="675.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="888.9" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.available (24 samples, 0.05%)</title><rect x="885.9" y="659.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="888.9" y="670.0"></text>
</g>
<g>
<title>itable stub (13 samples, 0.03%)</title><rect x="886.2" y="643.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="889.2" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.writeData (407 samples, 0.88%)</title><rect x="886.8" y="707.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="889.8" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeLong (24 samples, 0.05%)</title><rect x="887.0" y="691.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="890.0" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.writeLong (21 samples, 0.05%)</title><rect x="887.1" y="675.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="890.1" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.writeLong (20 samples, 0.04%)</title><rect x="887.1" y="659.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="890.1" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.writeLongB (20 samples, 0.04%)</title><rect x="887.1" y="643.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="890.1" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.putByte (14 samples, 0.03%)</title><rect x="887.2" y="627.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="890.2" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.putByte (12 samples, 0.03%)</title><rect x="887.3" y="611.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="890.3" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/operations/Backup.writeInternal (363 samples, 0.78%)</title><rect x="887.9" y="691.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="890.9" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/cluster/Address.writeData (24 samples, 0.05%)</title><rect x="888.0" y="675.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="891.0" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeUTF (23 samples, 0.05%)</title><rect x="888.0" y="659.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="891.0" y="670.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (16 samples, 0.03%)</title><rect x="888.2" y="643.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="891.2" y="654.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (16 samples, 0.03%)</title><rect x="888.2" y="627.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="891.2" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeObject (327 samples, 0.70%)</title><rect x="888.8" y="675.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="891.8" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.writeObject (325 samples, 0.70%)</title><rect x="888.8" y="659.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="891.8" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeInt (14 samples, 0.03%)</title><rect x="889.0" y="643.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="892.0" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/StreamSerializerAdapter.write (298 samples, 0.64%)</title><rect x="889.5" y="643.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="892.5" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.write (289 samples, 0.62%)</title><rect x="889.7" y="627.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="892.7" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.write (289 samples, 0.62%)</title><rect x="889.7" y="611.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="892.7" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.writeIdentifiedDataSerializable (49 samples, 0.11%)</title><rect x="889.8" y="595.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="892.8" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeByte (26 samples, 0.06%)</title><rect x="889.9" y="579.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="892.9" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.write (20 samples, 0.04%)</title><rect x="890.1" y="563.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="893.1" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.ensureAvailable (17 samples, 0.04%)</title><rect x="890.2" y="547.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="893.2" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeInt (12 samples, 0.03%)</title><rect x="890.6" y="579.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="893.6" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.writeData (238 samples, 0.51%)</title><rect x="891.0" y="595.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="894.0" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeInt (31 samples, 0.07%)</title><rect x="891.2" y="579.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="894.2" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.ensureAvailable (29 samples, 0.06%)</title><rect x="891.3" y="563.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="894.3" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeLong (12 samples, 0.03%)</title><rect x="892.0" y="579.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="895.0" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeShort (18 samples, 0.04%)</title><rect x="892.3" y="579.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="895.3" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.ensureAvailable (12 samples, 0.03%)</title><rect x="892.5" y="563.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="895.5" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/UUIDSerializationUtil.writeUUID (11 samples, 0.02%)</title><rect x="892.8" y="579.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="895.8" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/PutBackupOperation.writeInternal (156 samples, 0.34%)</title><rect x="893.1" y="579.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="896.1" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/IOUtil.writeData (13 samples, 0.03%)</title><rect x="893.1" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="896.1" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseByteArrayObjectDataOutput.writeData (12 samples, 0.03%)</title><rect x="893.1" y="547.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="896.1" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeData (12 samples, 0.03%)</title><rect x="893.1" y="531.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="896.1" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/Records.writeRecord (60 samples, 0.13%)</title><rect x="893.4" y="563.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="896.4" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeByte (13 samples, 0.03%)</title><rect x="893.4" y="547.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="896.4" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.write (13 samples, 0.03%)</title><rect x="893.4" y="531.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="896.4" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.ensureAvailable (11 samples, 0.02%)</title><rect x="893.4" y="515.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="896.4" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (11 samples, 0.02%)</title><rect x="893.4" y="499.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="896.4" y="510.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/RecordReaderWriter$2.writeRecord (47 samples, 0.10%)</title><rect x="893.7" y="547.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="896.7" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/IOUtil.writeData (10 samples, 0.02%)</title><rect x="893.7" y="531.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="896.7" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseByteArrayObjectDataOutput.writeData (10 samples, 0.02%)</title><rect x="893.7" y="515.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="896.7" y="526.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeInt (12 samples, 0.03%)</title><rect x="894.0" y="531.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="897.0" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.getRawTtl (11 samples, 0.02%)</title><rect x="894.6" y="531.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="897.6" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.readInt (11 samples, 0.02%)</title><rect x="894.6" y="515.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="897.6" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (11 samples, 0.02%)</title><rect x="894.6" y="499.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="897.6" y="510.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/AbstractNamedOperation.writeInternal (83 samples, 0.18%)</title><rect x="894.9" y="563.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="897.9" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataOutput.writeUTF (83 samples, 0.18%)</title><rect x="894.9" y="547.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="897.9" y="558.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (74 samples, 0.16%)</title><rect x="895.1" y="531.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="898.1" y="542.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (74 samples, 0.16%)</title><rect x="895.1" y="515.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="898.1" y="526.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (14 samples, 0.03%)</title><rect x="895.4" y="499.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="898.4" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.02%)</title><rect x="895.4" y="483.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="898.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (10 samples, 0.02%)</title><rect x="896.0" y="499.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="899.0" y="510.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (31 samples, 0.07%)</title><rect x="896.2" y="499.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="899.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (26 samples, 0.06%)</title><rect x="896.4" y="483.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="899.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (26 samples, 0.06%)</title><rect x="896.4" y="467.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="899.4" y="478.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (25 samples, 0.05%)</title><rect x="896.4" y="451.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="899.4" y="462.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (16 samples, 0.03%)</title><rect x="896.6" y="435.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="899.6" y="446.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (12 samples, 0.03%)</title><rect x="896.6" y="419.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="899.6" y="430.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/bufferpool/BufferPoolThreadLocal.get (10 samples, 0.02%)</title><rect x="897.4" y="755.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="900.4" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.02%)</title><rect x="897.4" y="739.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="900.4" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.requestedTotalBackups (13 samples, 0.03%)</title><rect x="897.6" y="883.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="900.6" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationBackupHandler.syncBackups (22 samples, 0.05%)</title><rect x="898.0" y="883.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="901.0" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/InternalPartitionServiceImpl.getMaxAllowedBackupCount (20 samples, 0.04%)</title><rect x="898.0" y="867.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="901.0" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.afterRun (433 samples, 0.93%)</title><rect x="898.6" y="915.0" width="11.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="901.6" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.afterRun (429 samples, 0.92%)</title><rect x="898.6" y="899.0" width="10.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="901.6" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/BasePutOperation.afterRunInternal (375 samples, 0.81%)</title><rect x="898.6" y="883.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="901.6" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/event/MapEventPublisherImpl.publishEvent (68 samples, 0.15%)</title><rect x="898.7" y="867.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="901.7" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/event/EnterpriseMapEventPublisherImpl.publishEvent (68 samples, 0.15%)</title><rect x="898.7" y="851.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="901.7" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapServiceContextImpl.getMapContainer (20 samples, 0.04%)</title><rect x="898.7" y="835.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="901.7" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutSynchronized (20 samples, 0.04%)</title><rect x="898.7" y="819.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="901.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.02%)</title><rect x="899.0" y="803.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="902.0" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/event/EnterpriseMapEventPublisherImpl.toHeapData (28 samples, 0.06%)</title><rect x="899.2" y="835.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="902.2" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toData (28 samples, 0.06%)</title><rect x="899.2" y="819.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="902.2" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toDataInternal (27 samples, 0.06%)</title><rect x="899.2" y="803.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="902.2" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertData (27 samples, 0.06%)</title><rect x="899.2" y="787.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="902.2" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (10 samples, 0.02%)</title><rect x="899.2" y="771.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="902.2" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (10 samples, 0.02%)</title><rect x="899.2" y="755.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="902.2" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.getCurrentMemoryAllocator (17 samples, 0.04%)</title><rect x="899.5" y="771.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="902.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (15 samples, 0.03%)</title><rect x="899.5" y="755.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="902.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (10 samples, 0.02%)</title><rect x="899.6" y="739.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="902.6" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (10 samples, 0.02%)</title><rect x="899.6" y="723.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="902.6" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/event/MapEventPublisherImpl.publishEvent (19 samples, 0.04%)</title><rect x="899.9" y="835.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="902.9" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/event/MapEventPublisherImpl.getRegistrations (17 samples, 0.04%)</title><rect x="900.0" y="819.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="903.0" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/eventservice/impl/EventServiceImpl.getRegistrations (17 samples, 0.04%)</title><rect x="900.0" y="803.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="903.0" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/eventservice/impl/EventServiceImpl.getSegment (17 samples, 0.04%)</title><rect x="900.0" y="787.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="903.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.02%)</title><rect x="900.1" y="771.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="903.1" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.evict (300 samples, 0.65%)</title><rect x="900.4" y="867.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="903.4" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.disposeDeferredBlocks (300 samples, 0.65%)</title><rect x="900.4" y="851.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="903.4" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapServiceContextImpl.getExistingRecordStore (14 samples, 0.03%)</title><rect x="900.5" y="835.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="903.5" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.getExistingRecordStore (14 samples, 0.03%)</title><rect x="900.5" y="819.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="903.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (12 samples, 0.03%)</title><rect x="900.5" y="803.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="903.5" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.disposeDeferredBlocks (284 samples, 0.61%)</title><rect x="900.8" y="835.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="903.8" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.disposeDeferredBlocks (284 samples, 0.61%)</title><rect x="900.8" y="819.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="903.8" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.disposeDeferredBlocks (283 samples, 0.61%)</title><rect x="900.8" y="803.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="903.8" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.disposeDeferredBlocks (283 samples, 0.61%)</title><rect x="900.8" y="787.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="903.8" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.disposeData (272 samples, 0.59%)</title><rect x="901.0" y="771.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="904.0" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.disposeData (272 samples, 0.59%)</title><rect x="901.0" y="755.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="904.0" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.getSize (16 samples, 0.03%)</title><rect x="901.0" y="739.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="904.0" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getAllocatedSize (16 samples, 0.03%)</title><rect x="901.0" y="723.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="904.0" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.getAllocatedSize (10 samples, 0.02%)</title><rect x="901.0" y="707.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="904.0" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.getSizeInternal (10 samples, 0.02%)</title><rect x="901.0" y="691.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="904.0" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.disposeData (256 samples, 0.55%)</title><rect x="901.4" y="739.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="904.4" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.disposeDataInternal (256 samples, 0.55%)</title><rect x="901.4" y="723.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="904.4" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.free (255 samples, 0.55%)</title><rect x="901.4" y="707.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="904.4" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.free (251 samples, 0.54%)</title><rect x="901.4" y="691.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="904.4" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.zeroOut (188 samples, 0.40%)</title><rect x="901.6" y="675.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="904.6" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.setMemory (188 samples, 0.40%)</title><rect x="901.6" y="659.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="904.6" y="670.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (188 samples, 0.40%)</title><rect x="901.6" y="643.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="904.6" y="654.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (188 samples, 0.40%)</title><rect x="901.6" y="627.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="904.6" y="638.0"></text>
</g>
<g>
<title>Unsafe_SetMemory2 (170 samples, 0.37%)</title><rect x="902.1" y="611.0" width="4.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="905.1" y="622.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (155 samples, 0.33%)</title><rect x="902.2" y="595.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="905.2" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isAvailable (11 samples, 0.02%)</title><rect x="906.4" y="675.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="909.4" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isAddressAvailable (11 samples, 0.02%)</title><rect x="906.4" y="659.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="909.4" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (11 samples, 0.02%)</title><rect x="906.4" y="643.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="909.4" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (11 samples, 0.02%)</title><rect x="906.4" y="627.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="909.4" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (10 samples, 0.02%)</title><rect x="906.4" y="611.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="909.4" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.markAvailable (45 samples, 0.10%)</title><rect x="906.7" y="675.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="909.7" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.putByte (43 samples, 0.09%)</title><rect x="906.7" y="659.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="909.7" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.disposeDeferredBlocks (42 samples, 0.09%)</title><rect x="908.2" y="883.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="911.2" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapServiceContextImpl.getExistingRecordStore (20 samples, 0.04%)</title><rect x="908.2" y="867.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="911.2" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.getExistingRecordStore (18 samples, 0.04%)</title><rect x="908.2" y="851.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="911.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (17 samples, 0.04%)</title><rect x="908.2" y="835.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="911.2" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.disposeDeferredBlocks (22 samples, 0.05%)</title><rect x="908.7" y="867.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="911.7" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.disposeDeferredBlocks (22 samples, 0.05%)</title><rect x="908.7" y="851.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="911.7" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.disposeDeferredBlocks (22 samples, 0.05%)</title><rect x="908.7" y="835.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="911.7" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.disposeDeferredBlocks (22 samples, 0.05%)</title><rect x="908.7" y="819.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="911.7" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.poll (19 samples, 0.04%)</title><rect x="908.7" y="803.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="911.7" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (19 samples, 0.04%)</title><rect x="908.7" y="787.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="911.7" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/SetOperation.afterRunInternal (10 samples, 0.02%)</title><rect x="909.2" y="883.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="912.2" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.ensureNoPartitionProblems (61 samples, 0.13%)</title><rect x="909.7" y="931.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="912.7" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/InternalPartitionServiceImpl.getPartition (14 samples, 0.03%)</title><rect x="910.4" y="915.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="913.4" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/InternalPartitionServiceImpl.getPartition (14 samples, 0.03%)</title><rect x="910.4" y="899.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="913.4" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.timeout (103 samples, 0.22%)</title><rect x="911.3" y="931.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="914.3" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl.isCallTimedOut (100 samples, 0.22%)</title><rect x="911.4" y="915.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="914.4" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operations.isJoinOperation (73 samples, 0.16%)</title><rect x="911.8" y="899.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="914.8" y="910.0"></text>
</g>
<g>
<title>java/lang/Class.getClassLoader (63 samples, 0.14%)</title><rect x="912.1" y="883.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="915.1" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (23 samples, 0.05%)</title><rect x="914.0" y="931.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="917.0" y="942.0"></text>
</g>
<g>
<title>gettimeofday (21 samples, 0.05%)</title><rect x="914.0" y="915.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="917.0" y="926.0"></text>
</g>
<g>
<title>[vdso] (17 samples, 0.04%)</title><rect x="914.1" y="899.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="917.1" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.initInvocationTarget (228 samples, 0.49%)</title><rect x="914.7" y="995.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="917.7" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/PartitionInvocation.getInvocationTarget (200 samples, 0.43%)</title><rect x="914.8" y="979.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="917.8" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/PartitionInvocation.getInvocationTarget (200 samples, 0.43%)</title><rect x="914.8" y="963.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="917.8" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/InternalPartitionServiceImpl.getPartition (197 samples, 0.42%)</title><rect x="914.9" y="947.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="917.9" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/InternalPartitionServiceImpl.getPartition (197 samples, 0.42%)</title><rect x="914.9" y="931.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="917.9" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/InternalPartitionImpl.getOwnerReplicaOrNull (172 samples, 0.37%)</title><rect x="915.1" y="915.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="918.1" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionStateManager.getPartitionImpl (19 samples, 0.04%)</title><rect x="919.4" y="915.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="922.4" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/PartitionInvocation.toTargetMember (22 samples, 0.05%)</title><rect x="919.9" y="979.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="922.9" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/PartitionInvocation.toTargetMember (22 samples, 0.05%)</title><rect x="919.9" y="963.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="922.9" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/ClusterServiceImpl.getMember (20 samples, 0.04%)</title><rect x="920.0" y="947.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="923.0" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/MembershipManager.getMember (19 samples, 0.04%)</title><rect x="920.0" y="931.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="923.0" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/MemberMap.getMember (19 samples, 0.04%)</title><rect x="920.0" y="915.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="923.0" y="926.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (11 samples, 0.02%)</title><rect x="920.2" y="899.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="923.2" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/InvocationRegistry.register (199 samples, 0.43%)</title><rect x="920.5" y="995.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="923.5" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.isRetryCandidate (23 samples, 0.05%)</title><rect x="920.7" y="979.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="923.7" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.getCallId (20 samples, 0.04%)</title><rect x="920.8" y="963.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="923.8" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (18 samples, 0.04%)</title><rect x="920.8" y="947.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="923.8" y="958.0"></text>
</g>
<g>
<title>gettimeofday (18 samples, 0.04%)</title><rect x="920.8" y="931.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="923.8" y="942.0"></text>
</g>
<g>
<title>[vdso] (16 samples, 0.03%)</title><rect x="920.9" y="915.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="923.9" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/sequence/AbstractCallIdSequence.next (17 samples, 0.04%)</title><rect x="921.3" y="979.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="924.3" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/sequence/AbstractCallIdSequence.hasSpace (11 samples, 0.02%)</title><rect x="921.5" y="963.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="924.5" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/sequence/AbstractCallIdSequence.concurrentInvocations (11 samples, 0.02%)</title><rect x="921.5" y="947.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="924.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.put (149 samples, 0.32%)</title><rect x="921.7" y="979.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="924.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putVal (149 samples, 0.32%)</title><rect x="921.7" y="963.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="924.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.addCount (34 samples, 0.07%)</title><rect x="921.8" y="947.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="924.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.casTabAt (52 samples, 0.11%)</title><rect x="922.6" y="947.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="925.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.initTable (10 samples, 0.02%)</title><rect x="924.0" y="947.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="927.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (50 samples, 0.11%)</title><rect x="924.2" y="947.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="927.2" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/PartitionInvocation.&lt;init&gt; (78 samples, 0.17%)</title><rect x="925.6" y="1043.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="928.6" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.&lt;init&gt; (76 samples, 0.16%)</title><rect x="925.7" y="1027.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="928.7" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/Invocation.getCallTimeoutMillis (18 samples, 0.04%)</title><rect x="926.3" y="1011.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="929.3" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/InvocationFuture.&lt;init&gt; (16 samples, 0.03%)</title><rect x="926.8" y="1011.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="929.8" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (17 samples, 0.04%)</title><rect x="927.2" y="1011.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="930.2" y="1022.0"></text>
</g>
<g>
<title>gettimeofday (17 samples, 0.04%)</title><rect x="927.2" y="995.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="930.2" y="1006.0"></text>
</g>
<g>
<title>[vdso] (14 samples, 0.03%)</title><rect x="927.3" y="979.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="930.3" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.thenApplyAsync (205 samples, 0.44%)</title><rect x="928.3" y="1075.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="931.3" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.thenApplyAsync (205 samples, 0.44%)</title><rect x="928.3" y="1059.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="931.3" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.isDone (16 samples, 0.03%)</title><rect x="928.4" y="1043.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="931.4" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.isDone (13 samples, 0.03%)</title><rect x="928.4" y="1027.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="931.4" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.unblockApply (185 samples, 0.40%)</title><rect x="928.8" y="1043.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="931.8" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil$1.execute (166 samples, 0.36%)</title><rect x="928.8" y="1027.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="931.8" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture$$Lambda$1034/116518432.run (135 samples, 0.29%)</title><rect x="928.8" y="1011.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="931.8" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture.lambda$unblockApply$1 (135 samples, 0.29%)</title><rect x="928.8" y="995.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="931.8" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask$$Lambda$1026/235173606.apply (133 samples, 0.29%)</title><rect x="928.8" y="979.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="931.8" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/AbstractMapPutMessageTask.processResponseBeforeSending (67 samples, 0.14%)</title><rect x="928.8" y="963.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="931.8" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.getService (15 samples, 0.03%)</title><rect x="928.9" y="947.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="931.9" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.getService (13 samples, 0.03%)</title><rect x="928.9" y="931.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="931.9" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getService (13 samples, 0.03%)</title><rect x="928.9" y="915.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="931.9" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getServiceInfo (12 samples, 0.03%)</title><rect x="929.0" y="899.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="932.0" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/monitor/impl/LocalMapStatsImpl.incrementPutLatencyNanos (13 samples, 0.03%)</title><rect x="929.3" y="947.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="932.3" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/monitor/impl/LocalMapStatsImpl.incrementPutLatencyNanos (13 samples, 0.03%)</title><rect x="929.3" y="931.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="932.3" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.setMax (12 samples, 0.03%)</title><rect x="929.3" y="915.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="932.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.get (12 samples, 0.03%)</title><rect x="929.3" y="899.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="932.3" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/LocalMapStatsProvider.getLocalMapStatsImpl (29 samples, 0.06%)</title><rect x="929.6" y="947.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="932.6" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutIfAbsent (20 samples, 0.04%)</title><rect x="929.8" y="931.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="932.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (20 samples, 0.04%)</title><rect x="929.8" y="915.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="932.8" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/AbstractMapSetMessageTask.processResponseBeforeSending (15 samples, 0.03%)</title><rect x="930.6" y="963.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="933.6" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapGetMessageTask.processResponseBeforeSending (50 samples, 0.11%)</title><rect x="930.9" y="963.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="933.9" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/LocalMapStatsProvider.getLocalMapStatsImpl (23 samples, 0.05%)</title><rect x="931.4" y="947.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="934.4" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutIfAbsent (15 samples, 0.03%)</title><rect x="931.5" y="931.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="934.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (15 samples, 0.03%)</title><rect x="931.5" y="915.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="934.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (31 samples, 0.07%)</title><rect x="932.3" y="1011.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="935.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (31 samples, 0.07%)</title><rect x="932.3" y="995.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="935.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (30 samples, 0.06%)</title><rect x="932.3" y="979.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="935.3" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask$$Lambda$1030/2045516144.accept (30 samples, 0.06%)</title><rect x="932.3" y="963.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="935.3" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask.sendResponseOrHandleFailure (30 samples, 0.06%)</title><rect x="932.3" y="947.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="935.3" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.sendResponse (30 samples, 0.06%)</title><rect x="932.3" y="931.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="935.3" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.sendClientMessage (23 samples, 0.05%)</title><rect x="932.4" y="915.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="935.4" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/TcpIpConnection.write (23 samples, 0.05%)</title><rect x="932.4" y="899.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="935.4" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioChannel.write (23 samples, 0.05%)</title><rect x="932.4" y="883.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="935.4" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.write (23 samples, 0.05%)</title><rect x="932.4" y="867.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="935.4" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/527829831.linkToTargetMethod (11 samples, 0.02%)</title><rect x="933.2" y="1027.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="936.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1404928347.invokeStatic_L3_L (11 samples, 0.02%)</title><rect x="933.2" y="1011.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="936.2" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/AbstractInvocationFuture$$Lambda$1034/116518432.get$Lambda (11 samples, 0.02%)</title><rect x="933.2" y="995.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="936.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1816089958.linkToTargetMethod (54 samples, 0.12%)</title><rect x="933.5" y="1075.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="936.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/917142466.invokeStatic_L_L (53 samples, 0.11%)</title><rect x="933.5" y="1059.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="936.5" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask$$Lambda$1026/235173606.get$Lambda (40 samples, 0.09%)</title><rect x="933.5" y="1043.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="936.5" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractPartitionMessageTask.processInternal (13 samples, 0.03%)</title><rect x="934.0" y="1027.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="937.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenCompleteAsync (1,112 samples, 2.40%)</title><rect x="934.9" y="1075.0" width="28.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="937.9" y="1086.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1,112 samples, 2.40%)</title><rect x="934.9" y="1059.0" width="28.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="937.9" y="1070.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1,097 samples, 2.36%)</title><rect x="935.2" y="1043.0" width="27.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="938.2" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1,097 samples, 2.36%)</title><rect x="935.2" y="1027.0" width="27.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="938.2" y="1038.0">j..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask$$Lambda$1030/2045516144.accept (34 samples, 0.07%)</title><rect x="935.2" y="1011.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="938.2" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask.sendResponseOrHandleFailure (34 samples, 0.07%)</title><rect x="935.2" y="995.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="938.2" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.sendResponse (34 samples, 0.07%)</title><rect x="935.2" y="979.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="938.2" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.sendClientMessage (11 samples, 0.02%)</title><rect x="935.3" y="963.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="938.3" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapSetMessageTask.encodeResponse (20 samples, 0.04%)</title><rect x="935.6" y="963.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="938.6" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/MapSetCodec.encodeResponse (20 samples, 0.04%)</title><rect x="935.6" y="947.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="938.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1,063 samples, 2.29%)</title><rect x="936.1" y="1011.0" width="27.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="939.1" y="1022.0">j..</text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil$1.execute (1,060 samples, 2.28%)</title><rect x="936.1" y="995.0" width="26.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="939.1" y="1006.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (1,044 samples, 2.25%)</title><rect x="936.5" y="979.0" width="26.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="939.5" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1,043 samples, 2.25%)</title><rect x="936.5" y="963.0" width="26.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="939.5" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1,040 samples, 2.24%)</title><rect x="936.6" y="947.0" width="26.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="939.6" y="958.0">j..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask$$Lambda$1030/2045516144.accept (1,033 samples, 2.22%)</title><rect x="936.8" y="931.0" width="26.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="939.8" y="942.0">c..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask.sendResponseOrHandleFailure (1,032 samples, 2.22%)</title><rect x="936.8" y="915.0" width="26.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="939.8" y="926.0">c..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.sendResponse (1,031 samples, 2.22%)</title><rect x="936.8" y="899.0" width="26.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="939.8" y="910.0">c..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.sendClientMessage (998 samples, 2.15%)</title><rect x="937.2" y="883.0" width="25.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="940.2" y="894.0">c..</text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/ClientMessage.setCorrelationId (14 samples, 0.03%)</title><rect x="937.4" y="867.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="940.4" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/TcpIpConnection.write (974 samples, 2.10%)</title><rect x="937.8" y="867.0" width="24.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="940.8" y="878.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioChannel.write (954 samples, 2.05%)</title><rect x="938.3" y="851.0" width="24.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="941.3" y="862.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.write (950 samples, 2.05%)</title><rect x="938.4" y="835.0" width="24.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="941.4" y="846.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.executePipeline (755 samples, 1.63%)</title><rect x="940.0" y="819.0" width="19.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="943.0" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioPipeline.registerOp (120 samples, 0.26%)</title><rect x="940.8" y="803.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="943.8" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (108 samples, 0.23%)</title><rect x="941.1" y="787.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="944.1" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.ensureValid (18 samples, 0.04%)</title><rect x="941.2" y="771.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="944.2" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (89 samples, 0.19%)</title><rect x="941.6" y="771.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="944.6" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetInterestOps (87 samples, 0.19%)</title><rect x="941.7" y="755.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="944.7" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.putEventOps (87 samples, 0.19%)</title><rect x="941.7" y="739.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="944.7" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.setInterest (43 samples, 0.09%)</title><rect x="942.8" y="723.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="945.8" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (592 samples, 1.28%)</title><rect x="943.9" y="803.0" width="15.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="946.9" y="814.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (10 samples, 0.02%)</title><rect x="945.1" y="787.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="948.1" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (535 samples, 1.15%)</title><rect x="945.4" y="787.0" width="13.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="948.4" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (534 samples, 1.15%)</title><rect x="945.4" y="771.0" width="13.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="948.4" y="782.0"></text>
</g>
<g>
<title>write (522 samples, 1.12%)</title><rect x="945.7" y="755.0" width="13.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="948.7" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (487 samples, 1.05%)</title><rect x="946.6" y="739.0" width="12.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="949.6" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (487 samples, 1.05%)</title><rect x="946.6" y="723.0" width="12.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="949.6" y="734.0"></text>
</g>
<g>
<title>sys_write (439 samples, 0.95%)</title><rect x="947.5" y="707.0" width="11.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="950.5" y="718.0"></text>
</g>
<g>
<title>__fdget_pos (63 samples, 0.14%)</title><rect x="947.6" y="691.0" width="1.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="950.6" y="702.0"></text>
</g>
<g>
<title>__fget_light (63 samples, 0.14%)</title><rect x="947.6" y="675.0" width="1.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="950.6" y="686.0"></text>
</g>
<g>
<title>__fget (47 samples, 0.10%)</title><rect x="948.0" y="659.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="951.0" y="670.0"></text>
</g>
<g>
<title>fput (14 samples, 0.03%)</title><rect x="949.2" y="691.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="952.2" y="702.0"></text>
</g>
<g>
<title>vfs_write (358 samples, 0.77%)</title><rect x="949.6" y="691.0" width="9.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="952.6" y="702.0"></text>
</g>
<g>
<title>__vfs_write (352 samples, 0.76%)</title><rect x="949.7" y="675.0" width="8.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="952.7" y="686.0"></text>
</g>
<g>
<title>pipe_write (344 samples, 0.74%)</title><rect x="949.9" y="659.0" width="8.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="952.9" y="670.0"></text>
</g>
<g>
<title>__wake_up_common_lock (265 samples, 0.57%)</title><rect x="950.4" y="643.0" width="6.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="953.4" y="654.0"></text>
</g>
<g>
<title>__lock_text_start (262 samples, 0.56%)</title><rect x="950.4" y="627.0" width="6.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="953.4" y="638.0"></text>
</g>
<g>
<title>copy_page_from_iter (17 samples, 0.04%)</title><rect x="957.1" y="643.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="960.1" y="654.0"></text>
</g>
<g>
<title>mutex_lock (20 samples, 0.04%)</title><rect x="957.7" y="643.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="960.7" y="654.0"></text>
</g>
<g>
<title>mutex_unlock (16 samples, 0.03%)</title><rect x="958.2" y="643.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="961.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.offer (119 samples, 0.26%)</title><rect x="959.2" y="819.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="962.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.casNext (115 samples, 0.25%)</title><rect x="959.3" y="803.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="962.3" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapGetMessageTask.encodeResponse (10 samples, 0.02%)</title><rect x="962.6" y="883.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="965.6" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.interceptAfter (17 samples, 0.04%)</title><rect x="963.5" y="1091.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="966.5" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractAsyncMessageTask.processMessage (11 samples, 0.02%)</title><rect x="963.6" y="1075.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="966.6" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.validateNodeStart (118 samples, 0.25%)</title><rect x="964.1" y="1091.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="967.1" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/EnterpriseNodeExtension.isStartCompleted (93 samples, 0.20%)</title><rect x="964.7" y="1075.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="967.7" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/instance/impl/DefaultNodeExtension.isStartCompleted (89 samples, 0.19%)</title><rect x="964.8" y="1059.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="967.8" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/ClusterServiceImpl.isJoined (17 samples, 0.04%)</title><rect x="966.6" y="1043.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="969.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (16 samples, 0.03%)</title><rect x="966.6" y="1027.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="969.6" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapGetMessageTask.decodeClientMessage (49 samples, 0.11%)</title><rect x="967.3" y="1091.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="970.3" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapGetMessageTask.decodeClientMessage (49 samples, 0.11%)</title><rect x="967.3" y="1075.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="970.3" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/MapGetCodec.decodeRequest (49 samples, 0.11%)</title><rect x="967.3" y="1059.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="970.3" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/builtin/StringCodec.decode (39 samples, 0.08%)</title><rect x="967.5" y="1043.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="970.5" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/builtin/StringCodec.decode (39 samples, 0.08%)</title><rect x="967.5" y="1027.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="970.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (21 samples, 0.05%)</title><rect x="967.9" y="1011.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="970.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (20 samples, 0.04%)</title><rect x="967.9" y="995.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="970.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (20 samples, 0.04%)</title><rect x="967.9" y="979.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="970.9" y="990.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (10 samples, 0.02%)</title><rect x="968.2" y="963.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="971.2" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapPutMessageTask.decodeClientMessage (69 samples, 0.15%)</title><rect x="968.5" y="1091.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="971.5" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapPutMessageTask.decodeClientMessage (69 samples, 0.15%)</title><rect x="968.5" y="1075.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="971.5" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/MapPutCodec.decodeRequest (68 samples, 0.15%)</title><rect x="968.5" y="1059.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="971.5" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/builtin/FixedSizeTypesCodec.decodeLong (45 samples, 0.10%)</title><rect x="968.8" y="1043.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="971.8" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readLongL (45 samples, 0.10%)</title><rect x="968.8" y="1027.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="971.8" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readLongL (45 samples, 0.10%)</title><rect x="968.8" y="1011.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="971.8" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (42 samples, 0.09%)</title><rect x="968.8" y="995.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="971.8" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (35 samples, 0.08%)</title><rect x="969.0" y="979.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="972.0" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/builtin/StringCodec.decode (13 samples, 0.03%)</title><rect x="969.9" y="1043.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="972.9" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/builtin/StringCodec.decode (13 samples, 0.03%)</title><rect x="969.9" y="1027.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="972.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (13 samples, 0.03%)</title><rect x="969.9" y="1011.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="972.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (13 samples, 0.03%)</title><rect x="969.9" y="995.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="972.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (13 samples, 0.03%)</title><rect x="969.9" y="979.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="972.9" y="990.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (12 samples, 0.03%)</title><rect x="969.9" y="963.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="972.9" y="974.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (12 samples, 0.03%)</title><rect x="969.9" y="947.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="972.9" y="958.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (12 samples, 0.03%)</title><rect x="969.9" y="931.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="972.9" y="942.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (12 samples, 0.03%)</title><rect x="969.9" y="915.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="972.9" y="926.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (12 samples, 0.03%)</title><rect x="969.9" y="899.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="972.9" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapSetMessageTask.decodeClientMessage (11 samples, 0.02%)</title><rect x="970.3" y="1091.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="973.3" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/map/MapSetMessageTask.decodeClientMessage (11 samples, 0.02%)</title><rect x="970.3" y="1075.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="973.3" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.toObject (1,362 samples, 2.93%)</title><rect x="971.3" y="1123.0" width="34.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="974.3" y="1134.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.toObject (1,358 samples, 2.93%)</title><rect x="971.4" y="1107.0" width="34.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="974.4" y="1118.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseBufferPool.takeInputBuffer (17 samples, 0.04%)</title><rect x="971.5" y="1091.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="974.5" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.createObjectDataInput (15 samples, 0.03%)</title><rect x="971.6" y="1075.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="974.6" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseByteArrayInputOutputFactory.createInput (13 samples, 0.03%)</title><rect x="971.6" y="1059.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="974.6" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseByteArrayInputOutputFactory.createInput (13 samples, 0.03%)</title><rect x="971.6" y="1043.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="974.6" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseByteArrayObjectDataInput.&lt;init&gt; (11 samples, 0.02%)</title><rect x="971.7" y="1027.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="974.7" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.&lt;init&gt; (10 samples, 0.02%)</title><rect x="971.7" y="1011.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="974.7" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/StreamSerializerAdapter.read (1,283 samples, 2.76%)</title><rect x="972.2" y="1091.0" width="32.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="975.2" y="1102.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.read (1,283 samples, 2.76%)</title><rect x="972.2" y="1075.0" width="32.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="975.2" y="1086.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.read (1,283 samples, 2.76%)</title><rect x="972.2" y="1059.0" width="32.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="975.2" y="1070.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.doRead (1,283 samples, 2.76%)</title><rect x="972.2" y="1043.0" width="32.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="975.2" y="1054.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.readIdentifiedDataSerializable (1,281 samples, 2.76%)</title><rect x="972.2" y="1027.0" width="32.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="975.2" y="1038.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (13 samples, 0.03%)</title><rect x="972.5" y="1011.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="975.5" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (12 samples, 0.03%)</title><rect x="972.5" y="995.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="975.5" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readInt (12 samples, 0.03%)</title><rect x="972.5" y="979.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="975.5" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readInt (12 samples, 0.03%)</title><rect x="972.5" y="963.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="975.5" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readIntB (12 samples, 0.03%)</title><rect x="972.5" y="947.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="975.5" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (10 samples, 0.02%)</title><rect x="972.5" y="931.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="975.5" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.createIdentifiedDataSerializable (43 samples, 0.09%)</title><rect x="972.8" y="1011.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="975.8" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/SpiDataSerializerHook$1.create (11 samples, 0.02%)</title><rect x="973.6" y="995.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="976.6" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/VersionedObjectDataInput.setVersion (20 samples, 0.04%)</title><rect x="973.9" y="1011.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="976.9" y="1022.0"></text>
</g>
<g>
<title>itable stub (14 samples, 0.03%)</title><rect x="974.0" y="995.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="977.0" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.readData (1,194 samples, 2.57%)</title><rect x="974.4" y="1011.0" width="30.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="977.4" y="1022.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readLong (19 samples, 0.04%)</title><rect x="975.0" y="995.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="978.0" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readLong (19 samples, 0.04%)</title><rect x="975.0" y="979.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="978.0" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readLong (19 samples, 0.04%)</title><rect x="975.0" y="963.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="978.0" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readLong (19 samples, 0.04%)</title><rect x="975.0" y="947.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="978.0" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readLongB (12 samples, 0.03%)</title><rect x="975.2" y="931.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="978.2" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (11 samples, 0.02%)</title><rect x="975.2" y="915.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="978.2" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/operations/Backup.readInternal (1,144 samples, 2.46%)</title><rect x="975.6" y="995.0" width="29.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="978.6" y="1006.0">co..</text>
</g>
<g>
<title>com/hazelcast/cluster/Address.readData (32 samples, 0.07%)</title><rect x="976.0" y="979.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="979.0" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readUTF (25 samples, 0.05%)</title><rect x="976.1" y="963.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="979.1" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (10 samples, 0.02%)</title><rect x="976.2" y="947.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="979.2" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (10 samples, 0.02%)</title><rect x="976.2" y="931.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="979.2" y="942.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (14 samples, 0.03%)</title><rect x="976.4" y="947.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="979.4" y="958.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (12 samples, 0.03%)</title><rect x="976.5" y="931.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="979.5" y="942.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (10 samples, 0.02%)</title><rect x="976.5" y="915.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="979.5" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readBoolean (15 samples, 0.03%)</title><rect x="976.8" y="979.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="979.8" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.read (13 samples, 0.03%)</title><rect x="976.8" y="963.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="979.8" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readObject (1,084 samples, 2.33%)</title><rect x="977.2" y="979.0" width="27.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="980.2" y="990.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/AbstractSerializationService.readObject (1,084 samples, 2.33%)</title><rect x="977.2" y="963.0" width="27.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="980.2" y="974.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (20 samples, 0.04%)</title><rect x="977.7" y="947.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="980.7" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (18 samples, 0.04%)</title><rect x="977.7" y="931.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="980.7" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readInt (16 samples, 0.03%)</title><rect x="977.8" y="915.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="980.8" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readInt (15 samples, 0.03%)</title><rect x="977.8" y="899.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="980.8" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readIntB (14 samples, 0.03%)</title><rect x="977.8" y="883.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="980.8" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/StreamSerializerAdapter.read (1,043 samples, 2.25%)</title><rect x="978.2" y="947.0" width="26.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="981.2" y="958.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.read (1,043 samples, 2.25%)</title><rect x="978.2" y="931.0" width="26.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="981.2" y="942.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.read (1,043 samples, 2.25%)</title><rect x="978.2" y="915.0" width="26.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="981.2" y="926.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.doRead (1,043 samples, 2.25%)</title><rect x="978.2" y="899.0" width="26.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="981.2" y="910.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.readIdentifiedDataSerializable (1,043 samples, 2.25%)</title><rect x="978.2" y="883.0" width="26.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="981.2" y="894.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseDataSerializableSerializer.createIdentifiedDataSerializable (48 samples, 0.10%)</title><rect x="978.5" y="867.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="981.5" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ArrayDataSerializableFactory.create (27 samples, 0.06%)</title><rect x="978.9" y="851.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="981.9" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.readData (974 samples, 2.10%)</title><rect x="979.9" y="867.0" width="24.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="982.9" y="878.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readLong (17 samples, 0.04%)</title><rect x="980.1" y="851.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="983.1" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readLong (16 samples, 0.03%)</title><rect x="980.1" y="835.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="983.1" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readLong (16 samples, 0.03%)</title><rect x="980.1" y="819.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="983.1" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readLong (15 samples, 0.03%)</title><rect x="980.1" y="803.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="983.1" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/PutBackupOperation.readInternal (948 samples, 2.04%)</title><rect x="980.5" y="851.0" width="24.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="983.5" y="862.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/nio/IOUtil.readData (10 samples, 0.02%)</title><rect x="980.7" y="835.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="983.7" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readData (10 samples, 0.02%)</title><rect x="980.7" y="819.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="983.7" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readByteArray (10 samples, 0.02%)</title><rect x="980.7" y="803.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="983.7" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/Records.readRecord (428 samples, 0.92%)</title><rect x="981.0" y="835.0" width="10.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="984.0" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/RecordReaderWriter$2.readRecord (428 samples, 0.92%)</title><rect x="981.0" y="819.0" width="10.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="984.0" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/IOUtil.readData (56 samples, 0.12%)</title><rect x="981.1" y="803.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="984.1" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readData (56 samples, 0.12%)</title><rect x="981.1" y="787.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="984.1" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readByteArray (54 samples, 0.12%)</title><rect x="981.1" y="771.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="984.1" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (20 samples, 0.04%)</title><rect x="981.9" y="755.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="984.9" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readInt (16 samples, 0.03%)</title><rect x="982.0" y="739.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="985.0" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.readInt (14 samples, 0.03%)</title><rect x="982.0" y="723.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="985.0" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readInt (14 samples, 0.03%)</title><rect x="982.0" y="707.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="985.0" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.readIntB (14 samples, 0.03%)</title><rect x="982.0" y="691.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="985.0" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (10 samples, 0.02%)</title><rect x="982.1" y="675.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="985.1" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.getByte (10 samples, 0.02%)</title><rect x="982.1" y="659.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="985.1" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/DataRecordWithStats.&lt;init&gt; (365 samples, 0.79%)</title><rect x="982.6" y="803.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="985.6" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/AbstractRecordWithStats.&lt;init&gt; (353 samples, 0.76%)</title><rect x="982.9" y="787.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="985.9" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/AbstractRecord.&lt;init&gt; (353 samples, 0.76%)</title><rect x="982.9" y="771.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="985.9" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (340 samples, 0.73%)</title><rect x="983.2" y="755.0" width="8.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="986.2" y="766.0"></text>
</g>
<g>
<title>ret_from_intr (15 samples, 0.03%)</title><rect x="991.4" y="739.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="994.4" y="750.0"></text>
</g>
<g>
<title>do_IRQ (15 samples, 0.03%)</title><rect x="991.4" y="723.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="994.4" y="734.0"></text>
</g>
<g>
<title>irq_exit (15 samples, 0.03%)</title><rect x="991.4" y="707.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="994.4" y="718.0"></text>
</g>
<g>
<title>__softirqentry_text_start (15 samples, 0.03%)</title><rect x="991.4" y="691.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="994.4" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/AbstractNamedOperation.readInternal (503 samples, 1.08%)</title><rect x="991.8" y="835.0" width="12.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="994.8" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/ByteArrayObjectDataInput.readUTF (501 samples, 1.08%)</title><rect x="991.9" y="819.0" width="12.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="994.9" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (498 samples, 1.07%)</title><rect x="992.0" y="803.0" width="12.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="995.0" y="814.0"></text>
</g>
<g>
<title>java/lang/String.checkBounds (10 samples, 0.02%)</title><rect x="992.1" y="787.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="995.1" y="798.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (483 samples, 1.04%)</title><rect x="992.3" y="787.0" width="12.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="995.3" y="798.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (442 samples, 0.95%)</title><rect x="993.4" y="771.0" width="11.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="996.4" y="782.0"></text>
</g>
<g>
<title>ret_from_intr (13 samples, 0.03%)</title><rect x="1001.7" y="755.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1004.7" y="766.0"></text>
</g>
<g>
<title>do_IRQ (13 samples, 0.03%)</title><rect x="1001.7" y="739.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1004.7" y="750.0"></text>
</g>
<g>
<title>irq_exit (13 samples, 0.03%)</title><rect x="1001.7" y="723.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1004.7" y="734.0"></text>
</g>
<g>
<title>__softirqentry_text_start (13 samples, 0.03%)</title><rect x="1001.7" y="707.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1004.7" y="718.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (103 samples, 0.22%)</title><rect x="1002.0" y="755.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1005.0" y="766.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (103 samples, 0.22%)</title><rect x="1002.0" y="739.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1005.0" y="750.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (102 samples, 0.22%)</title><rect x="1002.0" y="723.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1005.0" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (81 samples, 0.17%)</title><rect x="1002.0" y="707.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1005.0" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (80 samples, 0.17%)</title><rect x="1002.1" y="691.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1005.1" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (62 samples, 0.13%)</title><rect x="1002.5" y="675.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1005.5" y="686.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (61 samples, 0.13%)</title><rect x="1002.5" y="659.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1005.5" y="670.0"></text>
</g>
<g>
<title>JfrTraceEvent&lt;EventAllocObjectInNewTLAB&gt;::writeEvent() (61 samples, 0.13%)</title><rect x="1002.5" y="643.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1005.5" y="654.0"></text>
</g>
<g>
<title>JfrStackTraceRepository::record(int) (59 samples, 0.13%)</title><rect x="1002.5" y="627.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1005.5" y="638.0"></text>
</g>
<g>
<title>JfrStackTrace::record(JavaThread*, int) (40 samples, 0.09%)</title><rect x="1002.6" y="611.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1005.6" y="622.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (10 samples, 0.02%)</title><rect x="1003.2" y="595.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1006.2" y="606.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (20 samples, 0.04%)</title><rect x="1004.1" y="707.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1007.1" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/bufferpool/BufferPoolThreadLocal.get (30 samples, 0.06%)</title><rect x="1004.8" y="1091.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1007.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.02%)</title><rect x="1005.2" y="1075.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1008.2" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/usercodedeployment/impl/ClassLocator.onStartDeserialization (10 samples, 0.02%)</title><rect x="1005.6" y="1091.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1008.6" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/usercodedeployment/impl/ThreadLocalClassCache.onStartDeserialization (10 samples, 0.02%)</title><rect x="1005.6" y="1075.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1008.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.02%)</title><rect x="1005.6" y="1059.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1008.6" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.call (1,189 samples, 2.56%)</title><rect x="1006.0" y="1123.0" width="30.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1009.0" y="1134.0">co..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.call (1,185 samples, 2.55%)</title><rect x="1006.1" y="1107.0" width="30.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1009.1" y="1118.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapPartitionDestroyOperation.run (1,185 samples, 2.55%)</title><rect x="1006.1" y="1091.0" width="30.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1009.1" y="1102.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/EnterprisePartitionContainer.destroyMap (1,182 samples, 2.55%)</title><rect x="1006.2" y="1075.0" width="30.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1009.2" y="1086.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.destroyMap (1,182 samples, 2.55%)</title><rect x="1006.2" y="1059.0" width="30.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1009.2" y="1070.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.destroy (1,174 samples, 2.53%)</title><rect x="1006.3" y="1043.0" width="29.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1009.3" y="1054.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.clearPartition (1,174 samples, 2.53%)</title><rect x="1006.3" y="1027.0" width="29.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1009.3" y="1038.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.destroyStorageAfterClear (1,165 samples, 2.51%)</title><rect x="1006.6" y="1011.0" width="29.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1009.6" y="1022.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.clearStorage (1,157 samples, 2.49%)</title><rect x="1006.6" y="995.0" width="29.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1009.6" y="1006.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.clear (1,153 samples, 2.48%)</title><rect x="1006.7" y="979.0" width="29.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1009.7" y="990.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.clear (1,151 samples, 2.48%)</title><rect x="1006.7" y="963.0" width="29.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1009.7" y="974.0">co..</text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap$KeyIter.&lt;init&gt; (30 samples, 0.06%)</title><rect x="1006.7" y="947.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1009.7" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap$SlotIter.&lt;init&gt; (30 samples, 0.06%)</title><rect x="1006.7" y="931.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1009.7" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap$SlotIter.&lt;init&gt; (30 samples, 0.06%)</title><rect x="1006.7" y="915.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1009.7" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap$SlotIter.advance (28 samples, 0.06%)</title><rect x="1006.8" y="899.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1009.8" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.access$600 (17 samples, 0.04%)</title><rect x="1007.1" y="883.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1010.1" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap$SlotIter.nextSlot (26 samples, 0.06%)</title><rect x="1007.5" y="947.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1010.5" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap$SlotIter.advance (23 samples, 0.05%)</title><rect x="1007.6" y="931.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1010.6" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BehmSlotAccessor.isAssigned (13 samples, 0.03%)</title><rect x="1007.8" y="915.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1010.8" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap$SlotIter.remove (1,093 samples, 2.35%)</title><rect x="1008.2" y="947.0" width="27.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1011.2" y="958.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap$KeyIter.removeInternal (1,093 samples, 2.35%)</title><rect x="1008.2" y="931.0" width="27.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1011.2" y="942.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap$SlotIter.removeInternal (1,093 samples, 2.35%)</title><rect x="1008.2" y="915.0" width="27.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1011.2" y="926.0">c..</text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.access$500 (11 samples, 0.02%)</title><rect x="1008.5" y="899.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1011.5" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.shiftConflictingKeys (11 samples, 0.02%)</title><rect x="1008.5" y="883.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1011.5" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.dispose (785 samples, 1.69%)</title><rect x="1008.7" y="899.0" width="20.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1011.7" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.dispose (785 samples, 1.69%)</title><rect x="1008.7" y="883.0" width="20.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1011.7" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.dispose (785 samples, 1.69%)</title><rect x="1008.7" y="867.0" width="20.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1011.7" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.disposeValue (417 samples, 0.90%)</title><rect x="1008.8" y="851.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1011.8" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.disposeData (415 samples, 0.89%)</title><rect x="1008.8" y="835.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1011.8" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.disposeData (413 samples, 0.89%)</title><rect x="1008.8" y="819.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1011.8" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.disposeData (408 samples, 0.88%)</title><rect x="1008.9" y="803.0" width="10.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1011.9" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.disposeDataInternal (408 samples, 0.88%)</title><rect x="1008.9" y="787.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1011.9" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.free (401 samples, 0.86%)</title><rect x="1009.1" y="771.0" width="10.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1012.1" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.free (400 samples, 0.86%)</title><rect x="1009.1" y="755.0" width="10.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1012.1" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (269 samples, 0.58%)</title><rect x="1009.1" y="739.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1012.1" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (212 samples, 0.46%)</title><rect x="1009.1" y="723.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1012.1" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (122 samples, 0.26%)</title><rect x="1011.2" y="707.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1014.2" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (91 samples, 0.20%)</title><rect x="1011.5" y="691.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1014.5" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (46 samples, 0.10%)</title><rect x="1012.5" y="675.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1015.5" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (23 samples, 0.05%)</title><rect x="1012.7" y="659.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1015.7" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.release (16 samples, 0.03%)</title><rect x="1013.3" y="659.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1016.3" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.compact (11 samples, 0.02%)</title><rect x="1013.4" y="643.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1016.4" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.release (21 samples, 0.05%)</title><rect x="1013.8" y="691.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1016.8" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.compact (13 samples, 0.03%)</title><rect x="1014.0" y="675.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1017.0" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.release (57 samples, 0.12%)</title><rect x="1014.5" y="723.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1017.5" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.compact (21 samples, 0.05%)</title><rect x="1015.2" y="707.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1018.2" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (10 samples, 0.02%)</title><rect x="1015.2" y="691.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1018.2" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.zeroOut (89 samples, 0.19%)</title><rect x="1015.9" y="739.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1018.9" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.setMemory (89 samples, 0.19%)</title><rect x="1015.9" y="723.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1018.9" y="734.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (89 samples, 0.19%)</title><rect x="1015.9" y="707.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1018.9" y="718.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (89 samples, 0.19%)</title><rect x="1015.9" y="691.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1018.9" y="702.0"></text>
</g>
<g>
<title>Unsafe_SetMemory2 (89 samples, 0.19%)</title><rect x="1015.9" y="675.0" width="2.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1018.9" y="686.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (85 samples, 0.18%)</title><rect x="1015.9" y="659.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1018.9" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isAvailable (32 samples, 0.07%)</title><rect x="1018.2" y="739.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1021.2" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isAddressAvailable (32 samples, 0.07%)</title><rect x="1018.2" y="723.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1021.2" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (32 samples, 0.07%)</title><rect x="1018.2" y="707.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1021.2" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (32 samples, 0.07%)</title><rect x="1018.2" y="691.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1021.2" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (32 samples, 0.07%)</title><rect x="1018.2" y="675.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1021.2" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (32 samples, 0.07%)</title><rect x="1018.2" y="659.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1021.2" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (32 samples, 0.07%)</title><rect x="1018.2" y="643.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1021.2" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.markAvailable (10 samples, 0.02%)</title><rect x="1019.0" y="739.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1022.0" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.putByte (10 samples, 0.02%)</title><rect x="1019.0" y="723.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1022.0" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.free (362 samples, 0.78%)</title><rect x="1019.4" y="851.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1022.4" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.free (362 samples, 0.78%)</title><rect x="1019.4" y="835.0" width="9.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1022.4" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (316 samples, 0.68%)</title><rect x="1019.5" y="819.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1022.5" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (256 samples, 0.55%)</title><rect x="1019.5" y="803.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1022.5" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (124 samples, 0.27%)</title><rect x="1022.7" y="787.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1025.7" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (97 samples, 0.21%)</title><rect x="1023.0" y="771.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1026.0" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (58 samples, 0.12%)</title><rect x="1023.9" y="755.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1026.9" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (36 samples, 0.08%)</title><rect x="1024.0" y="739.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1027.0" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (14 samples, 0.03%)</title><rect x="1024.5" y="723.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1027.5" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.release (17 samples, 0.04%)</title><rect x="1024.9" y="739.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1027.9" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.release (16 samples, 0.03%)</title><rect x="1025.5" y="771.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1028.5" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.release (58 samples, 0.12%)</title><rect x="1026.0" y="803.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1029.0" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.compact (32 samples, 0.07%)</title><rect x="1026.6" y="787.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1029.6" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isValidAndAvailable (17 samples, 0.04%)</title><rect x="1027.0" y="771.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1030.0" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isAvailable (43 samples, 0.09%)</title><rect x="1027.5" y="819.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1030.5" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isAddressAvailable (43 samples, 0.09%)</title><rect x="1027.5" y="803.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1030.5" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (43 samples, 0.09%)</title><rect x="1027.5" y="787.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1030.5" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (43 samples, 0.09%)</title><rect x="1027.5" y="771.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1030.5" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (43 samples, 0.09%)</title><rect x="1027.5" y="755.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1030.5" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (43 samples, 0.09%)</title><rect x="1027.5" y="739.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1030.5" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (43 samples, 0.09%)</title><rect x="1027.5" y="723.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1030.5" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.disposeData (287 samples, 0.62%)</title><rect x="1028.7" y="899.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1031.7" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.disposeData (281 samples, 0.61%)</title><rect x="1028.8" y="883.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1031.8" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.disposeDataInternal (281 samples, 0.61%)</title><rect x="1028.8" y="867.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1031.8" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.free (281 samples, 0.61%)</title><rect x="1028.8" y="851.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1031.8" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.free (280 samples, 0.60%)</title><rect x="1028.8" y="835.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1031.8" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (244 samples, 0.53%)</title><rect x="1028.9" y="819.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1031.9" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (207 samples, 0.45%)</title><rect x="1028.9" y="803.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1031.9" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (106 samples, 0.23%)</title><rect x="1031.4" y="787.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1034.4" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (83 samples, 0.18%)</title><rect x="1031.8" y="771.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1034.8" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (46 samples, 0.10%)</title><rect x="1032.7" y="755.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1035.7" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.tryMergeBuddies (33 samples, 0.07%)</title><rect x="1032.8" y="739.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1035.8" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.releaseInternal (10 samples, 0.02%)</title><rect x="1033.3" y="723.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1036.3" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager$ThreadAddressQueue.release (36 samples, 0.08%)</title><rect x="1034.1" y="803.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1037.1" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.compact (17 samples, 0.04%)</title><rect x="1034.5" y="787.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1037.5" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isAvailable (31 samples, 0.07%)</title><rect x="1035.1" y="819.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1038.1" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isAddressAvailable (31 samples, 0.07%)</title><rect x="1035.1" y="803.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1038.1" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (31 samples, 0.07%)</title><rect x="1035.1" y="787.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1038.1" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (31 samples, 0.07%)</title><rect x="1035.1" y="771.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1038.1" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (31 samples, 0.07%)</title><rect x="1035.1" y="755.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1038.1" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (31 samples, 0.07%)</title><rect x="1035.1" y="739.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1038.1" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (31 samples, 0.07%)</title><rect x="1035.1" y="723.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1038.1" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.ensureValidMember (32 samples, 0.07%)</title><rect x="1036.3" y="1123.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1039.3" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/ClusterServiceImpl.getMember (32 samples, 0.07%)</title><rect x="1036.3" y="1107.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1039.3" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/MembershipManager.getMember (26 samples, 0.06%)</title><rect x="1036.3" y="1091.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1039.3" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/cluster/impl/MemberMap.getMember (21 samples, 0.05%)</title><rect x="1036.4" y="1075.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1039.4" y="1086.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (19 samples, 0.04%)</title><rect x="1036.5" y="1059.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1039.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (16 samples, 0.03%)</title><rect x="1036.5" y="1043.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1039.5" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/cluster/Address.equals (13 samples, 0.03%)</title><rect x="1036.5" y="1027.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1039.5" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.publishCurrentTask (65 samples, 0.14%)</title><rect x="1037.1" y="1123.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1040.1" y="1134.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.run (3,371 samples, 7.26%)</title><rect x="1038.7" y="1123.0" width="85.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1041.7" y="1134.0">com/hazelc..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.call (2,795 samples, 6.02%)</title><rect x="1038.8" y="1107.0" width="71.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1041.8" y="1118.0">com/haze..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.call (2,163 samples, 4.66%)</title><rect x="1038.9" y="1091.0" width="55.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1041.9" y="1102.0">com/h..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/operations/Backup.run (2,134 samples, 4.60%)</title><rect x="1039.3" y="1075.0" width="54.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1042.3" y="1086.0">com/h..</text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationexecutor/OperationRunner.runDirect (2,121 samples, 4.57%)</title><rect x="1039.5" y="1059.0" width="53.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1042.5" y="1070.0">com/h..</text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.afterRun (477 samples, 1.03%)</title><rect x="1040.8" y="1043.0" width="12.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1043.8" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/PutBackupOperation.afterRunInternal (472 samples, 1.02%)</title><rect x="1040.9" y="1027.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1043.9" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.evict (472 samples, 1.02%)</title><rect x="1040.9" y="1011.0" width="12.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1043.9" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.disposeDeferredBlocks (472 samples, 1.02%)</title><rect x="1040.9" y="995.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1043.9" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.disposeDeferredBlocks (465 samples, 1.00%)</title><rect x="1041.1" y="979.0" width="11.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1044.1" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.disposeDeferredBlocks (465 samples, 1.00%)</title><rect x="1041.1" y="963.0" width="11.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1044.1" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.disposeDeferredBlocks (465 samples, 1.00%)</title><rect x="1041.1" y="947.0" width="11.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1044.1" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.disposeDeferredBlocks (465 samples, 1.00%)</title><rect x="1041.1" y="931.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1044.1" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.disposeData (461 samples, 0.99%)</title><rect x="1041.1" y="915.0" width="11.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1044.1" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.disposeData (453 samples, 0.98%)</title><rect x="1041.3" y="899.0" width="11.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1044.3" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.getSize (16 samples, 0.03%)</title><rect x="1041.3" y="883.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1044.3" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getAllocatedSize (16 samples, 0.03%)</title><rect x="1041.3" y="867.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1044.3" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.disposeData (437 samples, 0.94%)</title><rect x="1041.7" y="883.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1044.7" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.disposeDataInternal (437 samples, 0.94%)</title><rect x="1041.7" y="867.0" width="11.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1044.7" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.free (437 samples, 0.94%)</title><rect x="1041.7" y="851.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1044.7" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.free (434 samples, 0.93%)</title><rect x="1041.7" y="835.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1044.7" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.zeroOut (378 samples, 0.81%)</title><rect x="1042.0" y="819.0" width="9.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1045.0" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.setMemory (378 samples, 0.81%)</title><rect x="1042.0" y="803.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1045.0" y="814.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (378 samples, 0.81%)</title><rect x="1042.0" y="787.0" width="9.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1045.0" y="798.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (378 samples, 0.81%)</title><rect x="1042.0" y="771.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1045.0" y="782.0"></text>
</g>
<g>
<title>Unsafe_SetMemory2 (365 samples, 0.79%)</title><rect x="1042.3" y="755.0" width="9.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1045.3" y="766.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (330 samples, 0.71%)</title><rect x="1042.4" y="739.0" width="8.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1045.4" y="750.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (23 samples, 0.05%)</title><rect x="1050.8" y="739.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1053.8" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isAvailable (18 samples, 0.04%)</title><rect x="1051.6" y="819.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1054.6" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isAddressAvailable (17 samples, 0.04%)</title><rect x="1051.6" y="803.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1054.6" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (16 samples, 0.03%)</title><rect x="1051.6" y="787.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1054.6" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (16 samples, 0.03%)</title><rect x="1051.6" y="771.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1054.6" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (16 samples, 0.03%)</title><rect x="1051.6" y="755.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1054.6" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (15 samples, 0.03%)</title><rect x="1051.6" y="739.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1054.6" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (15 samples, 0.03%)</title><rect x="1051.6" y="723.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1054.6" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.markAvailable (30 samples, 0.06%)</title><rect x="1052.0" y="819.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1055.0" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.putByte (27 samples, 0.06%)</title><rect x="1052.1" y="803.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1055.1" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.beforeRun (351 samples, 0.76%)</title><rect x="1052.9" y="1043.0" width="8.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1055.9" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.getRecordStoreOrNull (328 samples, 0.71%)</title><rect x="1053.3" y="1027.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1056.3" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.getRecordStore (292 samples, 0.63%)</title><rect x="1054.2" y="1011.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1057.2" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutSynchronized (292 samples, 0.63%)</title><rect x="1054.2" y="995.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1057.2" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer$$Lambda$976/762509150.createNew (51 samples, 0.11%)</title><rect x="1055.1" y="979.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1058.1" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.lambda$new$0 (51 samples, 0.11%)</title><rect x="1055.1" y="963.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1058.1" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/PartitionContainer.createRecordStore (51 samples, 0.11%)</title><rect x="1055.1" y="947.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1058.1" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/EnterpriseMapServiceContextImpl.createRecordStore (16 samples, 0.03%)</title><rect x="1055.2" y="931.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1058.2" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/EnterpriseRecordStore.&lt;init&gt; (15 samples, 0.03%)</title><rect x="1055.2" y="915.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1058.2" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.&lt;init&gt; (15 samples, 0.03%)</title><rect x="1055.2" y="899.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1058.2" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.&lt;init&gt; (14 samples, 0.03%)</title><rect x="1055.2" y="883.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1058.2" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.&lt;init&gt; (10 samples, 0.02%)</title><rect x="1055.2" y="867.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1058.2" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/EnterpriseRecordStore.init (20 samples, 0.04%)</title><rect x="1055.8" y="931.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1058.8" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.init (20 samples, 0.04%)</title><rect x="1055.8" y="915.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1058.8" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.init (20 samples, 0.04%)</title><rect x="1055.8" y="899.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1058.8" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/EnterpriseRecordStore.createStorage (11 samples, 0.02%)</title><rect x="1056.1" y="883.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1059.1" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.&lt;init&gt; (11 samples, 0.02%)</title><rect x="1056.1" y="867.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1059.1" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageSCHM.&lt;init&gt; (11 samples, 0.02%)</title><rect x="1056.1" y="851.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1059.1" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/SampleableElasticHashMap.&lt;init&gt; (11 samples, 0.02%)</title><rect x="1056.1" y="835.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1059.1" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.&lt;init&gt; (10 samples, 0.02%)</title><rect x="1056.1" y="819.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1059.1" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.allocateBuffer (10 samples, 0.02%)</title><rect x="1056.1" y="803.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1059.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (199 samples, 0.43%)</title><rect x="1056.4" y="979.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1059.4" y="990.0"></text>
</g>
<g>
<title>java/lang/String.equals (14 samples, 0.03%)</title><rect x="1059.5" y="963.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1062.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (63 samples, 0.14%)</title><rect x="1059.9" y="963.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1062.9" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.call (1,238 samples, 2.67%)</title><rect x="1061.8" y="1043.0" width="31.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1064.8" y="1054.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/LockAwareOperation.shouldWait (12 samples, 0.03%)</title><rect x="1061.9" y="1027.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1064.9" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.run (1,225 samples, 2.64%)</title><rect x="1062.2" y="1027.0" width="31.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1065.2" y="1038.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/PutBackupOperation.runInternal (1,223 samples, 2.63%)</title><rect x="1062.2" y="1011.0" width="31.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1065.2" y="1022.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/record/Records.copyMetadataFrom (21 samples, 0.05%)</title><rect x="1062.2" y="995.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1065.2" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.setHits (12 samples, 0.03%)</title><rect x="1062.4" y="979.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1065.4" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.writeInt (12 samples, 0.03%)</title><rect x="1062.4" y="963.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1065.4" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.putBackup (1,202 samples, 2.59%)</title><rect x="1062.7" y="995.0" width="30.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1065.7" y="1006.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.putBackupInternal (1,194 samples, 2.57%)</title><rect x="1062.9" y="979.0" width="30.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1065.9" y="990.0">co..</text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.getValue (94 samples, 0.20%)</title><rect x="1062.9" y="963.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1065.9" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.getValue (92 samples, 0.20%)</title><rect x="1063.0" y="947.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1066.0" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryData.reset (78 samples, 0.17%)</title><rect x="1063.4" y="931.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1066.4" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.setSize (78 samples, 0.17%)</title><rect x="1063.4" y="915.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1066.4" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.markRecordStoreExpirable (22 samples, 0.05%)</title><rect x="1065.3" y="963.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1068.3" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.persistenceEnabledFor (11 samples, 0.02%)</title><rect x="1065.9" y="963.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1068.9" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.updateRecord (383 samples, 0.82%)</title><rect x="1066.2" y="963.0" width="9.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1069.2" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/Record.onAccess (27 samples, 0.06%)</title><rect x="1066.3" y="947.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1069.3" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.getHits (11 samples, 0.02%)</title><rect x="1066.3" y="931.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1069.3" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.readInt (10 samples, 0.02%)</title><rect x="1066.4" y="915.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1069.4" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.setHits (12 samples, 0.03%)</title><rect x="1066.6" y="931.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1069.6" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/MemoryBlock.writeInt (12 samples, 0.03%)</title><rect x="1066.6" y="915.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1069.6" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/Record.onUpdate (12 samples, 0.03%)</title><rect x="1067.0" y="947.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1070.0" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecord.setLastUpdateTime (10 samples, 0.02%)</title><rect x="1067.0" y="931.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1070.0" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/CompositeMutationObserver.onUpdateRecord (59 samples, 0.13%)</title><rect x="1067.3" y="947.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1070.3" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/JsonMetadataMutationObserver.onUpdateRecord (56 samples, 0.12%)</title><rect x="1067.4" y="931.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1070.4" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/JsonMetadataMutationObserver.updateValueMetadataIfNecessary (56 samples, 0.12%)</title><rect x="1067.4" y="915.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1070.4" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDJsonMetadataMutationObserver.getMetadata (53 samples, 0.11%)</title><rect x="1067.4" y="899.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1070.4" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/MetadataStore.get (52 samples, 0.11%)</title><rect x="1067.5" y="883.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1070.5" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.updateRecordValue (280 samples, 0.60%)</title><rect x="1068.8" y="947.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1071.8" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.updateRecordValue (280 samples, 0.60%)</title><rect x="1068.8" y="931.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1071.8" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/NativeMapEntryCostEstimator.adjustEstimateBy (19 samples, 0.04%)</title><rect x="1068.8" y="915.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1071.8" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/NativeMapEntryCostEstimator.calculateValueCost (101 samples, 0.22%)</title><rect x="1069.3" y="915.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1072.3" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/NativeMapEntryCostEstimator.calculateValueCost (101 samples, 0.22%)</title><rect x="1069.3" y="899.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1072.3" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/NativeMapEntryCostEstimator.getSize (101 samples, 0.22%)</title><rect x="1069.3" y="883.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1072.3" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.getSize (101 samples, 0.22%)</title><rect x="1069.3" y="867.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1072.3" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.getSize (100 samples, 0.22%)</title><rect x="1069.3" y="851.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1072.3" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getAllocatedSize (96 samples, 0.21%)</title><rect x="1069.4" y="835.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1072.4" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.getAllocatedSize (67 samples, 0.14%)</title><rect x="1069.4" y="819.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1072.4" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.getSizeInternal (67 samples, 0.14%)</title><rect x="1069.4" y="803.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1072.4" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (65 samples, 0.14%)</title><rect x="1069.5" y="787.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1072.5" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (64 samples, 0.14%)</title><rect x="1069.5" y="771.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1072.5" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (59 samples, 0.13%)</title><rect x="1069.6" y="755.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1072.6" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (50 samples, 0.11%)</title><rect x="1069.8" y="739.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1072.8" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (50 samples, 0.11%)</title><rect x="1069.8" y="723.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1072.8" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.isSlotAssigned (45 samples, 0.10%)</title><rect x="1069.8" y="707.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1072.8" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.isAssigned (45 samples, 0.10%)</title><rect x="1069.8" y="691.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1072.8" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getMemoryManager (29 samples, 0.06%)</title><rect x="1071.1" y="819.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1074.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (26 samples, 0.06%)</title><rect x="1071.2" y="803.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1074.2" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.toNative (152 samples, 0.33%)</title><rect x="1072.0" y="915.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1075.0" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.toData (152 samples, 0.33%)</title><rect x="1072.0" y="899.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1075.0" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/AbstractHiDensityRecordAccessor.getSize (36 samples, 0.08%)</title><rect x="1072.1" y="883.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1075.1" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.getAllocatedSize (35 samples, 0.08%)</title><rect x="1072.2" y="867.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1075.2" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.getAllocatedSize (32 samples, 0.07%)</title><rect x="1072.2" y="851.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1075.2" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.getSizeInternal (32 samples, 0.07%)</title><rect x="1072.2" y="835.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1075.2" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (31 samples, 0.07%)</title><rect x="1072.2" y="819.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1075.2" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (31 samples, 0.07%)</title><rect x="1072.2" y="803.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1075.2" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (30 samples, 0.06%)</title><rect x="1072.2" y="787.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1075.2" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (30 samples, 0.06%)</title><rect x="1072.2" y="771.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1075.2" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (27 samples, 0.06%)</title><rect x="1072.2" y="755.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1075.2" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toNativeData (112 samples, 0.24%)</title><rect x="1073.1" y="883.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1076.1" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toDataInternal (112 samples, 0.24%)</title><rect x="1073.1" y="867.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1076.1" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertData (110 samples, 0.24%)</title><rect x="1073.1" y="851.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1076.1" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (107 samples, 0.23%)</title><rect x="1073.1" y="835.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1076.1" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (103 samples, 0.22%)</title><rect x="1073.2" y="819.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1076.2" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.allocate (98 samples, 0.21%)</title><rect x="1073.2" y="803.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1076.2" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (98 samples, 0.21%)</title><rect x="1073.2" y="787.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1076.2" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isValidAndAvailable (90 samples, 0.19%)</title><rect x="1073.4" y="771.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1076.4" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (24 samples, 0.05%)</title><rect x="1073.4" y="755.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1076.4" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (24 samples, 0.05%)</title><rect x="1073.4" y="739.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1076.4" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (22 samples, 0.05%)</title><rect x="1073.4" y="723.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1076.4" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (66 samples, 0.14%)</title><rect x="1074.0" y="755.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1077.0" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (66 samples, 0.14%)</title><rect x="1074.0" y="739.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1077.0" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (62 samples, 0.13%)</title><rect x="1074.1" y="723.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1077.1" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (61 samples, 0.13%)</title><rect x="1074.1" y="707.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1077.1" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (61 samples, 0.13%)</title><rect x="1074.1" y="691.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1077.1" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.mask (35 samples, 0.08%)</title><rect x="1074.8" y="675.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1077.8" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.capacity (33 samples, 0.07%)</title><rect x="1074.8" y="659.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1077.8" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/DefaultRecordStore.getRecordOrNull (230 samples, 0.50%)</title><rect x="1076.0" y="963.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1079.0" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (204 samples, 0.44%)</title><rect x="1076.7" y="947.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1079.7" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.get (204 samples, 0.44%)</title><rect x="1076.7" y="931.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1079.7" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get (203 samples, 0.44%)</title><rect x="1076.7" y="915.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1079.7" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.get0 (203 samples, 0.44%)</title><rect x="1076.7" y="899.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1079.7" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BehmSlotAccessor.isAssigned (73 samples, 0.16%)</title><rect x="1076.8" y="883.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1079.8" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/elastic/map/BinaryElasticHashMap.ensureMemory (25 samples, 0.05%)</title><rect x="1078.8" y="883.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1081.8" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryDataUtil.equals (93 samples, 0.20%)</title><rect x="1079.5" y="883.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1082.5" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/NativeMemoryDataUtil.readType (87 samples, 0.19%)</title><rect x="1079.6" y="867.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1082.6" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/EnterpriseRecordStore.createRecord (409 samples, 0.88%)</title><rect x="1081.9" y="963.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1084.9" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/EnterpriseRecordStore.createRecordInternal (409 samples, 0.88%)</title><rect x="1081.9" y="947.0" width="10.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1084.9" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractEvictableRecordStore.createRecord (409 samples, 0.88%)</title><rect x="1081.9" y="931.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1084.9" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/AbstractRecordStore.createRecord (409 samples, 0.88%)</title><rect x="1081.9" y="915.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1084.9" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/record/HDRecordFactory.newRecord (404 samples, 0.87%)</title><rect x="1082.0" y="899.0" width="10.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1085.0" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.allocate (19 samples, 0.04%)</title><rect x="1082.0" y="883.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1085.0" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (16 samples, 0.03%)</title><rect x="1082.1" y="867.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1085.1" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.allocate (14 samples, 0.03%)</title><rect x="1082.1" y="851.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1085.1" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (14 samples, 0.03%)</title><rect x="1082.1" y="835.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1085.1" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.toData (385 samples, 0.83%)</title><rect x="1082.5" y="883.0" width="9.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1085.5" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toNativeData (376 samples, 0.81%)</title><rect x="1082.7" y="867.0" width="9.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1085.7" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.toDataInternal (376 samples, 0.81%)</title><rect x="1082.7" y="851.0" width="9.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1085.7" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertData (376 samples, 0.81%)</title><rect x="1082.7" y="835.0" width="9.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1085.7" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (375 samples, 0.81%)</title><rect x="1082.7" y="819.0" width="9.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1085.7" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (374 samples, 0.81%)</title><rect x="1082.7" y="803.0" width="9.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1085.7" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.allocate (373 samples, 0.80%)</title><rect x="1082.7" y="787.0" width="9.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1085.7" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (371 samples, 0.80%)</title><rect x="1082.7" y="771.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1085.7" y="782.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (331 samples, 0.71%)</title><rect x="1082.7" y="755.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1085.7" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (331 samples, 0.71%)</title><rect x="1082.7" y="739.0" width="8.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1085.7" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (329 samples, 0.71%)</title><rect x="1082.7" y="723.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1085.7" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (328 samples, 0.71%)</title><rect x="1082.8" y="707.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1085.8" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (326 samples, 0.70%)</title><rect x="1082.8" y="691.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1085.8" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (326 samples, 0.70%)</title><rect x="1082.8" y="675.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1085.8" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (326 samples, 0.70%)</title><rect x="1082.8" y="659.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1085.8" y="670.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (326 samples, 0.70%)</title><rect x="1082.8" y="643.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1085.8" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (326 samples, 0.70%)</title><rect x="1082.8" y="627.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1085.8" y="638.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (326 samples, 0.70%)</title><rect x="1082.8" y="611.0" width="8.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1085.8" y="622.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (326 samples, 0.70%)</title><rect x="1082.8" y="595.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1085.8" y="606.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (326 samples, 0.70%)</title><rect x="1082.8" y="579.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1085.8" y="590.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (326 samples, 0.70%)</title><rect x="1082.8" y="563.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1085.8" y="574.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (326 samples, 0.70%)</title><rect x="1082.8" y="547.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1085.8" y="558.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (326 samples, 0.70%)</title><rect x="1082.8" y="531.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1085.8" y="542.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (326 samples, 0.70%)</title><rect x="1082.8" y="515.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1085.8" y="526.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (326 samples, 0.70%)</title><rect x="1082.8" y="499.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1085.8" y="510.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.zeroOut (46 samples, 0.10%)</title><rect x="1082.8" y="483.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1085.8" y="494.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.setMemory (46 samples, 0.10%)</title><rect x="1082.8" y="467.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1085.8" y="478.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (46 samples, 0.10%)</title><rect x="1082.8" y="451.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1085.8" y="462.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (46 samples, 0.10%)</title><rect x="1082.8" y="435.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1085.8" y="446.0"></text>
</g>
<g>
<title>Unsafe_SetMemory2 (46 samples, 0.10%)</title><rect x="1082.8" y="419.0" width="1.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1085.8" y="430.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (46 samples, 0.10%)</title><rect x="1082.8" y="403.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1085.8" y="414.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/StandardMemoryManager.allocate (278 samples, 0.60%)</title><rect x="1084.0" y="483.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1087.0" y="494.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/StandardMemoryAccessor.setMemory (278 samples, 0.60%)</title><rect x="1084.0" y="467.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1087.0" y="478.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (278 samples, 0.60%)</title><rect x="1084.0" y="451.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1087.0" y="462.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.setMemory (278 samples, 0.60%)</title><rect x="1084.0" y="435.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1087.0" y="446.0"></text>
</g>
<g>
<title>Unsafe_SetMemory2 (278 samples, 0.60%)</title><rect x="1084.0" y="419.0" width="7.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1087.0" y="430.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (278 samples, 0.60%)</title><rect x="1084.0" y="403.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1087.0" y="414.0"></text>
</g>
<g>
<title>async_page_fault (208 samples, 0.45%)</title><rect x="1085.7" y="387.0" width="5.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1088.7" y="398.0"></text>
</g>
<g>
<title>__do_page_fault (208 samples, 0.45%)</title><rect x="1085.7" y="371.0" width="5.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1088.7" y="382.0"></text>
</g>
<g>
<title>handle_mm_fault (139 samples, 0.30%)</title><rect x="1087.3" y="355.0" width="3.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1090.3" y="366.0"></text>
</g>
<g>
<title>__handle_mm_fault (137 samples, 0.30%)</title><rect x="1087.4" y="339.0" width="3.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1090.4" y="350.0"></text>
</g>
<g>
<title>_raw_spin_lock (42 samples, 0.09%)</title><rect x="1087.7" y="323.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1090.7" y="334.0"></text>
</g>
<g>
<title>alloc_pages_vma (61 samples, 0.13%)</title><rect x="1088.8" y="323.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1091.8" y="334.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (59 samples, 0.13%)</title><rect x="1088.8" y="307.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1091.8" y="318.0"></text>
</g>
<g>
<title>get_page_from_freelist (58 samples, 0.12%)</title><rect x="1088.8" y="291.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1091.8" y="302.0"></text>
</g>
<g>
<title>clear_page_erms (38 samples, 0.08%)</title><rect x="1089.3" y="275.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1092.3" y="286.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge (10 samples, 0.02%)</title><rect x="1090.5" y="323.0" width="0.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1093.5" y="334.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isValidAndAvailable (40 samples, 0.09%)</title><rect x="1091.2" y="755.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1094.2" y="766.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.toHeaderAddress (35 samples, 0.08%)</title><rect x="1091.3" y="739.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1094.3" y="750.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/ThreadLocalPoolingMemoryManager.isPageBaseAddress (35 samples, 0.08%)</title><rect x="1091.3" y="723.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1094.3" y="734.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/collection/LongSetHsa.contains (35 samples, 0.08%)</title><rect x="1091.3" y="707.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1094.3" y="718.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArray8byteKeyImpl.get (35 samples, 0.08%)</title><rect x="1091.3" y="691.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1094.3" y="702.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.get0 (35 samples, 0.08%)</title><rect x="1091.3" y="675.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1094.3" y="686.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/hashslot/impl/HashSlotArrayBase.isSlotAssigned (34 samples, 0.07%)</title><rect x="1091.3" y="659.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1094.3" y="670.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (33 samples, 0.07%)</title><rect x="1091.3" y="643.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1094.3" y="654.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.put (38 samples, 0.08%)</title><rect x="1092.3" y="963.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1095.3" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.put (36 samples, 0.08%)</title><rect x="1092.3" y="947.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1095.3" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/recordstore/HDStorageImpl.toNative (19 samples, 0.04%)</title><rect x="1092.8" y="931.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1095.8" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/hidensity/impl/DefaultHiDensityRecordProcessor.convertData (19 samples, 0.04%)</title><rect x="1092.8" y="915.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1095.8" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertToNativeData (19 samples, 0.04%)</title><rect x="1092.8" y="899.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1095.8" y="910.0"></text>
</g>
<g>
<title>com/hazelcast/internal/serialization/impl/EnterpriseSerializationServiceV1.convertDataInternal (19 samples, 0.04%)</title><rect x="1092.8" y="883.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1095.8" y="894.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/PoolingMemoryManager.allocate (19 samples, 0.04%)</title><rect x="1092.8" y="867.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1095.8" y="878.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.allocate (19 samples, 0.04%)</title><rect x="1092.8" y="851.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1095.8" y="862.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (16 samples, 0.03%)</title><rect x="1092.8" y="835.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1095.8" y="846.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (12 samples, 0.03%)</title><rect x="1092.8" y="819.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1095.8" y="830.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.acquireInternal (11 samples, 0.02%)</title><rect x="1092.8" y="803.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1095.8" y="814.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/AbstractPoolingMemoryManager.splitFromNextQueue (11 samples, 0.02%)</title><rect x="1092.8" y="787.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1095.8" y="798.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/proxyservice/impl/operations/DistributedObjectDestroyOperation.run (14 samples, 0.03%)</title><rect x="1093.5" y="1075.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1096.5" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/proxyservice/impl/ProxyServiceImpl.destroyLocalDistributedObject (14 samples, 0.03%)</title><rect x="1093.5" y="1059.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1096.5" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/services/RemoteService.destroyDistributedObject (14 samples, 0.03%)</title><rect x="1093.5" y="1043.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1096.5" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapService.destroyDistributedObject (14 samples, 0.03%)</title><rect x="1093.5" y="1027.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1096.5" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapRemoteService.destroyDistributedObject (14 samples, 0.03%)</title><rect x="1093.5" y="1011.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1096.5" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapServiceContextImpl.destroyMap (14 samples, 0.03%)</title><rect x="1093.5" y="995.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1096.5" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapServiceContextImpl.destroyPartitionsAndMapContainer (14 samples, 0.03%)</title><rect x="1093.5" y="979.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1096.5" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.afterRun (626 samples, 1.35%)</title><rect x="1094.0" y="1091.0" width="15.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1097.0" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/operations/Backup.afterRun (626 samples, 1.35%)</title><rect x="1094.0" y="1075.0" width="15.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1097.0" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/ClientEngineImpl.dispatchBackupEvent (615 samples, 1.32%)</title><rect x="1094.1" y="1059.0" width="15.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1097.1" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AddBackupListenerMessageTask.accept (577 samples, 1.24%)</title><rect x="1094.5" y="1043.0" width="14.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1097.5" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AddBackupListenerMessageTask.accept (577 samples, 1.24%)</title><rect x="1094.5" y="1027.0" width="14.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1097.5" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/ClientLocalBackupListenerCodec.encodeBackupEvent (93 samples, 0.20%)</title><rect x="1094.5" y="1011.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1097.5" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/codec/builtin/FixedSizeTypesCodec.encodeInt (77 samples, 0.17%)</title><rect x="1094.7" y="995.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1097.7" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/Bits.writeIntL (76 samples, 0.16%)</title><rect x="1094.8" y="979.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1097.8" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/EndiannessUtil.writeIntL (76 samples, 0.16%)</title><rect x="1094.8" y="963.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1097.8" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.putByte (76 samples, 0.16%)</title><rect x="1094.8" y="947.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1097.8" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.putByte (72 samples, 0.16%)</title><rect x="1094.9" y="931.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1097.9" y="942.0"></text>
</g>
<g>
<title>com/hazelcast/internal/memory/impl/ByteArrayAccessStrategy.assertFitsInt (20 samples, 0.04%)</title><rect x="1096.1" y="915.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1099.1" y="926.0"></text>
</g>
<g>
<title>com/hazelcast/client/impl/protocol/task/AbstractMessageTask.sendClientMessage (484 samples, 1.04%)</title><rect x="1096.8" y="1011.0" width="12.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1099.8" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/nio/tcp/TcpIpConnection.write (484 samples, 1.04%)</title><rect x="1096.8" y="995.0" width="12.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1099.8" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioChannel.write (484 samples, 1.04%)</title><rect x="1096.8" y="979.0" width="12.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1099.8" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.write (484 samples, 1.04%)</title><rect x="1096.8" y="963.0" width="12.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1099.8" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioOutboundPipeline.executePipeline (474 samples, 1.02%)</title><rect x="1097.0" y="947.0" width="12.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1100.0" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/internal/networking/nio/NioPipeline.registerOp (73 samples, 0.16%)</title><rect x="1097.5" y="931.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1100.5" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (69 samples, 0.15%)</title><rect x="1097.6" y="915.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1100.6" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.ensureValid (10 samples, 0.02%)</title><rect x="1097.6" y="899.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1100.6" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (59 samples, 0.13%)</title><rect x="1097.9" y="899.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1100.9" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetInterestOps (58 samples, 0.12%)</title><rect x="1097.9" y="883.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1100.9" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.putEventOps (58 samples, 0.12%)</title><rect x="1097.9" y="867.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1100.9" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.setInterest (31 samples, 0.07%)</title><rect x="1098.6" y="851.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1101.6" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (367 samples, 0.79%)</title><rect x="1099.4" y="931.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1102.4" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (326 samples, 0.70%)</title><rect x="1100.5" y="915.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1103.5" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (325 samples, 0.70%)</title><rect x="1100.5" y="899.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1103.5" y="910.0"></text>
</g>
<g>
<title>write (316 samples, 0.68%)</title><rect x="1100.7" y="883.0" width="8.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1103.7" y="894.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (298 samples, 0.64%)</title><rect x="1101.2" y="867.0" width="7.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1104.2" y="878.0"></text>
</g>
<g>
<title>do_syscall_64 (298 samples, 0.64%)</title><rect x="1101.2" y="851.0" width="7.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1104.2" y="862.0"></text>
</g>
<g>
<title>sys_write (255 samples, 0.55%)</title><rect x="1102.2" y="835.0" width="6.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1105.2" y="846.0"></text>
</g>
<g>
<title>__fdget_pos (27 samples, 0.06%)</title><rect x="1102.2" y="819.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1105.2" y="830.0"></text>
</g>
<g>
<title>__fget_light (27 samples, 0.06%)</title><rect x="1102.2" y="803.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1105.2" y="814.0"></text>
</g>
<g>
<title>__fget (23 samples, 0.05%)</title><rect x="1102.3" y="787.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1105.3" y="798.0"></text>
</g>
<g>
<title>vfs_write (222 samples, 0.48%)</title><rect x="1103.0" y="819.0" width="5.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1106.0" y="830.0"></text>
</g>
<g>
<title>__vfs_write (207 samples, 0.45%)</title><rect x="1103.2" y="803.0" width="5.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1106.2" y="814.0"></text>
</g>
<g>
<title>pipe_write (203 samples, 0.44%)</title><rect x="1103.3" y="787.0" width="5.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1106.3" y="798.0"></text>
</g>
<g>
<title>__wake_up_common_lock (165 samples, 0.36%)</title><rect x="1103.5" y="771.0" width="4.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1106.5" y="782.0"></text>
</g>
<g>
<title>__lock_text_start (164 samples, 0.35%)</title><rect x="1103.6" y="755.0" width="4.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1106.6" y="766.0"></text>
</g>
<g>
<title>copy_page_from_iter (10 samples, 0.02%)</title><rect x="1107.7" y="771.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1110.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (18 samples, 0.04%)</title><rect x="1109.3" y="1043.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1112.3" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.ensureNoPartitionProblems (23 samples, 0.05%)</title><rect x="1109.9" y="1107.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1112.9" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.timeout (92 samples, 0.20%)</title><rect x="1110.5" y="1107.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1113.5" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/OperationServiceImpl.isCallTimedOut (91 samples, 0.20%)</title><rect x="1110.6" y="1091.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1113.6" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operations.isWanReplicationOperation (29 samples, 0.06%)</title><rect x="1112.0" y="1075.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1115.0" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/operations/Backup.beforeRun (420 samples, 0.90%)</title><rect x="1112.9" y="1107.0" width="10.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1115.9" y="1118.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionReplicaManager.getServiceNamespace (45 samples, 0.10%)</title><rect x="1113.2" y="1091.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1116.2" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.getServiceNamespace (41 samples, 0.09%)</title><rect x="1113.3" y="1075.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1116.3" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/operation/MapOperation.getServiceNamespace (41 samples, 0.09%)</title><rect x="1113.3" y="1059.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1116.3" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapServiceContextImpl.getMapContainer (21 samples, 0.05%)</title><rect x="1113.3" y="1043.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1116.3" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutSynchronized (21 samples, 0.05%)</title><rect x="1113.3" y="1027.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1116.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (19 samples, 0.04%)</title><rect x="1113.4" y="1011.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1116.4" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.getService (18 samples, 0.04%)</title><rect x="1113.9" y="1043.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1116.9" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.getService (17 samples, 0.04%)</title><rect x="1113.9" y="1027.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1116.9" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getService (15 samples, 0.03%)</title><rect x="1113.9" y="1011.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1116.9" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/servicemanager/impl/ServiceManagerImpl.getServiceInfo (15 samples, 0.03%)</title><rect x="1113.9" y="995.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1116.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (14 samples, 0.03%)</title><rect x="1114.0" y="979.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1117.0" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionReplicaManager.isPartitionReplicaVersionStale (215 samples, 0.46%)</title><rect x="1114.3" y="1091.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1117.3" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionReplicaVersions.isStale (215 samples, 0.46%)</title><rect x="1114.3" y="1075.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1117.3" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/partition/impl/PartitionReplicaVersions.getFragmentVersions (215 samples, 0.46%)</title><rect x="1114.3" y="1059.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1117.3" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (147 samples, 0.32%)</title><rect x="1115.8" y="1043.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1118.8" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (66 samples, 0.14%)</title><rect x="1115.8" y="1027.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1118.8" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (81 samples, 0.17%)</title><rect x="1117.5" y="1027.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1120.5" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.getLogger (36 samples, 0.08%)</title><rect x="1119.8" y="1091.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1122.8" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/NodeEngineImpl.getLogger (36 samples, 0.08%)</title><rect x="1119.8" y="1075.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1122.8" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/logging/impl/LoggingServiceImpl.getLogger (36 samples, 0.08%)</title><rect x="1119.8" y="1059.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1122.8" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/util/ConcurrencyUtil.getOrPutIfAbsent (36 samples, 0.08%)</title><rect x="1119.8" y="1043.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1122.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (23 samples, 0.05%)</title><rect x="1120.1" y="1027.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1123.1" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/impl/operations/Backup.ensureBackupOperationInitialized (110 samples, 0.24%)</title><rect x="1120.7" y="1091.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1123.7" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.setPartitionId (24 samples, 0.05%)</title><rect x="1122.5" y="1075.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1125.5" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/Operation.setFlag (15 samples, 0.03%)</title><rect x="1122.7" y="1059.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1125.7" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/spi/impl/operationservice/OperationAccessor.setCallerAddress (14 samples, 0.03%)</title><rect x="1123.1" y="1075.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1126.1" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (11 samples, 0.02%)</title><rect x="1123.2" y="1059.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.2" y="1070.0"></text>
</g>
<g>
<title>gettimeofday (11 samples, 0.02%)</title><rect x="1123.2" y="1043.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1126.2" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (30 samples, 0.06%)</title><rect x="1123.6" y="1107.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1126.6" y="1118.0"></text>
</g>
<g>
<title>gettimeofday (26 samples, 0.06%)</title><rect x="1123.7" y="1091.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1126.7" y="1102.0"></text>
</g>
<g>
<title>[vdso] (20 samples, 0.04%)</title><rect x="1123.9" y="1075.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1126.9" y="1086.0"></text>
</g>
<g>
<title>itable stub (30 samples, 0.06%)</title><rect x="1124.6" y="1123.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1127.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.run (49 samples, 0.11%)</title><rect x="1125.9" y="1187.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1128.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (46 samples, 0.10%)</title><rect x="1125.9" y="1171.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1128.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (46 samples, 0.10%)</title><rect x="1125.9" y="1155.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1128.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.run (40 samples, 0.09%)</title><rect x="1125.9" y="1139.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1128.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301 (40 samples, 0.09%)</title><rect x="1125.9" y="1123.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1128.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.runAndReset (40 samples, 0.09%)</title><rect x="1125.9" y="1107.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1128.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (40 samples, 0.09%)</title><rect x="1125.9" y="1091.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1128.9" y="1102.0"></text>
</g>
<g>
<title>com/hazelcast/internal/diagnostics/Diagnostics$WritePluginTask.run (38 samples, 0.08%)</title><rect x="1125.9" y="1075.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1128.9" y="1086.0"></text>
</g>
<g>
<title>com/hazelcast/internal/diagnostics/DiagnosticsLogFile.write (38 samples, 0.08%)</title><rect x="1125.9" y="1059.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1128.9" y="1070.0"></text>
</g>
<g>
<title>com/hazelcast/internal/diagnostics/DiagnosticsLogFile.renderPlugin (38 samples, 0.08%)</title><rect x="1125.9" y="1043.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1128.9" y="1054.0"></text>
</g>
<g>
<title>com/hazelcast/internal/diagnostics/MetricsPlugin.run (37 samples, 0.08%)</title><rect x="1125.9" y="1027.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1128.9" y="1038.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsRegistryImpl.collect (37 samples, 0.08%)</title><rect x="1125.9" y="1011.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1128.9" y="1022.0"></text>
</g>
<g>
<title>com/hazelcast/internal/metrics/impl/MetricsCollectionCycle.collectDynamicMetrics (35 samples, 0.08%)</title><rect x="1125.9" y="995.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1128.9" y="1006.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapService.provideDynamicMetrics (33 samples, 0.07%)</title><rect x="1125.9" y="979.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1128.9" y="990.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapService.getStats (33 samples, 0.07%)</title><rect x="1125.9" y="963.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1128.9" y="974.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/MapStatisticsAwareService.getStats (33 samples, 0.07%)</title><rect x="1125.9" y="947.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1128.9" y="958.0"></text>
</g>
<g>
<title>com/hazelcast/map/impl/LocalMapStatsProvider.createAllLocalMapStats (33 samples, 0.07%)</title><rect x="1125.9" y="931.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1128.9" y="942.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/JFR.init (30 samples, 0.06%)</title><rect x="1127.1" y="1187.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1130.1" y="1198.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/VMJFR.instrument (18 samples, 0.04%)</title><rect x="1127.5" y="1171.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1130.5" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/instrumentation/Tracer.addInstrumentations (15 samples, 0.03%)</title><rect x="1127.5" y="1155.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1130.5" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/instrumentation/Tracer.retransformClasses0 (13 samples, 0.03%)</title><rect x="1127.5" y="1139.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1130.5" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/instrumentation/Tracer.retransformCallback (11 samples, 0.02%)</title><rect x="1127.6" y="1123.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1130.6" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/instrumentation/Tracer.transform (11 samples, 0.02%)</title><rect x="1127.6" y="1107.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1130.6" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/instrumentation/ClassInstrumentation.&lt;init&gt; (11 samples, 0.02%)</title><rect x="1127.6" y="1091.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1130.6" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/instrumentation/ClassInstrumentation.instrument (11 samples, 0.02%)</title><rect x="1127.6" y="1075.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1130.6" y="1086.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/VMJFR.startRecording (15 samples, 0.03%)</title><rect x="1128.0" y="1187.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1131.0" y="1198.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/DCmdStart.execute (15 samples, 0.03%)</title><rect x="1128.0" y="1171.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1131.0" y="1182.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/DCmdStart.findPreset (14 samples, 0.03%)</title><rect x="1128.0" y="1155.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1131.0" y="1166.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/settings/PresetFile.createFromName (14 samples, 0.03%)</title><rect x="1128.0" y="1139.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1131.0" y="1150.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/settings/PresetFile.create (14 samples, 0.03%)</title><rect x="1128.0" y="1123.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1131.0" y="1134.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/settings/JFCParser.createPresetFile (14 samples, 0.03%)</title><rect x="1128.0" y="1107.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1131.0" y="1118.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/settings/JFCParser.createPresetFile (14 samples, 0.03%)</title><rect x="1128.0" y="1091.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1131.0" y="1102.0"></text>
</g>
<g>
<title>oracle/jrockit/jfr/settings/JFCParser.validateXML (11 samples, 0.02%)</title><rect x="1128.0" y="1075.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1131.0" y="1086.0"></text>
</g>
<g>
<title>start_thread (2,408 samples, 5.19%)</title><rect x="1128.7" y="1187.0" width="61.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1131.7" y="1198.0">start_..</text>
</g>
<g>
<title>java_start(Thread*) (2,408 samples, 5.19%)</title><rect x="1128.7" y="1171.0" width="61.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1131.7" y="1182.0">java_s..</text>
</g>
<g>
<title>GCTaskThread::run() (2,306 samples, 4.97%)</title><rect x="1128.7" y="1155.0" width="58.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.7" y="1166.0">GCTask..</text>
</g>
<g>
<title>DrainStacksCompactionTask::do_it(GCTaskManager*, unsigned int) (36 samples, 0.08%)</title><rect x="1128.7" y="1139.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.7" y="1150.0"></text>
</g>
<g>
<title>ParCompactionManager::drain_region_stacks() (36 samples, 0.08%)</title><rect x="1128.7" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.7" y="1134.0"></text>
</g>
<g>
<title>PSParallelCompact::fill_region(ParCompactionManager*, unsigned long) (36 samples, 0.08%)</title><rect x="1128.7" y="1107.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.7" y="1118.0"></text>
</g>
<g>
<title>ParMarkBitMap::iterate(ParMarkBitMapClosure*, unsigned long, unsigned long) const (36 samples, 0.08%)</title><rect x="1128.7" y="1091.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.7" y="1102.0"></text>
</g>
<g>
<title>MoveAndUpdateClosure::do_addr(HeapWord*, unsigned long) (33 samples, 0.07%)</title><rect x="1128.7" y="1075.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.7" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::oop_update_pointers(ParCompactionManager*, oopDesc*) (23 samples, 0.05%)</title><rect x="1128.8" y="1059.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.8" y="1070.0"></text>
</g>
<g>
<title>ParallelCompactData::calc_new_pointer(HeapWord*) (19 samples, 0.04%)</title><rect x="1128.9" y="1043.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.9" y="1054.0"></text>
</g>
<g>
<title>ParMarkBitMap::live_words_in_range(HeapWord*, oopDesc*) const (17 samples, 0.04%)</title><rect x="1129.0" y="1027.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.0" y="1038.0"></text>
</g>
<g>
<title>OldToYoungRootsTask::do_it(GCTaskManager*, unsigned int) (708 samples, 1.52%)</title><rect x="1130.0" y="1139.0" width="18.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.0" y="1150.0"></text>
</g>
<g>
<title>CardTableExtension::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWord*, PSPromotionManager*, unsigned int, unsigned int) (688 samples, 1.48%)</title><rect x="1130.0" y="1123.0" width="17.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.0" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::oop_push_contents(PSPromotionManager*, oopDesc*) (124 samples, 0.27%)</title><rect x="1135.8" y="1107.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.8" y="1118.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_push_contents(PSPromotionManager*, oopDesc*) (61 samples, 0.13%)</title><rect x="1139.1" y="1107.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1142.1" y="1118.0"></text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (261 samples, 0.56%)</title><rect x="1140.7" y="1107.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.7" y="1118.0"></text>
</g>
<g>
<title>PSPromotionManager::process_array_chunk(oopDesc*) (12 samples, 0.03%)</title><rect x="1141.3" y="1091.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.3" y="1102.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (137 samples, 0.30%)</title><rect x="1141.6" y="1091.0" width="3.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1144.6" y="1102.0"></text>
</g>
<g>
<title>async_page_fault (125 samples, 0.27%)</title><rect x="1141.9" y="1075.0" width="3.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1144.9" y="1086.0"></text>
</g>
<g>
<title>__do_page_fault (125 samples, 0.27%)</title><rect x="1141.9" y="1059.0" width="3.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1144.9" y="1070.0"></text>
</g>
<g>
<title>handle_mm_fault (114 samples, 0.25%)</title><rect x="1142.1" y="1043.0" width="2.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1145.1" y="1054.0"></text>
</g>
<g>
<title>__handle_mm_fault (113 samples, 0.24%)</title><rect x="1142.1" y="1027.0" width="2.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1145.1" y="1038.0"></text>
</g>
<g>
<title>_raw_spin_lock (92 samples, 0.20%)</title><rect x="1142.3" y="1011.0" width="2.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1145.3" y="1022.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (82 samples, 0.18%)</title><rect x="1142.6" y="995.0" width="2.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1145.6" y="1006.0"></text>
</g>
<g>
<title>alloc_pages_vma (10 samples, 0.02%)</title><rect x="1144.7" y="1011.0" width="0.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1147.7" y="1022.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (10 samples, 0.02%)</title><rect x="1144.7" y="995.0" width="0.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1147.7" y="1006.0"></text>
</g>
<g>
<title>get_page_from_freelist (10 samples, 0.02%)</title><rect x="1144.7" y="979.0" width="0.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1147.7" y="990.0"></text>
</g>
<g>
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (91 samples, 0.20%)</title><rect x="1145.1" y="1091.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.1" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::oop_push_contents(PSPromotionManager*, oopDesc*) (17 samples, 0.04%)</title><rect x="1146.0" y="1075.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.0" y="1086.0"></text>
</g>
<g>
<title>async_page_fault (31 samples, 0.07%)</title><rect x="1146.6" y="1075.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1149.6" y="1086.0"></text>
</g>
<g>
<title>__do_page_fault (31 samples, 0.07%)</title><rect x="1146.6" y="1059.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1149.6" y="1070.0"></text>
</g>
<g>
<title>handle_mm_fault (28 samples, 0.06%)</title><rect x="1146.7" y="1043.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1149.7" y="1054.0"></text>
</g>
<g>
<title>__handle_mm_fault (28 samples, 0.06%)</title><rect x="1146.7" y="1027.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1149.7" y="1038.0"></text>
</g>
<g>
<title>_raw_spin_lock (24 samples, 0.05%)</title><rect x="1146.7" y="1011.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1149.7" y="1022.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (20 samples, 0.04%)</title><rect x="1146.8" y="995.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1149.8" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::oop_push_contents(PSPromotionManager*, oopDesc*) (19 samples, 0.04%)</title><rect x="1147.5" y="1123.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.5" y="1134.0"></text>
</g>
<g>
<title>PSParallelCompact::update_and_deadwood_in_dense_prefix(ParCompactionManager*, PSParallelCompact::SpaceId, unsigned long, unsigned long) (28 samples, 0.06%)</title><rect x="1148.0" y="1139.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.0" y="1150.0"></text>
</g>
<g>
<title>ParMarkBitMap::iterate(ParMarkBitMapClosure*, ParMarkBitMapClosure*, unsigned long, unsigned long, unsigned long) const (27 samples, 0.06%)</title><rect x="1148.0" y="1123.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.0" y="1134.0"></text>
</g>
<g>
<title>UpdateOnlyClosure::do_addr(HeapWord*, unsigned long) (27 samples, 0.06%)</title><rect x="1148.0" y="1107.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.0" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::oop_update_pointers(ParCompactionManager*, oopDesc*) (23 samples, 0.05%)</title><rect x="1148.0" y="1091.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.0" y="1102.0"></text>
</g>
<g>
<title>ParallelCompactData::calc_new_pointer(HeapWord*) (23 samples, 0.05%)</title><rect x="1148.0" y="1075.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.0" y="1086.0"></text>
</g>
<g>
<title>ParMarkBitMap::live_words_in_range(HeapWord*, oopDesc*) const (14 samples, 0.03%)</title><rect x="1148.2" y="1059.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.2" y="1070.0"></text>
</g>
<g>
<title>ScavengeRootsTask::do_it(GCTaskManager*, unsigned int) (13 samples, 0.03%)</title><rect x="1148.7" y="1139.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.7" y="1150.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::oops_do(OopClosure*, KlassClosure*, bool) (13 samples, 0.03%)</title><rect x="1148.7" y="1123.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.7" y="1134.0"></text>
</g>
<g>
<title>StealMarkingTask::do_it(GCTaskManager*, unsigned int) (213 samples, 0.46%)</title><rect x="1149.0" y="1139.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.0" y="1150.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;GenericTaskQueue&lt;oopDesc*, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, oopDesc*&amp;) (21 samples, 0.05%)</title><rect x="1149.1" y="1123.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.1" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::oop_follow_contents(ParCompactionManager*, oopDesc*) (21 samples, 0.05%)</title><rect x="1149.6" y="1123.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.6" y="1134.0"></text>
</g>
<g>
<title>ParMarkBitMap::mark_obj(HeapWord*, unsigned long) (10 samples, 0.02%)</title><rect x="1149.7" y="1107.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.7" y="1118.0"></text>
</g>
<g>
<title>ParCompactionManager::follow_marking_stacks() (156 samples, 0.34%)</title><rect x="1150.2" y="1123.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.2" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::oop_follow_contents(ParCompactionManager*, oopDesc*) (105 samples, 0.23%)</title><rect x="1151.1" y="1107.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.1" y="1118.0"></text>
</g>
<g>
<title>ParMarkBitMap::mark_obj(HeapWord*, unsigned long) (53 samples, 0.11%)</title><rect x="1151.8" y="1091.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.8" y="1102.0"></text>
</g>
<g>
<title>async_page_fault (14 samples, 0.03%)</title><rect x="1152.8" y="1075.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1155.8" y="1086.0"></text>
</g>
<g>
<title>__do_page_fault (14 samples, 0.03%)</title><rect x="1152.8" y="1059.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1155.8" y="1070.0"></text>
</g>
<g>
<title>handle_mm_fault (14 samples, 0.03%)</title><rect x="1152.8" y="1043.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1155.8" y="1054.0"></text>
</g>
<g>
<title>__handle_mm_fault (14 samples, 0.03%)</title><rect x="1152.8" y="1027.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1155.8" y="1038.0"></text>
</g>
<g>
<title>do_wp_page (12 samples, 0.03%)</title><rect x="1152.8" y="1011.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1155.8" y="1022.0"></text>
</g>
<g>
<title>wp_page_copy (12 samples, 0.03%)</title><rect x="1152.8" y="995.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1155.8" y="1006.0"></text>
</g>
<g>
<title>ParallelCompactData::add_obj(HeapWord*, unsigned long) (20 samples, 0.04%)</title><rect x="1153.1" y="1091.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.1" y="1102.0"></text>
</g>
<g>
<title>StealRegionCompactionTask::do_it(GCTaskManager*, unsigned int) (931 samples, 2.01%)</title><rect x="1154.4" y="1139.0" width="23.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.4" y="1150.0">S..</text>
</g>
<g>
<title>PSParallelCompact::fill_region(ParCompactionManager*, unsigned long) (105 samples, 0.23%)</title><rect x="1154.4" y="1123.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.4" y="1134.0"></text>
</g>
<g>
<title>ParMarkBitMap::iterate(ParMarkBitMapClosure*, unsigned long, unsigned long) const (102 samples, 0.22%)</title><rect x="1154.5" y="1107.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.5" y="1118.0"></text>
</g>
<g>
<title>MoveAndUpdateClosure::do_addr(HeapWord*, unsigned long) (89 samples, 0.19%)</title><rect x="1154.6" y="1091.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.6" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::oop_update_pointers(ParCompactionManager*, oopDesc*) (79 samples, 0.17%)</title><rect x="1154.7" y="1075.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.7" y="1086.0"></text>
</g>
<g>
<title>ParallelCompactData::calc_new_pointer(HeapWord*) (70 samples, 0.15%)</title><rect x="1155.0" y="1059.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.0" y="1070.0"></text>
</g>
<g>
<title>ParMarkBitMap::live_words_in_range(HeapWord*, oopDesc*) const (62 samples, 0.13%)</title><rect x="1155.2" y="1043.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.2" y="1054.0"></text>
</g>
<g>
<title>ParCompactionManager::drain_region_stacks() (126 samples, 0.27%)</title><rect x="1157.1" y="1123.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.1" y="1134.0"></text>
</g>
<g>
<title>PSParallelCompact::fill_region(ParCompactionManager*, unsigned long) (126 samples, 0.27%)</title><rect x="1157.1" y="1107.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.1" y="1118.0"></text>
</g>
<g>
<title>ParMarkBitMap::iterate(ParMarkBitMapClosure*, unsigned long, unsigned long) const (125 samples, 0.27%)</title><rect x="1157.1" y="1091.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.1" y="1102.0"></text>
</g>
<g>
<title>MoveAndUpdateClosure::do_addr(HeapWord*, unsigned long) (108 samples, 0.23%)</title><rect x="1157.2" y="1075.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.2" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::oop_update_pointers(ParCompactionManager*, oopDesc*) (80 samples, 0.17%)</title><rect x="1157.6" y="1059.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.6" y="1070.0"></text>
</g>
<g>
<title>ParallelCompactData::calc_new_pointer(HeapWord*) (72 samples, 0.16%)</title><rect x="1157.8" y="1043.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.8" y="1054.0"></text>
</g>
<g>
<title>ParMarkBitMap::live_words_in_range(HeapWord*, oopDesc*) const (66 samples, 0.14%)</title><rect x="1157.9" y="1027.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.9" y="1038.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_update_pointers(ParCompactionManager*, oopDesc*) (13 samples, 0.03%)</title><rect x="1159.6" y="1059.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.6" y="1070.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (12 samples, 0.03%)</title><rect x="1160.0" y="1075.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1163.0" y="1086.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (38 samples, 0.08%)</title><rect x="1160.3" y="1123.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.3" y="1134.0"></text>
</g>
<g>
<title>SpinPause (662 samples, 1.43%)</title><rect x="1161.3" y="1123.0" width="16.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1164.3" y="1134.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (306 samples, 0.66%)</title><rect x="1178.1" y="1139.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.1" y="1150.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)1, 131072u&gt;, (MemoryType)1&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (18 samples, 0.04%)</title><rect x="1178.1" y="1123.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.1" y="1134.0"></text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (65 samples, 0.14%)</title><rect x="1178.6" y="1123.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.6" y="1134.0"></text>
</g>
<g>
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (52 samples, 0.11%)</title><rect x="1178.9" y="1107.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="1118.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (10 samples, 0.02%)</title><rect x="1180.3" y="1123.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.3" y="1134.0"></text>
</g>
<g>
<title>SpinPause (200 samples, 0.43%)</title><rect x="1180.6" y="1123.0" width="5.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1183.6" y="1134.0"></text>
</g>
<g>
<title>ThreadRootsMarkingTask::do_it(GCTaskManager*, unsigned int) (46 samples, 0.10%)</title><rect x="1185.9" y="1139.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.9" y="1150.0"></text>
</g>
<g>
<title>ParCompactionManager::follow_marking_stacks() (38 samples, 0.08%)</title><rect x="1186.1" y="1123.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::oop_follow_contents(ParCompactionManager*, oopDesc*) (23 samples, 0.05%)</title><rect x="1186.2" y="1107.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.2" y="1118.0"></text>
</g>
<g>
<title>ParMarkBitMap::mark_obj(HeapWord*, unsigned long) (19 samples, 0.04%)</title><rect x="1186.2" y="1091.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.2" y="1102.0"></text>
</g>
<g>
<title>async_page_fault (18 samples, 0.04%)</title><rect x="1186.2" y="1075.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1189.2" y="1086.0"></text>
</g>
<g>
<title>__do_page_fault (18 samples, 0.04%)</title><rect x="1186.2" y="1059.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1189.2" y="1070.0"></text>
</g>
<g>
<title>handle_mm_fault (18 samples, 0.04%)</title><rect x="1186.2" y="1043.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1189.2" y="1054.0"></text>
</g>
<g>
<title>__handle_mm_fault (18 samples, 0.04%)</title><rect x="1186.2" y="1027.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1189.2" y="1038.0"></text>
</g>
<g>
<title>do_wp_page (10 samples, 0.02%)</title><rect x="1186.4" y="1011.0" width="0.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1189.4" y="1022.0"></text>
</g>
<g>
<title>wp_page_copy (10 samples, 0.02%)</title><rect x="1186.4" y="995.0" width="0.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1189.4" y="1006.0"></text>
</g>
<g>
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (12 samples, 0.03%)</title><rect x="1187.0" y="1139.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.0" y="1150.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (12 samples, 0.03%)</title><rect x="1187.0" y="1123.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.0" y="1134.0"></text>
</g>
<g>
<title>VMThread::run() (96 samples, 0.21%)</title><rect x="1187.5" y="1155.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.5" y="1166.0"></text>
</g>
<g>
<title>VMThread::loop() (96 samples, 0.21%)</title><rect x="1187.5" y="1139.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.5" y="1150.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (86 samples, 0.19%)</title><rect x="1187.7" y="1123.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.7" y="1134.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (86 samples, 0.19%)</title><rect x="1187.7" y="1107.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.7" y="1118.0"></text>
</g>
<g>
<title>VM_CollectForMetadataAllocation::doit() (11 samples, 0.02%)</title><rect x="1187.8" y="1091.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.8" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::collect_as_vm_thread(GCCause::Cause) (11 samples, 0.02%)</title><rect x="1187.8" y="1075.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.8" y="1086.0"></text>
</g>
<g>
<title>PSParallelCompact::invoke(bool) (11 samples, 0.02%)</title><rect x="1187.8" y="1059.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.8" y="1070.0"></text>
</g>
<g>
<title>PSParallelCompact::invoke_no_policy(bool) (11 samples, 0.02%)</title><rect x="1187.8" y="1043.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.8" y="1054.0"></text>
</g>
<g>
<title>VM_GC_SendObjectCountEvent::doit() (64 samples, 0.14%)</title><rect x="1188.1" y="1091.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.1" y="1102.0"></text>
</g>
<g>
<title>VM_GC_HeapInspection::collect() (64 samples, 0.14%)</title><rect x="1188.1" y="1075.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.1" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::collect_as_vm_thread(GCCause::Cause) (64 samples, 0.14%)</title><rect x="1188.1" y="1059.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.1" y="1070.0"></text>
</g>
<g>
<title>PSParallelCompact::invoke(bool) (64 samples, 0.14%)</title><rect x="1188.1" y="1043.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.1" y="1054.0"></text>
</g>
<g>
<title>PSParallelCompact::invoke_no_policy(bool) (64 samples, 0.14%)</title><rect x="1188.1" y="1027.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.1" y="1038.0"></text>
</g>
<g>
<title>PSParallelCompact::marking_phase(ParCompactionManager*, bool, ParallelOldTracer*) (55 samples, 0.12%)</title><rect x="1188.2" y="1011.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.2" y="1022.0"></text>
</g>
<g>
<title>GCTracer::report_object_count_after_gc(BoolObjectClosure*) (27 samples, 0.06%)</title><rect x="1188.2" y="995.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.2" y="1006.0"></text>
</g>
<g>
<title>HeapInspection::populate_table(KlassInfoTable*, BoolObjectClosure*) (27 samples, 0.06%)</title><rect x="1188.2" y="979.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.2" y="990.0"></text>
</g>
<g>
<title>MutableSpace::object_iterate(ObjectClosure*) (26 samples, 0.06%)</title><rect x="1188.2" y="963.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.2" y="974.0"></text>
</g>
<g>
<title>RecordInstanceClosure::do_object(oopDesc*) (21 samples, 0.05%)</title><rect x="1188.3" y="947.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.3" y="958.0"></text>
</g>
<g>
<title>KlassInfoTable::record_instance(oopDesc*) (18 samples, 0.04%)</title><rect x="1188.4" y="931.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.4" y="942.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (22 samples, 0.05%)</title><rect x="1188.9" y="995.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.9" y="1006.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_reflist(DiscoveredList*, ReferencePolicy*, bool, BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*) (22 samples, 0.05%)</title><rect x="1188.9" y="979.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.9" y="990.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_phase3(DiscoveredList&amp;, bool, BoolObjectClosure*, OopClosure*, VoidClosure*) (22 samples, 0.05%)</title><rect x="1188.9" y="963.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.9" y="974.0"></text>
</g>
<g>
<title>ParCompactionManager::follow_marking_stacks() (22 samples, 0.05%)</title><rect x="1188.9" y="947.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.9" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::oop_follow_contents(ParCompactionManager*, oopDesc*) (13 samples, 0.03%)</title><rect x="1189.0" y="931.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="942.0"></text>
</g>
</g>
</svg>

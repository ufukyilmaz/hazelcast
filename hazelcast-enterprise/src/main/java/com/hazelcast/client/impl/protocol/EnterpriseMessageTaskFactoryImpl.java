/*
 * Copyright (c) 2008-2015, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hazelcast.client.impl.protocol;


import com.hazelcast.client.impl.protocol.task.MessageTask;
import com.hazelcast.client.impl.protocol.task.NoSuchMessageTask;
import com.hazelcast.instance.Node;
import com.hazelcast.nio.Connection;

/**
 * DO NOT EDIT THIS FILE.
 * EDITING THIS FILE CAN POTENTIALLY BREAK PROTOCOL
 */
public class EnterpriseMessageTaskFactoryImpl implements MessageTaskFactory {

    private final MessageTaskFactory[] tasks = new MessageTaskFactory[Short.MAX_VALUE];

    private final Node node;

    public EnterpriseMessageTaskFactoryImpl(Node node) {
        this.node = node;
        initFactories();
    }

    public void initFactories() {
//region ----------  REGISTRATION FOR com.hazelcast.client.impl.protocol.task.enterprisemap
        tasks[com.hazelcast.client.impl.protocol.codec.EnterpriseMapDestroyCacheCodec.RequestParameters.TYPE.id()] = new MessageTaskFactory() {
            public MessageTask create(ClientMessage clientMessage, Connection connection) {
                return new com.hazelcast.client.impl.protocol.task.enterprisemap.MapDestroyCacheMessageTask(clientMessage, node, connection);
            }
        };
        tasks[com.hazelcast.client.impl.protocol.codec.EnterpriseMapPublisherCreateCodec.RequestParameters.TYPE.id()] = new MessageTaskFactory() {
            public MessageTask create(ClientMessage clientMessage, Connection connection) {
                return new com.hazelcast.client.impl.protocol.task.enterprisemap.MapPublisherCreateMessageTask(clientMessage, node, connection);
            }
        };
        tasks[com.hazelcast.client.impl.protocol.codec.EnterpriseMapSetReadCursorCodec.RequestParameters.TYPE.id()] = new MessageTaskFactory() {
            public MessageTask create(ClientMessage clientMessage, Connection connection) {
                return new com.hazelcast.client.impl.protocol.task.enterprisemap.MapSetReadCursorMessageTask(clientMessage, node, connection);
            }
        };
        tasks[com.hazelcast.client.impl.protocol.codec.EnterpriseMapAddListenerCodec.RequestParameters.TYPE.id()] = new MessageTaskFactory() {
            public MessageTask create(ClientMessage clientMessage, Connection connection) {
                return new com.hazelcast.client.impl.protocol.task.enterprisemap.MapAddListenerMessageTask(clientMessage, node, connection);
            }
        };
        tasks[com.hazelcast.client.impl.protocol.codec.EnterpriseMapMadePublishableCodec.RequestParameters.TYPE.id()] = new MessageTaskFactory() {
            public MessageTask create(ClientMessage clientMessage, Connection connection) {
                return new com.hazelcast.client.impl.protocol.task.enterprisemap.MapMadePublishableMessageTask(clientMessage, node, connection);
            }
        };
        tasks[com.hazelcast.client.impl.protocol.codec.EnterpriseMapPublisherCreateWithValueCodec.RequestParameters.TYPE.id()] = new MessageTaskFactory() {
            public MessageTask create(ClientMessage clientMessage, Connection connection) {
                return new com.hazelcast.client.impl.protocol.task.enterprisemap.MapPublisherCreateWithValueMessageTask(clientMessage, node, connection);
            }
        };
//endregion

    }

    @edu.umd.cs.findbugs.annotations.SuppressWarnings({"MS_EXPOSE_REP", "EI_EXPOSE_REP"})
    public MessageTaskFactory[] getTasks() {
        return tasks;
    }

    @Override
    public MessageTask create(ClientMessage clientMessage, Connection connection) {
        try {
            final MessageTaskFactory factory = tasks[clientMessage.getMessageType()];
            if (factory != null) {
                return factory.create(clientMessage, connection);
            }
        } catch (Exception e) {
        }
        return new NoSuchMessageTask(clientMessage, node, connection);
    }

}



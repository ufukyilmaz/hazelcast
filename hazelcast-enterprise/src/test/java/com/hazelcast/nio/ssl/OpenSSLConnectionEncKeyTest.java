package com.hazelcast.nio.ssl;

import com.hazelcast.config.Config;
import com.hazelcast.config.SSLConfig;
import com.hazelcast.core.HazelcastException;
import com.hazelcast.enterprise.EnterpriseParallelJUnitClassRunner;
import com.hazelcast.spi.properties.ClusterProperty;
import com.hazelcast.test.annotation.QuickTest;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.junit.runner.RunWith;

import java.util.Properties;

import static com.hazelcast.TestEnvironmentUtil.copyTestResource;
import static com.hazelcast.nio.ssl.OpenSSLEngineFactory.KEY_CERT_CHAIN_FILE;
import static com.hazelcast.nio.ssl.OpenSSLEngineFactory.KEY_FILE;
import static com.hazelcast.nio.ssl.OpenSSLEngineFactory.KEY_PASSWORD;
import static com.hazelcast.nio.ssl.OpenSSLEngineFactory.TRUST_CERT_COLLECTION_FILE;
import static com.hazelcast.test.HazelcastTestSupport.smallInstanceConfig;

/**
 * OpenSSL tests which use encrypted PKCS#8 key. The encrypted PEM file was generated by following command:
 *
 * <pre>
 * openssl pkcs8 -in privkey.pem -topk8 -v1 PBE-SHA1-3DES -out privkey.enc.pem -passout pass:hazelcast
 * </pre>
 */
@RunWith(EnterpriseParallelJUnitClassRunner.class)
@Category({QuickTest.class})
public class OpenSSLConnectionEncKeyTest extends OpenSSLConnectionTest {

    /**
     * Check that the member initialization fails if an encrypted OpenSSL keyFile is configured, but no password is provided.
     */
    @Test(expected = HazelcastException.class)
    public void testNoPasswordForEncryptedKey() {
        Config config = newConfig();
        config.getNetworkConfig().getSSLConfig().getProperties().remove(KEY_PASSWORD);

        factory.newHazelcastInstance(config);
    }

    protected Config newConfig() {
        Properties sslProperties = new Properties();
        sslProperties.setProperty(KEY_FILE,
                copyTestResource(getClass(), tempFolder.getRoot(), "privkey.enc.pem").getAbsolutePath());
        sslProperties.setProperty(KEY_PASSWORD, "hazelcast");
        sslProperties.setProperty(KEY_CERT_CHAIN_FILE,
                copyTestResource(getClass(), tempFolder.getRoot(), "fullchain.pem").getAbsolutePath());
        sslProperties.setProperty(TRUST_CERT_COLLECTION_FILE,
                copyTestResource(getClass(), tempFolder.getRoot(), "chain.pem").getAbsolutePath());
        SSLConfig sslConfig = new SSLConfig().setEnabled(true).setFactoryImplementation(new OpenSSLEngineFactory())
                .setProperties(sslProperties);

        Config config = smallInstanceConfig().setProperty(ClusterProperty.IO_THREAD_COUNT.getName(), "1");
        config.getNetworkConfig().setSSLConfig(sslConfig);
        return config;
    }
}
